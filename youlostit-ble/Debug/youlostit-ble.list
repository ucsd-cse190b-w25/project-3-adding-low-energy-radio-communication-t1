
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce8  08004ce8  0000621c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce8  08004ce8  00005ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf0  08004cf0  0000621c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf0  08004cf0  00005cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08004cf8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000021c  08004f14  0000621c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08004f14  00006528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9d2  00000000  00000000  0000624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fff  00000000  00000000  00010c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00012c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000741  00000000  00000000  000135e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002756b  00000000  00000000  00013d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b57e  00000000  00000000  0003b294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0eca  00000000  00000000  00046812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001376dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f40  00000000  00000000  00137720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0013a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c04 	.word	0x08004c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	08004c04 	.word	0x08004c04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

/**
 * Initializes the BLE module with appropriate settings
 */
void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 fb3c 	bl	80038f4 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	@ (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	@ (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	@ (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	@ (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	@ (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	@ (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fc16 	bl	8001af8 <HAL_Delay>
	free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 fb17 	bl	8003904 <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	@ (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa8f 	bl	8000804 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	@ (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	@ (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fb00 	bl	8003904 <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa78 	bl	8000804 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	@ (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	@ (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	@ (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 fad4 	bl	8003904 <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	@ (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2307      	movs	r3, #7
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	@ (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	@ (8000464 <ble_init+0x1f4>)
 8000368:	f000 fb12 	bl	8000990 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fac0 	bl	8003904 <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	@ (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	@ (8000478 <ble_init+0x208>)
 8000390:	f000 fa38 	bl	8000804 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 faa9 	bl	8003904 <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	@ (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	@ (8000480 <ble_init+0x210>)
 80003be:	f000 fa21 	bl	8000804 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fa92 	bl	8003904 <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	@ (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	@ 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <ble_init+0x218>)
 80003ec:	f000 fa0a 	bl	8000804 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fa7b 	bl	8003904 <free>

	//This will start the advertisment,
	setConnectable();
 800040e:	f000 f979 	bl	8000704 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	@ (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	@ (8000490 <ble_init+0x220>)
 8000418:	f000 fa40 	bl	800089c <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	@ (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	@ (8000498 <ble_init+0x228>)
 8000428:	f000 fa70 	bl	800090c <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	@ (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <ble_init+0x230>)
 8000438:	f000 fa68 	bl	800090c <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 800043c:	bf00      	nop
}
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000350 	.word	0x20000350
 8000448:	20000354 	.word	0x20000354
 800044c:	20000000 	.word	0x20000000
 8000450:	2000034e 	.word	0x2000034e
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	20000238 	.word	0x20000238
 8000468:	2000023c 	.word	0x2000023c
 800046c:	20000240 	.word	0x20000240
 8000470:	200000f4 	.word	0x200000f4
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	20000344 	.word	0x20000344
 8000490:	200000fc 	.word	0x200000fc
 8000494:	2000034c 	.word	0x2000034c
 8000498:	2000011c 	.word	0x2000011c
 800049c:	20000348 	.word	0x20000348
 80004a0:	2000010c 	.word	0x2000010c

080004a4 <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	@ 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	@ (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	@ 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	@ (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 fdf9 	bl	80020b8 <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 fb13 	bl	8001af8 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	@ (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 fe05 	bl	80020e8 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f002 fe7b 	bl	80031e8 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	@ (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 fdf5 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 fafa 	bl	8001af8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 fdec 	bl	80020e8 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	@ (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f002 fe62 	bl	80031e8 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
  int i;
  char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	  dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f002 fe43 	bl	80031e8 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 fdb6 	bl	80020e8 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 fdab 	bl	80020e8 <HAL_GPIO_WritePin>
        return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
  }else{
  return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
  }
}
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004c1c 	.word	0x08004c1c
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	20000358 	.word	0x20000358
 80005b4:	20000354 	.word	0x20000354

080005b8 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		}
	}

return BLE_OK;
 80005f6:	2300      	movs	r3, #0
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:

void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <sendCommand+0x8c>)
 8000626:	f001 fd5f 	bl	80020e8 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	@ (8000694 <sendCommand+0x90>)
 800063a:	f002 fdd5 	bl	80031e8 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <sendCommand+0x90>)
 800065a:	f002 fc50 	bl	8002efe <HAL_SPI_Transmit>
		result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	  }else{
		result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <sendCommand+0x8c>)
 8000672:	f001 fd39 	bl	80020e8 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>

}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08004c24 	.word	0x08004c24
 8000690:	48000c00 	.word	0x48000c00
 8000694:	20000358 	.word	0x20000358
 8000698:	20000354 	.word	0x20000354

0800069c <catchBLE>:

void catchBLE(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80006a2:	217f      	movs	r1, #127	@ 0x7f
 80006a4:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <catchBLE+0x58>)
 80006a6:	f7ff fefd 	bl	80004a4 <fetchBleEvent>
 80006aa:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d11b      	bne.n	80006ea <catchBLE+0x4e>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006b2:	2203      	movs	r2, #3
 80006b4:	4910      	ldr	r1, [pc, #64]	@ (80006f8 <catchBLE+0x5c>)
 80006b6:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <catchBLE+0x58>)
 80006b8:	f7ff ff7e 	bl	80005b8 <checkEventResp>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <catchBLE+0x2a>
			  // This automatically sets your device to be discoverable
			  // as soon as it disconnects from a device
			  setConnectable();
 80006c2:	f000 f81f 	bl	8000704 <setConnectable>
		  }
		  if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006c6:	2205      	movs	r2, #5
 80006c8:	490c      	ldr	r1, [pc, #48]	@ (80006fc <catchBLE+0x60>)
 80006ca:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <catchBLE+0x58>)
 80006cc:	f7ff ff74 	bl	80005b8 <checkEventResp>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <catchBLE+0x4e>
			  // Little Endian Format
			  *(connectionHandler) = buffer[5];
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <catchBLE+0x58>)
 80006d8:	795b      	ldrb	r3, [r3, #5]
 80006da:	b21a      	sxth	r2, r3
 80006dc:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <catchBLE+0x64>)
 80006de:	801a      	strh	r2, [r3, #0]
			  *(connectionHandler + 1) = buffer[6];
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <catchBLE+0x58>)
 80006e2:	799b      	ldrb	r3, [r3, #6]
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <catchBLE+0x64>)
 80006e8:	805a      	strh	r2, [r3, #2]
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000244 	.word	0x20000244
 80006f8:	200000e8 	.word	0x200000e8
 80006fc:	200000ec 	.word	0x200000ec
 8000700:	2000012c 	.word	0x2000012c

08000704 <setConnectable>:

void setConnectable(){
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800070a:	200c      	movs	r0, #12
 800070c:	f003 f8f2 	bl	80038f4 <malloc>
 8000710:	4603      	mov	r3, r0
 8000712:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4a36      	ldr	r2, [pc, #216]	@ (80007f0 <setConnectable+0xec>)
 8000718:	6810      	ldr	r0, [r2, #0]
 800071a:	6018      	str	r0, [r3, #0]
 800071c:	8891      	ldrh	r1, [r2, #4]
 800071e:	7992      	ldrb	r2, [r2, #6]
 8000720:	8099      	strh	r1, [r3, #4]
 8000722:	719a      	strb	r2, [r3, #6]
	   localname[sizeof(deviceName)+1]=0x00;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3308      	adds	r3, #8
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3309      	adds	r3, #9
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	330a      	adds	r3, #10
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	330b      	adds	r3, #11
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3307      	adds	r3, #7
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <setConnectable+0xf0>)
 800074e:	2208      	movs	r2, #8
 8000750:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <setConnectable+0xf0>)
 8000754:	2215      	movs	r2, #21
 8000756:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000758:	2019      	movs	r0, #25
 800075a:	f003 f8cb 	bl	80038f4 <malloc>
 800075e:	4603      	mov	r3, r0
 8000760:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <setConnectable+0xf0>)
 8000766:	461c      	mov	r4, r3
 8000768:	4613      	mov	r3, r2
 800076a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800076c:	6020      	str	r0, [r4, #0]
 800076e:	6061      	str	r1, [r4, #4]
 8000770:	60a2      	str	r2, [r4, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	330d      	adds	r3, #13
 800077a:	220c      	movs	r2, #12
 800077c:	68f9      	ldr	r1, [r7, #12]
 800077e:	4618      	mov	r0, r3
 8000780:	f003 fc3f 	bl	8004002 <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000784:	2119      	movs	r1, #25
 8000786:	68b8      	ldr	r0, [r7, #8]
 8000788:	f7ff ff3c 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 800078c:	2007      	movs	r0, #7
 800078e:	f003 f8b1 	bl	80038f4 <malloc>
 8000792:	4603      	mov	r3, r0
 8000794:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 8000796:	bf00      	nop
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <setConnectable+0xf4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0fb      	beq.n	8000798 <setConnectable+0x94>
	   res=fetchBleEvent(rxEvent,7);
 80007a0:	2107      	movs	r1, #7
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff fe7e 	bl	80004a4 <fetchBleEvent>
 80007a8:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d10f      	bne.n	80007d0 <setConnectable+0xcc>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80007b0:	2207      	movs	r2, #7
 80007b2:	4912      	ldr	r1, [pc, #72]	@ (80007fc <setConnectable+0xf8>)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff feff 	bl	80005b8 <checkEventResp>
 80007ba:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d106      	bne.n	80007d0 <setConnectable+0xcc>
		   stackInitCompleteFlag|=0x80;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <setConnectable+0xfc>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <setConnectable+0xfc>)
 80007ce:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f003 f897 	bl	8003904 <free>
	   free(discoverableCommand);
 80007d6:	68b8      	ldr	r0, [r7, #8]
 80007d8:	f003 f894 	bl	8003904 <free>
	   free(localname);
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f003 f891 	bl	8003904 <free>
	   HAL_Delay(10);
 80007e2:	200a      	movs	r0, #10
 80007e4:	f001 f988 	bl	8001af8 <HAL_Delay>
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	200000f4 	.word	0x200000f4
 80007f4:	20000078 	.word	0x20000078
 80007f8:	20000354 	.word	0x20000354
 80007fc:	20000088 	.word	0x20000088
 8000800:	2000034e 	.word	0x2000034e

08000804 <BLE_command>:
 * @param sizeRes Expected size of the response result.
 * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
 * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
 *             or an error code if something went wrong.
 */
int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fef5 	bl	8000604 <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	005a      	lsls	r2, r3, #1
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f003 f866 	bl	80038f4 <malloc>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <BLE_command+0x90>)
 800082e:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000834:	e007      	b.n	8000846 <BLE_command+0x42>
		   contatore++;
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3301      	adds	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000842:	4293      	cmp	r3, r2
 8000844:	dc07      	bgt.n	8000856 <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000846:	2140      	movs	r1, #64	@ 0x40
 8000848:	4813      	ldr	r0, [pc, #76]	@ (8000898 <BLE_command+0x94>)
 800084a:	f001 fc35 	bl	80020b8 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f0      	beq.n	8000836 <BLE_command+0x32>
 8000854:	e000      	b.n	8000858 <BLE_command+0x54>
			   break;
 8000856:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <BLE_command+0x90>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	005a      	lsls	r2, r3, #1
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4619      	mov	r1, r3
 8000866:	f7ff fe1d 	bl	80004a4 <fetchBleEvent>
 800086a:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d107      	bne.n	8000882 <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <BLE_command+0x90>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe9c 	bl	80005b8 <checkEventResp>
 8000880:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 8000882:	200a      	movs	r0, #10
 8000884:	f001 f938 	bl	8001af8 <HAL_Delay>


	return response;
 8000888:	697b      	ldr	r3, [r7, #20]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000350 	.word	0x20000350
 8000898:	48001000 	.word	0x48001000

0800089c <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <addService+0x60>)
 80008aa:	2210      	movs	r2, #16
 80008ac:	68f9      	ldr	r1, [r7, #12]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fba7 	bl	8004002 <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <addService+0x64>)
 80008ba:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008bc:	2301      	movs	r3, #1
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2307      	movs	r3, #7
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <addService+0x68>)
 80008c4:	2117      	movs	r1, #23
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <addService+0x64>)
 80008c8:	f7ff ff9c 	bl	8000804 <BLE_command>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10a      	bne.n	80008e8 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <addService+0x6c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	79da      	ldrb	r2, [r3, #7]
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <addService+0x6c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	7a12      	ldrb	r2, [r2, #8]
 80008e6:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <addService+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f809 	bl	8003904 <free>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000095 	.word	0x20000095
 8000900:	20000090 	.word	0x20000090
 8000904:	200000a8 	.word	0x200000a8
 8000908:	20000350 	.word	0x20000350

0800090c <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <addCharacteristic+0x74>)
 800091c:	2210      	movs	r2, #16
 800091e:	68f9      	ldr	r1, [r7, #12]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fb6e 	bl	8004002 <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b16      	ldr	r3, [pc, #88]	@ (8000984 <addCharacteristic+0x78>)
 800092c:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	785a      	ldrb	r2, [r3, #1]
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <addCharacteristic+0x78>)
 8000934:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 8000936:	4a13      	ldr	r2, [pc, #76]	@ (8000984 <addCharacteristic+0x78>)
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 800093c:	4a11      	ldr	r2, [pc, #68]	@ (8000984 <addCharacteristic+0x78>)
 800093e:	7e3b      	ldrb	r3, [r7, #24]
 8000940:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000942:	2301      	movs	r3, #1
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2307      	movs	r3, #7
 8000948:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <addCharacteristic+0x7c>)
 800094a:	211e      	movs	r1, #30
 800094c:	480d      	ldr	r0, [pc, #52]	@ (8000984 <addCharacteristic+0x78>)
 800094e:	f7ff ff59 	bl	8000804 <BLE_command>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10a      	bne.n	800096e <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <addCharacteristic+0x80>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	79da      	ldrb	r2, [r3, #7]
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 8000962:	4b0a      	ldr	r3, [pc, #40]	@ (800098c <addCharacteristic+0x80>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	3301      	adds	r3, #1
 800096a:	7a12      	ldrb	r2, [r2, #8]
 800096c:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 800096e:	4b07      	ldr	r3, [pc, #28]	@ (800098c <addCharacteristic+0x80>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f002 ffc6 	bl	8003904 <free>
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000b7 	.word	0x200000b7
 8000984:	200000b0 	.word	0x200000b0
 8000988:	200000d0 	.word	0x200000d0
 800098c:	20000350 	.word	0x20000350

08000990 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af02      	add	r7, sp, #8
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3306      	adds	r3, #6
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <updateCharValue+0x9c>)
 80009a8:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <updateCharValue+0x9c>)
 80009b0:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	785a      	ldrb	r2, [r3, #1]
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <updateCharValue+0x9c>)
 80009b8:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <updateCharValue+0x9c>)
 80009c0:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b19      	ldr	r3, [pc, #100]	@ (8000a2c <updateCharValue+0x9c>)
 80009c8:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <updateCharValue+0x9c>)
 80009d0:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <updateCharValue+0x9c>)
 80009d8:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	330a      	adds	r3, #10
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 ff88 	bl	80038f4 <malloc>
 80009e4:	4603      	mov	r3, r0
 80009e6:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 80009e8:	220a      	movs	r2, #10
 80009ea:	4910      	ldr	r1, [pc, #64]	@ (8000a2c <updateCharValue+0x9c>)
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f003 fb08 	bl	8004002 <memcpy>
	memcpy(commandComplete+10,data,size);
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	330a      	adds	r3, #10
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	6a39      	ldr	r1, [r7, #32]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fb01 	bl	8004002 <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f103 010a 	add.w	r1, r3, #10
 8000a06:	2300      	movs	r3, #0
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <updateCharValue+0xa0>)
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff fef8 	bl	8000804 <BLE_command>

	free(commandComplete);
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f002 ff75 	bl	8003904 <free>
	free(rxEvent);
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <updateCharValue+0xa4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 ff70 	bl	8003904 <free>
}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	200000d0 	.word	0x200000d0
 8000a34:	20000350 	.word	0x20000350

08000a38 <i2c_init>:
 *
*/

unsigned int in = 0;

void i2c_init() {
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	// Turn on Clock for I2C
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000a3c:	4b65      	ldr	r3, [pc, #404]	@ (8000bd4 <i2c_init+0x19c>)
 8000a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a40:	4a64      	ldr	r2, [pc, #400]	@ (8000bd4 <i2c_init+0x19c>)
 8000a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a46:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000a48:	4b62      	ldr	r3, [pc, #392]	@ (8000bd4 <i2c_init+0x19c>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	4a61      	ldr	r2, [pc, #388]	@ (8000bd4 <i2c_init+0x19c>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Configure GPIO
	// Set GPIO to Alternative function mode
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000a54:	4b60      	ldr	r3, [pc, #384]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a5f      	ldr	r2, [pc, #380]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a5a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000a5e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000a60:	4b5d      	ldr	r3, [pc, #372]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a5c      	ldr	r2, [pc, #368]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a6a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a59      	ldr	r2, [pc, #356]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a72:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000a76:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000a78:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a56      	ldr	r2, [pc, #344]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000a82:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000a84:	4b54      	ldr	r3, [pc, #336]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	4a53      	ldr	r2, [pc, #332]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a8a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a8e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000a90:	4b51      	ldr	r3, [pc, #324]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4a50      	ldr	r2, [pc, #320]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a9a:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 8000a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd8 <i2c_init+0x1a0>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd8 <i2c_init+0x1a0>)
 8000aa2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000aa6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_1;
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <i2c_init+0x1a0>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <i2c_init+0x1a0>)
 8000aae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ab2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000ab4:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	4a47      	ldr	r2, [pc, #284]	@ (8000bd8 <i2c_init+0x1a0>)
 8000aba:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000abe:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aca:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use high speed mode */
	GPIOB->OSPEEDR |= (0x2 << GPIO_OSPEEDR_OSPEED10_Pos);
 8000acc:	4b42      	ldr	r3, [pc, #264]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	4a41      	ldr	r2, [pc, #260]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x2 << GPIO_OSPEEDR_OSPEED11_Pos);
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ade:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ae2:	6093      	str	r3, [r2, #8]

	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <i2c_init+0x1a0>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd8 <i2c_init+0x1a0>)
 8000aea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000aee:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL11_Pos);//GPIO_AFRH_AFSEL11_2;
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <i2c_init+0x1a0>)
 8000af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af4:	4a38      	ldr	r2, [pc, #224]	@ (8000bd8 <i2c_init+0x1a0>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000afc:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <i2c_init+0x1a0>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b00:	4a35      	ldr	r2, [pc, #212]	@ (8000bd8 <i2c_init+0x1a0>)
 8000b02:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000b06:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL10_Pos);//GPIO_AFRH_AFSEL10_2;
 8000b08:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <i2c_init+0x1a0>)
 8000b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0c:	4a32      	ldr	r2, [pc, #200]	@ (8000bd8 <i2c_init+0x1a0>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b12:	6253      	str	r3, [r2, #36]	@ 0x24

	// Configure I2C
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000b14:	4b31      	ldr	r3, [pc, #196]	@ (8000bdc <i2c_init+0x1a4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a30      	ldr	r2, [pc, #192]	@ (8000bdc <i2c_init+0x1a4>)
 8000b1a:	f023 0301 	bic.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]


	// Turn on Master Mode timers
	I2C2->TIMINGR |= I2C_TIMINGR_SCLH;
 8000b20:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <i2c_init+0x1a4>)
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	4a2d      	ldr	r2, [pc, #180]	@ (8000bdc <i2c_init+0x1a4>)
 8000b26:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000b2a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= I2C_TIMINGR_SCLL;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <i2c_init+0x1a4>)
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	4a2a      	ldr	r2, [pc, #168]	@ (8000bdc <i2c_init+0x1a4>)
 8000b32:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000b36:	6113      	str	r3, [r2, #16]

	// Set BAUD rate to 400khz
	// prescaler
	I2C2->TIMINGR |= (1 << I2C_TIMINGR_PRESC_Pos);//(0 << I2C_TIMINGR_PRESC_Pos);
 8000b38:	4b28      	ldr	r3, [pc, #160]	@ (8000bdc <i2c_init+0x1a4>)
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	4a27      	ldr	r2, [pc, #156]	@ (8000bdc <i2c_init+0x1a4>)
 8000b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	6113      	str	r3, [r2, #16]
	// low cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
 8000b44:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <i2c_init+0x1a4>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	4a24      	ldr	r2, [pc, #144]	@ (8000bdc <i2c_init+0x1a4>)
 8000b4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b4e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL_Pos);
 8000b50:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <i2c_init+0x1a4>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <i2c_init+0x1a4>)
 8000b56:	f043 0313 	orr.w	r3, r3, #19
 8000b5a:	6113      	str	r3, [r2, #16]
	// high cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <i2c_init+0x1a4>)
 8000b5e:	691b      	ldr	r3, [r3, #16]
 8000b60:	4a1e      	ldr	r2, [pc, #120]	@ (8000bdc <i2c_init+0x1a4>)
 8000b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000b66:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0xF << I2C_TIMINGR_SCLH_Pos);
 8000b68:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <i2c_init+0x1a4>)
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <i2c_init+0x1a4>)
 8000b6e:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000b72:	6113      	str	r3, [r2, #16]
	// data hold cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <i2c_init+0x1a4>)
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <i2c_init+0x1a4>)
 8000b7a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000b7e:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <i2c_init+0x1a4>)
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <i2c_init+0x1a4>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8a:	6113      	str	r3, [r2, #16]
	// data setup cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <i2c_init+0x1a4>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	4a12      	ldr	r2, [pc, #72]	@ (8000bdc <i2c_init+0x1a4>)
 8000b92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000b96:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <i2c_init+0x1a4>)
 8000b9a:	691b      	ldr	r3, [r3, #16]
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <i2c_init+0x1a4>)
 8000b9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba2:	6113      	str	r3, [r2, #16]

	// Set slave byte control
	//I2C2->CR1 |= I2C_CR1_SBC;

	// Enable Reload
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <i2c_init+0x1a4>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <i2c_init+0x1a4>)
 8000baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bae:	6053      	str	r3, [r2, #4]

	// Turn it to 7 bit addressing mode
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <i2c_init+0x1a4>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <i2c_init+0x1a4>)
 8000bb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000bba:	6053      	str	r3, [r2, #4]
//	I2C2->CR1 |= I2C_CR1_ADDRIE;
//	I2C2->CR1 |= I2C_CR1_RXIE;
//	I2C2->CR1 |= I2C_CR1_TXIE;

	// Enable peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <i2c_init+0x1a4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <i2c_init+0x1a4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]

}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	40005800 	.word	0x40005800

08000be0 <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	603a      	str	r2, [r7, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	71bb      	strb	r3, [r7, #6]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	717b      	strb	r3, [r7, #5]
	while ((I2C2->ISR & I2C_ISR_BUSY)) {}
 8000bf6:	bf00      	nop
 8000bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d24 <i2c_transaction+0x144>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f9      	bne.n	8000bf8 <i2c_transaction+0x18>
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000c04:	4b47      	ldr	r3, [pc, #284]	@ (8000d24 <i2c_transaction+0x144>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	4a46      	ldr	r2, [pc, #280]	@ (8000d24 <i2c_transaction+0x144>)
 8000c0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c0e:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000c10:	4b44      	ldr	r3, [pc, #272]	@ (8000d24 <i2c_transaction+0x144>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	4a43      	ldr	r2, [pc, #268]	@ (8000d24 <i2c_transaction+0x144>)
 8000c16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000c1a:	6053      	str	r3, [r2, #4]

	int count = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]

	// set amount of expecting bytes
	I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8000c20:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <i2c_transaction+0x144>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	@ (8000d24 <i2c_transaction+0x144>)
 8000c26:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000c2a:	6053      	str	r3, [r2, #4]
	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <i2c_transaction+0x144>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	797b      	ldrb	r3, [r7, #5]
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	493b      	ldr	r1, [pc, #236]	@ (8000d24 <i2c_transaction+0x144>)
 8000c36:	4313      	orrs	r3, r2
 8000c38:	604b      	str	r3, [r1, #4]

	// set device addr
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d24 <i2c_transaction+0x144>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a39      	ldr	r2, [pc, #228]	@ (8000d24 <i2c_transaction+0x144>)
 8000c40:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000c44:	f023 0303 	bic.w	r3, r3, #3
 8000c48:	6053      	str	r3, [r2, #4]
	I2C2->CR2 |= (address << 1);
 8000c4a:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <i2c_transaction+0x144>)
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4934      	ldr	r1, [pc, #208]	@ (8000d24 <i2c_transaction+0x144>)
 8000c54:	4313      	orrs	r3, r2
 8000c56:	604b      	str	r3, [r1, #4]

	// if dir == 0 then slave in receiver, else it is transmitter
	if (dir == 0) {
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d120      	bne.n	8000ca0 <i2c_transaction+0xc0>
		I2C2->CR2 &= ~(I2C_CR2_RD_WRN);
 8000c5e:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <i2c_transaction+0x144>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4a30      	ldr	r2, [pc, #192]	@ (8000d24 <i2c_transaction+0x144>)
 8000c64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000c68:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <i2c_transaction+0x144>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000d24 <i2c_transaction+0x144>)
 8000c70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c74:	6053      	str	r3, [r2, #4]
		while (count < len) {
 8000c76:	e00e      	b.n	8000c96 <i2c_transaction+0xb6>
			// if TXIS = 1, then it it looking for something to be written the TXDR register
			if (I2C2->ISR & I2C_ISR_TXIS) {
 8000c78:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <i2c_transaction+0x144>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d008      	beq.n	8000c96 <i2c_transaction+0xb6>
				I2C2->TXDR = *(data+count) & 0xFF;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <i2c_transaction+0x144>)
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
				count++;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
		while (count < len) {
 8000c96:	797b      	ldrb	r3, [r7, #5]
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbec      	blt.n	8000c78 <i2c_transaction+0x98>
 8000c9e:	e03a      	b.n	8000d16 <i2c_transaction+0x136>
			}
		}
	}
	else if (dir == 1) {
 8000ca0:	79bb      	ldrb	r3, [r7, #6]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d137      	bne.n	8000d16 <i2c_transaction+0x136>
		// write register addr
		I2C2->CR2 &= ~(I2C_CR2_RD_WRN);
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <i2c_transaction+0x144>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a1e      	ldr	r2, [pc, #120]	@ (8000d24 <i2c_transaction+0x144>)
 8000cac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cb0:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <i2c_transaction+0x144>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <i2c_transaction+0x144>)
 8000cb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cbc:	6053      	str	r3, [r2, #4]
		while (!(I2C2->ISR & I2C_ISR_TXIS)) {}
 8000cbe:	bf00      	nop
 8000cc0:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <i2c_transaction+0x144>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0f9      	beq.n	8000cc0 <i2c_transaction+0xe0>
		I2C2->TXDR = data[0] & 0xFF;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <i2c_transaction+0x144>)
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28

		// repeated start
		I2C2->CR2 |= (0x1 << I2C_CR2_RD_WRN_Pos);
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <i2c_transaction+0x144>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <i2c_transaction+0x144>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cde:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <i2c_transaction+0x144>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d24 <i2c_transaction+0x144>)
 8000ce6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cea:	6053      	str	r3, [r2, #4]
		while(count < len) {
 8000cec:	e00f      	b.n	8000d0e <i2c_transaction+0x12e>
			if (I2C2->ISR & I2C_ISR_RXNE) {
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <i2c_transaction+0x144>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d009      	beq.n	8000d0e <i2c_transaction+0x12e>
				//data[count] = 0;
				data[count] = I2C2->RXDR & 0xFF;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <i2c_transaction+0x144>)
 8000cfc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	b2ca      	uxtb	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]

				count++;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
		while(count < len) {
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbeb      	blt.n	8000cee <i2c_transaction+0x10e>
	// Clear the stop flag
//	I2C2->ICR |= I2C_ICR_STOPCF;
	// clear out address by setting ADDRCF bit
//	I2C2->ISR |= I2C_ICR_ADDRCF;
	//I2C2->CR2 &= ~I2C2->CR2;
	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40005800 	.word	0x40005800

08000d28 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  // Enable clock for GPIOA and GPIOB
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000d2c:	4b32      	ldr	r3, [pc, #200]	@ (8000df8 <leds_init+0xd0>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a31      	ldr	r2, [pc, #196]	@ (8000df8 <leds_init+0xd0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000d38:	4b2f      	ldr	r3, [pc, #188]	@ (8000df8 <leds_init+0xd0>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8000df8 <leds_init+0xd0>)
 8000d3e:	f043 0302 	orr.w	r3, r3, #2
 8000d42:	64d3      	str	r3, [r2, #76]	@ 0x4c


  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000d44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d4e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d52:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000d54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d62:	6013      	str	r3, [r2, #0]

  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <leds_init+0xd4>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a24      	ldr	r2, [pc, #144]	@ (8000dfc <leds_init+0xd4>)
 8000d6a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000d6e:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000d70:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <leds_init+0xd4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a21      	ldr	r2, [pc, #132]	@ (8000dfc <leds_init+0xd4>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000d7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d86:	f023 0320 	bic.w	r3, r3, #32
 8000d8a:	6053      	str	r3, [r2, #4]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <leds_init+0xd4>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	4a1a      	ldr	r2, [pc, #104]	@ (8000dfc <leds_init+0xd4>)
 8000d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d96:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000da2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000da6:	60d3      	str	r3, [r2, #12]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <leds_init+0xd4>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <leds_init+0xd4>)
 8000dae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000db2:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use **very high speed speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000db4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dbe:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000dc2:	6093      	str	r3, [r2, #8]

  /* Configure the GPIO to use **very high speed speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <leds_init+0xd4>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <leds_init+0xd4>)
 8000dca:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000dce:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000dd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dda:	f023 0320 	bic.w	r3, r3, #32
 8000dde:	6153      	str	r3, [r2, #20]

  /* Turn off the LED */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <leds_init+0xd4>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <leds_init+0xd4>)
 8000de6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000dea:	6153      	str	r3, [r2, #20]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400

08000e00 <leds_set>:

void leds_set(uint8_t led)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	// Turn on corresponding LEDs depending on the value given
	if (led & 1) {
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <leds_set+0x26>
		GPIOA->ODR |= GPIO_ODR_OD5;
 8000e14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6153      	str	r3, [r2, #20]
 8000e24:	e007      	b.n	8000e36 <leds_set+0x36>
	}
	else {
		GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000e26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e30:	f023 0320 	bic.w	r3, r3, #32
 8000e34:	6153      	str	r3, [r2, #20]
	}
	if (led & 2) {
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <leds_set+0x4e>
		GPIOB->ODR |= GPIO_ODR_OD14;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <leds_set+0x68>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <leds_set+0x68>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4a:	6153      	str	r3, [r2, #20]
	}
	else {
		GPIOB->ODR &= ~GPIO_ODR_OD14;
	}

}
 8000e4c:	e005      	b.n	8000e5a <leds_set+0x5a>
		GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <leds_set+0x68>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <leds_set+0x68>)
 8000e54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e58:	6153      	str	r3, [r2, #20]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400

08000e6c <lsm6dsl_init>:
#define OUTY_L_XL 0x2A
#define OUTY_H_XL 0x2B
#define OUTZ_L_XL 0x2C
#define OUTZ_H_XL 0x2D

void lsm6dsl_init() {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	i2c_init();
 8000e72:	f7ff fde1 	bl	8000a38 <i2c_init>
	uint8_t data[2] = {CTRL1_XL, 0x60};
 8000e76:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000e7a:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000e7c:	1d3a      	adds	r2, r7, #4
 8000e7e:	2302      	movs	r3, #2
 8000e80:	2100      	movs	r1, #0
 8000e82:	206a      	movs	r0, #106	@ 0x6a
 8000e84:	f7ff feac 	bl	8000be0 <i2c_transaction>
	data[0] = INT1_CTRL;
 8000e88:	230d      	movs	r3, #13
 8000e8a:	713b      	strb	r3, [r7, #4]
	data[1] = 0x01;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000e90:	1d3a      	adds	r2, r7, #4
 8000e92:	2302      	movs	r3, #2
 8000e94:	2100      	movs	r1, #0
 8000e96:	206a      	movs	r0, #106	@ 0x6a
 8000e98:	f7ff fea2 	bl	8000be0 <i2c_transaction>
//	data[0] = CTRL8_XL;
//	data[1] = 0x11 << 5;
//	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
	printf("lsm6dsl init done\n");
 8000e9c:	4803      	ldr	r0, [pc, #12]	@ (8000eac <lsm6dsl_init+0x40>)
 8000e9e:	f002 ff11 	bl	8003cc4 <puts>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08004c2c 	.word	0x08004c2c

08000eb0 <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	uint8_t data = STATUS_REG;
 8000ebc:	231e      	movs	r3, #30
 8000ebe:	75fb      	strb	r3, [r7, #23]
	while (data & 0x1) {
 8000ec0:	e00d      	b.n	8000ede <lsm6dsl_read_xyz+0x2e>
		printf("checking status reg %d \n", data);
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4833      	ldr	r0, [pc, #204]	@ (8000f94 <lsm6dsl_read_xyz+0xe4>)
 8000ec8:	f002 fe94 	bl	8003bf4 <iprintf>
		data = STATUS_REG;
 8000ecc:	231e      	movs	r3, #30
 8000ece:	75fb      	strb	r3, [r7, #23]
		i2c_transaction(LSM6DSL_ADDR, 1, &data, 1);
 8000ed0:	f107 0217 	add.w	r2, r7, #23
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	206a      	movs	r0, #106	@ 0x6a
 8000eda:	f7ff fe81 	bl	8000be0 <i2c_transaction>
	while (data & 0x1) {
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1ec      	bne.n	8000ec2 <lsm6dsl_read_xyz+0x12>
	}
	uint8_t xl = OUTX_L_XL;
 8000ee8:	2328      	movs	r3, #40	@ 0x28
 8000eea:	75bb      	strb	r3, [r7, #22]
	i2c_transaction(LSM6DSL_ADDR, 1, &xl, 1);
 8000eec:	f107 0216 	add.w	r2, r7, #22
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	206a      	movs	r0, #106	@ 0x6a
 8000ef6:	f7ff fe73 	bl	8000be0 <i2c_transaction>
	//printf("xl: %d ", xl);
	uint8_t xh = OUTX_H_XL;
 8000efa:	2329      	movs	r3, #41	@ 0x29
 8000efc:	757b      	strb	r3, [r7, #21]
	i2c_transaction(LSM6DSL_ADDR, 1, &xh, 1);
 8000efe:	f107 0215 	add.w	r2, r7, #21
 8000f02:	2301      	movs	r3, #1
 8000f04:	2101      	movs	r1, #1
 8000f06:	206a      	movs	r0, #106	@ 0x6a
 8000f08:	f7ff fe6a 	bl	8000be0 <i2c_transaction>
	//printf("xh: %d \n", xh);
	uint8_t yl = OUTY_L_XL;
 8000f0c:	232a      	movs	r3, #42	@ 0x2a
 8000f0e:	753b      	strb	r3, [r7, #20]
	i2c_transaction(LSM6DSL_ADDR, 1, &yl, 1);
 8000f10:	f107 0214 	add.w	r2, r7, #20
 8000f14:	2301      	movs	r3, #1
 8000f16:	2101      	movs	r1, #1
 8000f18:	206a      	movs	r0, #106	@ 0x6a
 8000f1a:	f7ff fe61 	bl	8000be0 <i2c_transaction>
	//printf("yl: %d \n", yl);
	uint8_t yh = OUTY_H_XL;
 8000f1e:	232b      	movs	r3, #43	@ 0x2b
 8000f20:	74fb      	strb	r3, [r7, #19]
	i2c_transaction(LSM6DSL_ADDR, 1, &yh, 1);
 8000f22:	f107 0213 	add.w	r2, r7, #19
 8000f26:	2301      	movs	r3, #1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	206a      	movs	r0, #106	@ 0x6a
 8000f2c:	f7ff fe58 	bl	8000be0 <i2c_transaction>
	//printf("yh: %d \n", yh);
	uint8_t zl = OUTZ_L_XL;
 8000f30:	232c      	movs	r3, #44	@ 0x2c
 8000f32:	74bb      	strb	r3, [r7, #18]
	i2c_transaction(LSM6DSL_ADDR, 1, &zl, 1);
 8000f34:	f107 0212 	add.w	r2, r7, #18
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	206a      	movs	r0, #106	@ 0x6a
 8000f3e:	f7ff fe4f 	bl	8000be0 <i2c_transaction>
	//printf("zl: %d \n", zl);
	uint8_t zh = OUTZ_H_XL;
 8000f42:	232d      	movs	r3, #45	@ 0x2d
 8000f44:	747b      	strb	r3, [r7, #17]
	i2c_transaction(LSM6DSL_ADDR, 1, &zh, 1);
 8000f46:	f107 0211 	add.w	r2, r7, #17
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	206a      	movs	r0, #106	@ 0x6a
 8000f50:	f7ff fe46 	bl	8000be0 <i2c_transaction>
	//printf("zh: %d \n", zh);
	*x = xh << 8 | xl;
 8000f54:	7d7b      	ldrb	r3, [r7, #21]
 8000f56:	021b      	lsls	r3, r3, #8
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7dbb      	ldrb	r3, [r7, #22]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	801a      	strh	r2, [r3, #0]
	*y = yh << 8 | yl;
 8000f66:	7cfb      	ldrb	r3, [r7, #19]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	7d3b      	ldrb	r3, [r7, #20]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	801a      	strh	r2, [r3, #0]
	*z = zh << 8 | zl;
 8000f78:	7c7b      	ldrb	r3, [r7, #17]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7cbb      	ldrb	r3, [r7, #18]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	801a      	strh	r2, [r3, #0]
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08004c40 	.word	0x08004c40

08000f98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc0:	e000      	b.n	8000fc4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fc2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fce:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_write>:
int dataAvailable = 0;

SPI_HandleTypeDef hspi3;

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x2a>
        ITM_SendChar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffc7 	bl	8000f98 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x16>
    }
    return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102a:	f000 fcf0 	bl	8001a0e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800102e:	f000 f993 	bl	8001358 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001032:	f000 fa15 	bl	8001460 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001036:	f000 f9d5 	bl	80013e4 <MX_SPI3_Init>

  // Our peripheral configurables
  leds_init();
 800103a:	f7ff fe75 	bl	8000d28 <leds_init>
  timer_init(TIM2);
 800103e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001042:	f000 fc4b 	bl	80018dc <timer_init>
  timer_init(TIM3);
 8001046:	481f      	ldr	r0, [pc, #124]	@ (80010c4 <main+0xa0>)
 8001048:	f000 fc48 	bl	80018dc <timer_init>
  timer_set_ms(TIM3, 50);
 800104c:	2132      	movs	r1, #50	@ 0x32
 800104e:	481d      	ldr	r0, [pc, #116]	@ (80010c4 <main+0xa0>)
 8001050:	f000 fc9d 	bl	800198e <timer_set_ms>
  //timer_set_ms(TIM2, 60000);
  timer_set_ms(TIM2, 1000);
 8001054:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001058:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800105c:	f000 fc97 	bl	800198e <timer_set_ms>
  lsm6dsl_init();
 8001060:	f7ff ff04 	bl	8000e6c <lsm6dsl_init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f001 f83b 	bl	80020e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fd40 	bl	8001af8 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f001 f831 	bl	80020e8 <HAL_GPIO_WritePin>

  ble_init();
 8001086:	f7ff f8f3 	bl	8000270 <ble_init>

  HAL_Delay(10);
 800108a:	200a      	movs	r0, #10
 800108c:	f000 fd34 	bl	8001af8 <HAL_Delay>

  uint8_t nonDiscoverable = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	71fb      	strb	r3, [r7, #7]

  int16_t prev_xyz[3] = {0,0,0};
 8001094:	2300      	movs	r3, #0
 8001096:	803b      	strh	r3, [r7, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	2300      	movs	r3, #0
 800109e:	80bb      	strh	r3, [r7, #4]

  while (1)
  {
	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <main+0x96>
 80010a6:	2140      	movs	r1, #64	@ 0x40
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <main+0xa4>)
 80010aa:	f001 f805 	bl	80020b8 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <main+0x96>
	    catchBLE();
 80010b4:	f7ff faf2 	bl	800069c <catchBLE>
 80010b8:	e003      	b.n	80010c2 <main+0x9e>
	  }else{
		  //HAL_Delay(1000);
		  you_lost_it(prev_xyz);
 80010ba:	463b      	mov	r3, r7
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f805 	bl	80010cc <you_lost_it>
	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80010c2:	e7ed      	b.n	80010a0 <main+0x7c>
 80010c4:	40000400 	.word	0x40000400
 80010c8:	48001000 	.word	0x48001000

080010cc <you_lost_it>:
	  }
	  // Wait for interrupt, only uncomment if low power is needed
	  //__WFI();
  }
}
void you_lost_it(int16_t* xyz){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08e      	sub	sp, #56	@ 0x38
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
	int16_t prev_x = xyz[0];
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t prev_y = xyz[1];
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	885b      	ldrh	r3, [r3, #2]
 80010de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t prev_z = xyz[2];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	889b      	ldrh	r3, [r3, #4]
 80010e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t x = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	847b      	strh	r3, [r7, #34]	@ 0x22
	int16_t y = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	843b      	strh	r3, [r7, #32]
	int16_t z = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	83fb      	strh	r3, [r7, #30]
	lsm6dsl_read_xyz(&x,&y, &z);
 80010f2:	f107 021e 	add.w	r2, r7, #30
 80010f6:	f107 0120 	add.w	r1, r7, #32
 80010fa:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fed6 	bl	8000eb0 <lsm6dsl_read_xyz>
	int16_t diff_x = abs(x) - abs(prev_x);
 8001104:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001108:	2b00      	cmp	r3, #0
 800110a:	bfb8      	it	lt
 800110c:	425b      	neglt	r3, r3
 800110e:	b29a      	uxth	r2, r3
 8001110:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001114:	2b00      	cmp	r3, #0
 8001116:	bfb8      	it	lt
 8001118:	425b      	neglt	r3, r3
 800111a:	b29b      	uxth	r3, r3
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t diff_y = abs(y) - abs(prev_y);
 8001122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bfb8      	it	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	b29a      	uxth	r2, r3
 800112e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001132:	2b00      	cmp	r3, #0
 8001134:	bfb8      	it	lt
 8001136:	425b      	neglt	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t diff_z = abs(z) - abs(prev_z);
 8001140:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bfb8      	it	lt
 8001148:	425b      	neglt	r3, r3
 800114a:	b29a      	uxth	r2, r3
 800114c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001150:	2b00      	cmp	r3, #0
 8001152:	bfb8      	it	lt
 8001154:	425b      	neglt	r3, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	84bb      	strh	r3, [r7, #36]	@ 0x24

	// keep track of how many times that it moved
	if (diff_x + diff_y + diff_z >= OFFSET_THRESH) {
 800115e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001162:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001166:	441a      	add	r2, r3
 8001168:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800116c:	4413      	add	r3, r2
 800116e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001172:	db0c      	blt.n	800118e <you_lost_it+0xc2>
		timer_reset(TIM2);
 8001174:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001178:	f000 fbfa 	bl	8001970 <timer_reset>
		led_interupt = 0;
 800117c:	4b1a      	ldr	r3, [pc, #104]	@ (80011e8 <you_lost_it+0x11c>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
		minsLost = 0;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <you_lost_it+0x120>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		leds_set(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff fe39 	bl	8000e00 <leds_set>
	}
	if (led_interupt) {
 800118e:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <you_lost_it+0x11c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d016      	beq.n	80011c4 <you_lost_it+0xf8>
		//HAL_Delay(10);
		leds_set(lights);
 8001196:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <you_lost_it+0x124>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe2f 	bl	8000e00 <leds_set>
		unsigned char message[21];
		snprintf((char*)message, 21, "Tag lost for %d mins", minsLost);
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <you_lost_it+0x120>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f107 0008 	add.w	r0, r7, #8
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <you_lost_it+0x128>)
 80011ac:	2115      	movs	r1, #21
 80011ae:	f002 fd91 	bl	8003cd4 <sniprintf>
		updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(message)-1, message);
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2314      	movs	r3, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	490e      	ldr	r1, [pc, #56]	@ (80011f8 <you_lost_it+0x12c>)
 80011be:	480f      	ldr	r0, [pc, #60]	@ (80011fc <you_lost_it+0x130>)
 80011c0:	f7ff fbe6 	bl	8000990 <updateCharValue>
	}
	xyz[0] = x;
 80011c4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	801a      	strh	r2, [r3, #0]
	xyz[1] = y;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3302      	adds	r3, #2
 80011d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80011d4:	801a      	strh	r2, [r3, #0]
	xyz[2] = z;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80011de:	801a      	strh	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	@ 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200003c4 	.word	0x200003c4
 80011ec:	200003cc 	.word	0x200003cc
 80011f0:	200003d0 	.word	0x200003d0
 80011f4:	08004c5c 	.word	0x08004c5c
 80011f8:	2000034c 	.word	0x2000034c
 80011fc:	20000344 	.word	0x20000344

08001200 <TIM2_IRQHandler>:
// Timer to keep track of how long it has been lost and set the blinking
void TIM2_IRQHandler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
	if (TIM2start == 0) {
 8001206:	4b2d      	ldr	r3, [pc, #180]	@ (80012bc <TIM2_IRQHandler+0xbc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10d      	bne.n	800122a <TIM2_IRQHandler+0x2a>
		TIM2start++;
 800120e:	4b2b      	ldr	r3, [pc, #172]	@ (80012bc <TIM2_IRQHandler+0xbc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a29      	ldr	r2, [pc, #164]	@ (80012bc <TIM2_IRQHandler+0xbc>)
 8001216:	6013      	str	r3, [r2, #0]
		TIM2->SR &= ~TIM_SR_UIF;
 8001218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6113      	str	r3, [r2, #16]
		return;
 8001228:	e043      	b.n	80012b2 <TIM2_IRQHandler+0xb2>
	}
	minsLost++;
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <TIM2_IRQHandler+0xc0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3301      	adds	r3, #1
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <TIM2_IRQHandler+0xc0>)
 8001232:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 3; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	e02d      	b.n	8001296 <TIM2_IRQHandler+0x96>
		led1[15-i] = (minsLost & (lowbit << 2*i)) ? 1 : 0;
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <TIM2_IRQHandler+0xc4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <TIM2_IRQHandler+0xc0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	bf14      	ite	ne
 8001252:	2301      	movne	r3, #1
 8001254:	2300      	moveq	r3, #0
 8001256:	b2da      	uxtb	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1c3 030f 	rsb	r3, r3, #15
 800125e:	4611      	mov	r1, r2
 8001260:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <TIM2_IRQHandler+0xc8>)
 8001262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led2[15-i] = (minsLost & (highbit << 2*i)) ? 2 : 0;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <TIM2_IRQHandler+0xcc>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <TIM2_IRQHandler+0xc0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4013      	ands	r3, r2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <TIM2_IRQHandler+0x82>
 800127e:	2202      	movs	r2, #2
 8001280:	e000      	b.n	8001284 <TIM2_IRQHandler+0x84>
 8001282:	2200      	movs	r2, #0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f1c3 030f 	rsb	r3, r3, #15
 800128a:	4911      	ldr	r1, [pc, #68]	@ (80012d0 <TIM2_IRQHandler+0xd0>)
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 3; i++) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	ddce      	ble.n	800123a <TIM2_IRQHandler+0x3a>
	}
	led_interupt = 1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <TIM2_IRQHandler+0xd4>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

	// Reset the interrupt bit
	TIM2->SR &= ~TIM_SR_UIF;
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6113      	str	r3, [r2, #16]
}
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	200003bc 	.word	0x200003bc
 80012c0:	200003cc 	.word	0x200003cc
 80012c4:	200001b1 	.word	0x200001b1
 80012c8:	20000170 	.word	0x20000170
 80012cc:	200001b0 	.word	0x200001b0
 80012d0:	20000130 	.word	0x20000130
 80012d4:	200003c4 	.word	0x200003c4

080012d8 <TIM3_IRQHandler>:

// set the leds blinking pattern
void TIM3_IRQHandler(void) {
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	if (!TIM3start) {
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <TIM3_IRQHandler+0x68>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d109      	bne.n	80012f8 <TIM3_IRQHandler+0x20>
		TIM3start = 1;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <TIM3_IRQHandler+0x68>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <TIM3_IRQHandler+0x6c>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <TIM3_IRQHandler+0x6c>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6113      	str	r3, [r2, #16]
		return;
 80012f6:	e01e      	b.n	8001336 <TIM3_IRQHandler+0x5e>
	}
	lights = led1[on_off] + led2[on_off];
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <TIM3_IRQHandler+0x70>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a13      	ldr	r2, [pc, #76]	@ (800134c <TIM3_IRQHandler+0x74>)
 80012fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <TIM3_IRQHandler+0x70>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4912      	ldr	r1, [pc, #72]	@ (8001350 <TIM3_IRQHandler+0x78>)
 8001308:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130c:	4413      	add	r3, r2
 800130e:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <TIM3_IRQHandler+0x7c>)
 8001310:	6013      	str	r3, [r2, #0]
	on_off = (on_off + 1) % 16;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <TIM3_IRQHandler+0x70>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	425a      	negs	r2, r3
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	f002 020f 	and.w	r2, r2, #15
 8001322:	bf58      	it	pl
 8001324:	4253      	negpl	r3, r2
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <TIM3_IRQHandler+0x70>)
 8001328:	6013      	str	r3, [r2, #0]
	TIM3->SR &= ~TIM_SR_UIF;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <TIM3_IRQHandler+0x6c>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <TIM3_IRQHandler+0x6c>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6113      	str	r3, [r2, #16]
}
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200003c0 	.word	0x200003c0
 8001344:	40000400 	.word	0x40000400
 8001348:	200003c8 	.word	0x200003c8
 800134c:	20000170 	.word	0x20000170
 8001350:	20000130 	.word	0x20000130
 8001354:	200003d0 	.word	0x200003d0

08001358 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	@ 0x58
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2244      	movs	r2, #68	@ 0x44
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fdc0 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800137a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137e:	f000 fefd 	bl	800217c <HAL_PWREx_ControlVoltageScaling>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001388:	f000 f902 	bl	8001590 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800138c:	2310      	movs	r3, #16
 800138e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8001398:	2370      	movs	r3, #112	@ 0x70
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 ff3f 	bl	8002228 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013b0:	f000 f8ee 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fb07 	bl	80029e0 <HAL_RCC_ClockConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013d8:	f000 f8da 	bl	8001590 <Error_Handler>
  }
}
 80013dc:	bf00      	nop
 80013de:	3758      	adds	r7, #88	@ 0x58
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013ea:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <MX_SPI3_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013fc:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <MX_SPI3_Init+0x74>)
 80013fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001402:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <MX_SPI3_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001416:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_SPI3_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_SPI3_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001432:	2207      	movs	r2, #7
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_SPI3_Init+0x74>)
 800143e:	2208      	movs	r2, #8
 8001440:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_SPI3_Init+0x74>)
 8001444:	f001 fcb8 	bl	8002db8 <HAL_SPI_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800144e:	f000 f89f 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000358 	.word	0x20000358
 800145c:	40003c00 	.word	0x40003c00

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b43      	ldr	r3, [pc, #268]	@ (8001584 <MX_GPIO_Init+0x124>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a42      	ldr	r2, [pc, #264]	@ (8001584 <MX_GPIO_Init+0x124>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b40      	ldr	r3, [pc, #256]	@ (8001584 <MX_GPIO_Init+0x124>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <MX_GPIO_Init+0x124>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a3c      	ldr	r2, [pc, #240]	@ (8001584 <MX_GPIO_Init+0x124>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b3a      	ldr	r3, [pc, #232]	@ (8001584 <MX_GPIO_Init+0x124>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b37      	ldr	r3, [pc, #220]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a36      	ldr	r2, [pc, #216]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a30      	ldr	r2, [pc, #192]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014da:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e2:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <MX_GPIO_Init+0x124>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f000 fdf7 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001500:	4821      	ldr	r0, [pc, #132]	@ (8001588 <MX_GPIO_Init+0x128>)
 8001502:	f000 fdf1 	bl	80020e8 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f000 fdea 	bl	80020e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8001514:	2340      	movs	r3, #64	@ 0x40
 8001516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001518:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4818      	ldr	r0, [pc, #96]	@ (800158c <MX_GPIO_Init+0x12c>)
 800152a:	f000 fc1b 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 800152e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f000 fc0b 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 800154e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4808      	ldr	r0, [pc, #32]	@ (8001588 <MX_GPIO_Init+0x128>)
 8001568:	f000 fbfc 	bl	8001d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2017      	movs	r0, #23
 8001572:	f000 fbc0 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001576:	2017      	movs	r0, #23
 8001578:	f000 fbd9 	bl	8001d2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	@ 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000
 8001588:	48000c00 	.word	0x48000c00
 800158c:	48001000 	.word	0x48001000

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <Error_Handler+0x8>

0800159c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x44>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_MspInit+0x44>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_SPI_MspInit+0x7c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d128      	bne.n	8001658 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	4a16      	ldr	r2, [pc, #88]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 800160c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001610:	6593      	str	r3, [r2, #88]	@ 0x58
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	4a10      	ldr	r2, [pc, #64]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_SPI_MspInit+0x80>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001636:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001648:	2306      	movs	r3, #6
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <HAL_SPI_MspInit+0x84>)
 8001654:	f000 fb86 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40003c00 	.word	0x40003c00
 8001664:	40021000 	.word	0x40021000
 8001668:	48000800 	.word	0x48000800

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <NMI_Handler+0x4>

08001674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <MemManage_Handler+0x4>

08001684 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <UsageFault_Handler+0x4>

08001694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c2:	f000 f9f9 	bl	8001ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <EXTI9_5_IRQHandler+0x14>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80016d6:	2040      	movs	r0, #64	@ 0x40
 80016d8:	f000 fd1e 	bl	8002118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000354 	.word	0x20000354

080016e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e00a      	b.n	800170c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016f6:	f3af 8000 	nop.w
 80016fa:	4601      	mov	r1, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	b2ca      	uxtb	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf0      	blt.n	80016f6 <_read+0x12>
	}

return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <_sbrk+0x50>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x16>
		heap_end = &end;
 8001730:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <_sbrk+0x50>)
 8001732:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <_sbrk+0x54>)
 8001734:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <_sbrk+0x50>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800173c:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <_sbrk+0x50>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	466a      	mov	r2, sp
 8001746:	4293      	cmp	r3, r2
 8001748:	d907      	bls.n	800175a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800174a:	f002 fc2d 	bl	8003fa8 <__errno>
 800174e:	4603      	mov	r3, r0
 8001750:	220c      	movs	r2, #12
 8001752:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	e006      	b.n	8001768 <_sbrk+0x48>
	}

	heap_end += incr;
 800175a:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <_sbrk+0x50>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a03      	ldr	r2, [pc, #12]	@ (8001770 <_sbrk+0x50>)
 8001764:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200003d4 	.word	0x200003d4
 8001774:	20000528 	.word	0x20000528

08001778 <_close>:

int _close(int file)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a0:	605a      	str	r2, [r3, #4]
	return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_isatty>:

int _isatty(int file)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	return 1;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b085      	sub	sp, #20
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
	return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <SystemInit+0x64>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ea:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <SystemInit+0x64>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <SystemInit+0x68>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <SystemInit+0x68>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <SystemInit+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <SystemInit+0x68>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <SystemInit+0x68>)
 800180c:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001810:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001814:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <SystemInit+0x68>)
 8001818:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800181c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <SystemInit+0x68>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <SystemInit+0x68>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001828:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <SystemInit+0x68>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SystemInit+0x64>)
 8001832:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001836:	609a      	str	r2, [r3, #8]
#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	40021000 	.word	0x40021000

0800184c <__NVIC_EnableIRQ>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	// Give power to the timer
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80018e4:	4b21      	ldr	r3, [pc, #132]	@ (800196c <timer_init+0x90>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	4a20      	ldr	r2, [pc, #128]	@ (800196c <timer_init+0x90>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 80018f0:	4b1e      	ldr	r3, [pc, #120]	@ (800196c <timer_init+0x90>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <timer_init+0x90>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6593      	str	r3, [r2, #88]	@ 0x58

	// Enable interrupts
	NVIC_EnableIRQ(TIM2_IRQn);
 80018fc:	201c      	movs	r0, #28
 80018fe:	f7ff ffa5 	bl	800184c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8001902:	2101      	movs	r1, #1
 8001904:	201c      	movs	r0, #28
 8001906:	f7ff ffbf 	bl	8001888 <__NVIC_SetPriority>

	NVIC_EnableIRQ(TIM3_IRQn);
 800190a:	201d      	movs	r0, #29
 800190c:	f7ff ff9e 	bl	800184c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);
 8001910:	2101      	movs	r1, #1
 8001912:	201d      	movs	r0, #29
 8001914:	f7ff ffb8 	bl	8001888 <__NVIC_SetPriority>

	// Reset the timer
	timer->CNT &= 0;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

	// Stop the timer
	timer->CR1 &= (~TIM_CR1_CEN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0201 	bic.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]

	// Reset the timer
	timer->CNT &= 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24

	// Set the prescalar to 3999 since 1/(3999+1) = 4000 for 1 ms
	timer->PSC = 3999;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800193e:	629a      	str	r2, [r3, #40]	@ 0x28

	// reset the status of the timer
	timer->SR &= ~TIM_SR_UIF;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f023 0201 	bic.w	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]


	// Enable interrupts on timer
	timer->DIER |= TIM_DIER_UIE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	60da      	str	r2, [r3, #12]

	// Turn on the timer again
	timer->CR1 |= TIM_CR1_CEN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	601a      	str	r2, [r3, #0]

}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000

08001970 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	// Set the counter in the timer back to 0
	timer->CNT &= 0;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	807b      	strh	r3, [r7, #2]
	timer->CNT &= 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24
  	// Set the reload time of the timer
	timer->ARR = period_ms - 1;
 80019a4:	887b      	ldrh	r3, [r7, #2]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff ff0e 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopForever+0xe>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopForever+0x16>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 fae3 	bl	8003fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ee:	f7ff fb19 	bl	8001024 <main>

080019f2 <LoopForever>:

LoopForever:
    b LoopForever
 80019f2:	e7fe      	b.n	80019f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001a00:	08004cf8 	.word	0x08004cf8
  ldr r2, =_sbss
 8001a04:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001a08:	20000528 	.word	0x20000528

08001a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC1_2_IRQHandler>

08001a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f961 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f80e 	bl	8001a40 <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	e001      	b.n	8001a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a30:	f7ff fdb4 	bl	800159c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a4c:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <HAL_InitTick+0x70>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_InitTick+0x6c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f96d 	bl	8001d4a <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d809      	bhi.n	8001a90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f000 f937 	bl	8001cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_InitTick+0x74>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e007      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e004      	b.n	8001aa0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	73fb      	strb	r3, [r7, #15]
 8001a9a:	e001      	b.n	8001aa0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001bc 	.word	0x200001bc
 8001ab0:	200001b4 	.word	0x200001b4
 8001ab4:	200001b8 	.word	0x200001b8

08001ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x20>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x24>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <HAL_IncTick+0x24>)
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001bc 	.word	0x200001bc
 8001adc:	200003d8 	.word	0x200003d8

08001ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_GetTick+0x14>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200003d8 	.word	0x200003d8

08001af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff ffee 	bl	8001ae0 <HAL_GetTick>
 8001b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d005      	beq.n	8001b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b12:	4b0a      	ldr	r3, [pc, #40]	@ (8001b3c <HAL_Delay+0x44>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	461a      	mov	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	bf00      	nop
 8001b20:	f7ff ffde 	bl	8001ae0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d8f7      	bhi.n	8001b20 <HAL_Delay+0x28>
  {
  }
}
 8001b30:	bf00      	nop
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001bc 	.word	0x200001bc

08001b40 <__NVIC_SetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b72:	4a04      	ldr	r2, [pc, #16]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	60d3      	str	r3, [r2, #12]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_GetPriorityGrouping>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff3e 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff8e 	bl	8001c34 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5d 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff31 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa2 	bl	8001c9c <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e17f      	b.n	8002074 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8171 	beq.w	800206e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d005      	beq.n	8001da4 <HAL_GPIO_Init+0x40>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	f003 0201 	and.w	r2, r3, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d118      	bne.n	8001e44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e18:	2201      	movs	r2, #1
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	f003 0201 	and.w	r2, r3, #1
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d017      	beq.n	8001e80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d123      	bne.n	8001ed4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	6939      	ldr	r1, [r7, #16]
 8001ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2203      	movs	r2, #3
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0203 	and.w	r2, r3, #3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80ac 	beq.w	800206e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	4b5f      	ldr	r3, [pc, #380]	@ (8002094 <HAL_GPIO_Init+0x330>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002094 <HAL_GPIO_Init+0x330>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f22:	4b5c      	ldr	r3, [pc, #368]	@ (8002094 <HAL_GPIO_Init+0x330>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f2e:	4a5a      	ldr	r2, [pc, #360]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f58:	d025      	beq.n	8001fa6 <HAL_GPIO_Init+0x242>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a4f      	ldr	r2, [pc, #316]	@ (800209c <HAL_GPIO_Init+0x338>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d01f      	beq.n	8001fa2 <HAL_GPIO_Init+0x23e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	@ (80020a0 <HAL_GPIO_Init+0x33c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x23a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4d      	ldr	r2, [pc, #308]	@ (80020a4 <HAL_GPIO_Init+0x340>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x236>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	@ (80020a8 <HAL_GPIO_Init+0x344>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x232>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	@ (80020ac <HAL_GPIO_Init+0x348>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x22e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	@ (80020b0 <HAL_GPIO_Init+0x34c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x22a>
 8001f8a:	2306      	movs	r3, #6
 8001f8c:	e00c      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e00a      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001f92:	2305      	movs	r3, #5
 8001f94:	e008      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001f96:	2304      	movs	r3, #4
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e004      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e002      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x244>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	f002 0203 	and.w	r2, r2, #3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fb8:	4937      	ldr	r1, [pc, #220]	@ (8002098 <HAL_GPIO_Init+0x334>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fea:	4a32      	ldr	r2, [pc, #200]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff0:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002014:	4a27      	ldr	r2, [pc, #156]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800201a:	4b26      	ldr	r3, [pc, #152]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800203e:	4a1d      	ldr	r2, [pc, #116]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002068:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <HAL_GPIO_Init+0x350>)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f ae78 	bne.w	8001d74 <HAL_GPIO_Init+0x10>
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00
 80020a8:	48001000 	.word	0x48001000
 80020ac:	48001400 	.word	0x48001400
 80020b0:	48001800 	.word	0x48001800
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f8:	787b      	ldrb	r3, [r7, #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002104:	e002      	b.n	800210c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002122:	4b08      	ldr	r3, [pc, #32]	@ (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f806 	bl	8002148 <HAL_GPIO_EXTI_Callback>
  }
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002164:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <HAL_PWREx_GetVoltageRange+0x18>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218a:	d130      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800218c:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d038      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2232      	movs	r2, #50	@ 0x32
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021b6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
 80021bc:	3301      	adds	r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c0:	e002      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d4:	d102      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f2      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e8:	d110      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e00f      	b.n	800220e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ee:	4b0b      	ldr	r3, [pc, #44]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d007      	beq.n	800220c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021fc:	4b07      	ldr	r3, [pc, #28]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40007000 	.word	0x40007000
 8002220:	200001b4 	.word	0x200001b4
 8002224:	431bde83 	.word	0x431bde83

08002228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e3ca      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b97      	ldr	r3, [pc, #604]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	4b94      	ldr	r3, [pc, #592]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80e4 	beq.w	8002424 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_RCC_OscConfig+0x4a>
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	f040 808b 	bne.w	8002380 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b01      	cmp	r3, #1
 800226e:	f040 8087 	bne.w	8002380 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002272:	4b89      	ldr	r3, [pc, #548]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x62>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e3a2      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	4b82      	ldr	r3, [pc, #520]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_RCC_OscConfig+0x7c>
 800229a:	4b7f      	ldr	r3, [pc, #508]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a2:	e005      	b.n	80022b0 <HAL_RCC_OscConfig+0x88>
 80022a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d223      	bcs.n	80022fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fd1d 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e383      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c8:	4b73      	ldr	r3, [pc, #460]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a72      	ldr	r2, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b70      	ldr	r3, [pc, #448]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	496d      	ldr	r1, [pc, #436]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4968      	ldr	r1, [pc, #416]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
 80022fa:	e025      	b.n	8002348 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fc:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a65      	ldr	r2, [pc, #404]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002302:	f043 0308 	orr.w	r3, r3, #8
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b63      	ldr	r3, [pc, #396]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4960      	ldr	r1, [pc, #384]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231a:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	495b      	ldr	r1, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fcdd 	bl	8002cf8 <RCC_SetFlashLatencyFromMSIRange>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e343      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002348:	f000 fc4a 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	4950      	ldr	r1, [pc, #320]	@ (800249c <HAL_RCC_OscConfig+0x274>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	4a4e      	ldr	r2, [pc, #312]	@ (80024a0 <HAL_RCC_OscConfig+0x278>)
 8002366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002368:	4b4e      	ldr	r3, [pc, #312]	@ (80024a4 <HAL_RCC_OscConfig+0x27c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fb67 	bl	8001a40 <HAL_InitTick>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d052      	beq.n	8002422 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	e327      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d032      	beq.n	80023ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002388:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002394:	f7ff fba4 	bl	8001ae0 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800239c:	f7ff fba0 	bl	8001ae0 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e310      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ba:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a36      	ldr	r2, [pc, #216]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023c0:	f043 0308 	orr.w	r3, r3, #8
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4931      	ldr	r1, [pc, #196]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	492c      	ldr	r1, [pc, #176]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
 80023ec:	e01a      	b.n	8002424 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a29      	ldr	r2, [pc, #164]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fa:	f7ff fb71 	bl	8001ae0 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002402:	f7ff fb6d 	bl	8001ae0 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e2dd      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002414:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x1da>
 8002420:	e000      	b.n	8002424 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002422:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d074      	beq.n	800251a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x21a>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	d10e      	bne.n	800245a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d10b      	bne.n	800245a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	4b15      	ldr	r3, [pc, #84]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d064      	beq.n	8002518 <HAL_RCC_OscConfig+0x2f0>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d160      	bne.n	8002518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e2ba      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x24a>
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800247a:	d115      	bne.n	80024a8 <HAL_RCC_OscConfig+0x280>
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 8002482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a02      	ldr	r2, [pc, #8]	@ (8002498 <HAL_RCC_OscConfig+0x270>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x298>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	08004c74 	.word	0x08004c74
 80024a0:	200001b4 	.word	0x200001b4
 80024a4:	200001b8 	.word	0x200001b8
 80024a8:	4ba0      	ldr	r3, [pc, #640]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a9f      	ldr	r2, [pc, #636]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4b9d      	ldr	r3, [pc, #628]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a9c      	ldr	r2, [pc, #624]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fb0a 	bl	8001ae0 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7ff fb06 	bl	8001ae0 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e276      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e2:	4b92      	ldr	r3, [pc, #584]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2a8>
 80024ee:	e014      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7ff faf6 	bl	8001ae0 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7ff faf2 	bl	8001ae0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e262      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800250a:	4b88      	ldr	r3, [pc, #544]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d0>
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d060      	beq.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b04      	cmp	r3, #4
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x310>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d119      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d116      	bne.n	8002566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002538:	4b7c      	ldr	r3, [pc, #496]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_OscConfig+0x328>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e23f      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	061b      	lsls	r3, r3, #24
 800255e:	4973      	ldr	r1, [pc, #460]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002564:	e040      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d023      	beq.n	80025b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256e:	4b6f      	ldr	r3, [pc, #444]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a6e      	ldr	r2, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff fab1 	bl	8001ae0 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7ff faad 	bl	8001ae0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e21d      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	4b65      	ldr	r3, [pc, #404]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b62      	ldr	r3, [pc, #392]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	495f      	ldr	r1, [pc, #380]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
 80025b4:	e018      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5c      	ldr	r2, [pc, #368]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7ff fa8d 	bl	8001ae0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ca:	f7ff fa89 	bl	8001ae0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1f9      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	4b53      	ldr	r3, [pc, #332]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d03c      	beq.n	800266e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01c      	beq.n	8002636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80025fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002602:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff fa68 	bl	8001ae0 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fa64 	bl	8001ae0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1d4      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ef      	beq.n	8002614 <HAL_RCC_OscConfig+0x3ec>
 8002634:	e01b      	b.n	800266e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002636:	4b3d      	ldr	r3, [pc, #244]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800263c:	4a3b      	ldr	r2, [pc, #236]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7ff fa4b 	bl	8001ae0 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7ff fa47 	bl	8001ae0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1b7      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ef      	bne.n	800264e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80a6 	beq.w	80027c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10d      	bne.n	80026a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268c:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	4a26      	ldr	r2, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	@ 0x58
 8002698:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800269a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a4:	2301      	movs	r3, #1
 80026a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c0:	f7ff fa0e 	bl	8001ae0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7ff fa0a 	bl	8001ae0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e17a      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCC_OscConfig+0x508>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <HAL_RCC_OscConfig+0x4d8>
 80026ee:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	4a0d      	ldr	r2, [pc, #52]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fe:	e029      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d115      	bne.n	8002734 <HAL_RCC_OscConfig+0x50c>
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_RCC_OscConfig+0x504>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	e014      	b.n	8002754 <HAL_RCC_OscConfig+0x52c>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	4b9c      	ldr	r3, [pc, #624]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273a:	4a9b      	ldr	r2, [pc, #620]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002744:	4b98      	ldr	r3, [pc, #608]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a97      	ldr	r2, [pc, #604]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800274c:	f023 0304 	bic.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d016      	beq.n	800278a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7ff f9c0 	bl	8001ae0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7ff f9bc 	bl	8001ae0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e12a      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277a:	4b8b      	ldr	r3, [pc, #556]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ed      	beq.n	8002764 <HAL_RCC_OscConfig+0x53c>
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7ff f9a9 	bl	8001ae0 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7ff f9a5 	bl	8001ae0 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e113      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027a8:	4b7f      	ldr	r3, [pc, #508]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ed      	bne.n	8002792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b7a      	ldr	r3, [pc, #488]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	4a79      	ldr	r2, [pc, #484]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80fe 	beq.w	80029ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	f040 80d0 	bne.w	800297c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027dc:	4b72      	ldr	r3, [pc, #456]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d130      	bne.n	8002852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	3b01      	subs	r3, #1
 80027fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d127      	bne.n	8002852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d11f      	bne.n	8002852 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800281c:	2a07      	cmp	r2, #7
 800281e:	bf14      	ite	ne
 8002820:	2201      	movne	r2, #1
 8002822:	2200      	moveq	r2, #0
 8002824:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d109      	bne.n	8002852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d06e      	beq.n	8002930 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b0c      	cmp	r3, #12
 8002856:	d069      	beq.n	800292c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002864:	4b50      	ldr	r3, [pc, #320]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0ad      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002874:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a4b      	ldr	r2, [pc, #300]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002880:	f7ff f92e 	bl	8001ae0 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002888:	f7ff f92a 	bl	8001ae0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e09a      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289a:	4b43      	ldr	r3, [pc, #268]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a6:	4b40      	ldr	r3, [pc, #256]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b40      	ldr	r3, [pc, #256]	@ (80029ac <HAL_RCC_OscConfig+0x784>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028b6:	3a01      	subs	r2, #1
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028c0:	0212      	lsls	r2, r2, #8
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0552      	lsls	r2, r2, #21
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0652      	lsls	r2, r2, #25
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028e0:	0912      	lsrs	r2, r2, #4
 80028e2:	0452      	lsls	r2, r2, #17
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4930      	ldr	r1, [pc, #192]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028ec:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002904:	f7ff f8ec 	bl	8001ae0 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7ff f8e8 	bl	8001ae0 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e058      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292a:	e050      	b.n	80029ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e04f      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d148      	bne.n	80029ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002946:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002948:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a16      	ldr	r2, [pc, #88]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002954:	f7ff f8c4 	bl	8001ae0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7ff f8c0 	bl	8001ae0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e030      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x734>
 800297a:	e028      	b.n	80029ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d023      	beq.n	80029ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7ff f8a7 	bl	8001ae0 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	e00c      	b.n	80029b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7ff f8a3 	bl	8001ae0 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d905      	bls.n	80029b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
 80029a8:	40021000 	.word	0x40021000
 80029ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_OscConfig+0x7b0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ec      	bne.n	8002996 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029bc:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <HAL_RCC_OscConfig+0x7b0>)
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	4905      	ldr	r1, [pc, #20]	@ (80029d8 <HAL_RCC_OscConfig+0x7b0>)
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x7b4>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60cb      	str	r3, [r1, #12]
 80029c8:	e001      	b.n	80029ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	feeefffc 	.word	0xfeeefffc

080029e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0e7      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b75      	ldr	r3, [pc, #468]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b72      	ldr	r3, [pc, #456]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4970      	ldr	r1, [pc, #448]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b6e      	ldr	r3, [pc, #440]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cf      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d010      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b66      	ldr	r3, [pc, #408]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d908      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a40:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4960      	ldr	r1, [pc, #384]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d04c      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0a6      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	4b54      	ldr	r3, [pc, #336]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d115      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e09a      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a96:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e08e      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e086      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ab6:	4b46      	ldr	r3, [pc, #280]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f023 0203 	bic.w	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4943      	ldr	r1, [pc, #268]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac8:	f7ff f80a 	bl	8001ae0 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad0:	f7ff f806 	bl	8001ae0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e06e      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 020c 	and.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d1eb      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d208      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	492b      	ldr	r1, [pc, #172]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b26:	4b29      	ldr	r3, [pc, #164]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d210      	bcs.n	8002b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0207 	bic.w	r2, r3, #7
 8002b3c:	4923      	ldr	r1, [pc, #140]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b44:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <HAL_RCC_ClockConfig+0x1ec>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e036      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b62:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	4918      	ldr	r1, [pc, #96]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b80:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4910      	ldr	r1, [pc, #64]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b94:	f000 f824 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	490b      	ldr	r1, [pc, #44]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	4a09      	ldr	r2, [pc, #36]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <HAL_RCC_ClockConfig+0x1fc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ff41 	bl	8001a40 <HAL_InitTick>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08004c74 	.word	0x08004c74
 8002bd8:	200001b4 	.word	0x200001b4
 8002bdc:	200001b8 	.word	0x200001b8

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c14:	4b34      	ldr	r3, [pc, #208]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c20:	4b31      	ldr	r3, [pc, #196]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c58:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b23      	ldr	r3, [pc, #140]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d134      	bne.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	d003      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0xac>
 8002c84:	e005      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c8e:	617b      	str	r3, [r7, #20]
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	617b      	str	r3, [r7, #20]
      break;
 8002c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	fb03 f202 	mul.w	r2, r3, r2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	0e5b      	lsrs	r3, r3, #25
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3724      	adds	r7, #36	@ 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08004c84 	.word	0x08004c84
 8002cf0:	00f42400 	.word	0x00f42400
 8002cf4:	007a1200 	.word	0x007a1200

08002cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d00:	2300      	movs	r3, #0
 8002d02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d04:	4b2a      	ldr	r3, [pc, #168]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d10:	f7ff fa26 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002d14:	6178      	str	r0, [r7, #20]
 8002d16:	e014      	b.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b25      	ldr	r3, [pc, #148]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	4a24      	ldr	r2, [pc, #144]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d24:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d30:	f7ff fa16 	bl	8002160 <HAL_PWREx_GetVoltageRange>
 8002d34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002db0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d48:	d10b      	bne.n	8002d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b80      	cmp	r3, #128	@ 0x80
 8002d4e:	d919      	bls.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d54:	d902      	bls.n	8002d5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d56:	2302      	movs	r3, #2
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e013      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e010      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b80      	cmp	r3, #128	@ 0x80
 8002d66:	d902      	bls.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d68:	2303      	movs	r3, #3
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	e00a      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b80      	cmp	r3, #128	@ 0x80
 8002d72:	d102      	bne.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d74:	2302      	movs	r3, #2
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	e004      	b.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b70      	cmp	r3, #112	@ 0x70
 8002d7e:	d101      	bne.n	8002d84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d80:	2301      	movs	r3, #1
 8002d82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 0207 	bic.w	r2, r3, #7
 8002d8c:	4909      	ldr	r1, [pc, #36]	@ (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d94:	4b07      	ldr	r3, [pc, #28]	@ (8002db4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d001      	beq.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40022000 	.word	0x40022000

08002db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e095      	b.n	8002ef6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fbea 	bl	80015e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e30:	d902      	bls.n	8002e38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e002      	b.n	8002e3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e46:	d007      	beq.n	8002e58 <HAL_SPI_Init+0xa0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e50:	d002      	beq.n	8002e58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	ea42 0103 	orr.w	r1, r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	0c1b      	lsrs	r3, r3, #16
 8002eb4:	f003 0204 	and.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ed4:	ea42 0103 	orr.w	r1, r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_SPI_Transmit+0x22>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e15f      	b.n	80031e0 <HAL_SPI_Transmit+0x2e2>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f28:	f7fe fdda 	bl	8001ae0 <HAL_GetTick>
 8002f2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d002      	beq.n	8002f44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f42:	e148      	b.n	80031d6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_SPI_Transmit+0x52>
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f54:	e13f      	b.n	80031d6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	d007      	beq.n	8002fe0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fe8:	d94f      	bls.n	800308a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_SPI_Transmit+0xfa>
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d142      	bne.n	800307e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003008:	1c9a      	adds	r2, r3, #2
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800301c:	e02f      	b.n	800307e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b02      	cmp	r3, #2
 800302a:	d112      	bne.n	8003052 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	881a      	ldrh	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	1c9a      	adds	r2, r3, #2
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003050:	e015      	b.n	800307e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003052:	f7fe fd45 	bl	8001ae0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d803      	bhi.n	800306a <HAL_SPI_Transmit+0x16c>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d102      	bne.n	8003070 <HAL_SPI_Transmit+0x172>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800307c:	e0ab      	b.n	80031d6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ca      	bne.n	800301e <HAL_SPI_Transmit+0x120>
 8003088:	e080      	b.n	800318c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_SPI_Transmit+0x19a>
 8003092:	8afb      	ldrh	r3, [r7, #22]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d174      	bne.n	8003182 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d912      	bls.n	80030c8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	1c9a      	adds	r2, r3, #2
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b02      	subs	r3, #2
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030c6:	e05c      	b.n	8003182 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030ee:	e048      	b.n	8003182 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d12b      	bne.n	8003156 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d912      	bls.n	800312e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b02      	subs	r3, #2
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800312c:	e029      	b.n	8003182 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003154:	e015      	b.n	8003182 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003156:	f7fe fcc3 	bl	8001ae0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d803      	bhi.n	800316e <HAL_SPI_Transmit+0x270>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d102      	bne.n	8003174 <HAL_SPI_Transmit+0x276>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003180:	e029      	b.n	80031d6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1b1      	bne.n	80030f0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	6839      	ldr	r1, [r7, #0]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb69 	bl	8003868 <SPI_EndRxTxTransaction>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e003      	b.n	80031d6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031de:	7ffb      	ldrb	r3, [r7, #31]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f6:	2301      	movs	r3, #1
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_SPI_TransmitReceive+0x26>
 800320a:	2302      	movs	r3, #2
 800320c:	e20a      	b.n	8003624 <HAL_SPI_TransmitReceive+0x43c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003216:	f7fe fc63 	bl	8001ae0 <HAL_GetTick>
 800321a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003222:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003232:	7efb      	ldrb	r3, [r7, #27]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d00e      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x6e>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800323e:	d106      	bne.n	800324e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_SPI_TransmitReceive+0x66>
 8003248:	7efb      	ldrb	r3, [r7, #27]
 800324a:	2b04      	cmp	r3, #4
 800324c:	d003      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003254:	e1e0      	b.n	8003618 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x80>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_SPI_TransmitReceive+0x80>
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800326e:	e1d3      	b.n	8003618 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b04      	cmp	r3, #4
 800327a:	d003      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2205      	movs	r2, #5
 8003280:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	887a      	ldrh	r2, [r7, #2]
 80032aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032c6:	d802      	bhi.n	80032ce <HAL_SPI_TransmitReceive+0xe6>
 80032c8:	8a3b      	ldrh	r3, [r7, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d908      	bls.n	80032e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	e007      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d007      	beq.n	800330e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003316:	f240 8081 	bls.w	800341c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x140>
 8003322:	8a7b      	ldrh	r3, [r7, #18]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d16d      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800334c:	e05a      	b.n	8003404 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d11b      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x1ac>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_SPI_TransmitReceive+0x1ac>
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	2b01      	cmp	r3, #1
 800336a:	d113      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	881a      	ldrh	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	1c9a      	adds	r2, r3, #2
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d11c      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x1f4>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	b292      	uxth	r2, r2
 80033ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033d8:	2301      	movs	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033dc:	f7fe fb80 	bl	8001ae0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d80b      	bhi.n	8003404 <HAL_SPI_TransmitReceive+0x21c>
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d007      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003402:	e109      	b.n	8003618 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d19f      	bne.n	800334e <HAL_SPI_TransmitReceive+0x166>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d199      	bne.n	800334e <HAL_SPI_TransmitReceive+0x166>
 800341a:	e0e3      	b.n	80035e4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_SPI_TransmitReceive+0x244>
 8003424:	8a7b      	ldrh	r3, [r7, #18]
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 80cf 	bne.w	80035ca <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d912      	bls.n	800345c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	881a      	ldrh	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b02      	subs	r3, #2
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800345a:	e0b6      	b.n	80035ca <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003482:	e0a2      	b.n	80035ca <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b02      	cmp	r3, #2
 8003490:	d134      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x314>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02f      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x314>
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d12c      	bne.n	80034fc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d912      	bls.n	80034d2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b02      	subs	r3, #2
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034d0:	e012      	b.n	80034f8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d148      	bne.n	800359c <HAL_SPI_TransmitReceive+0x3b4>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003510:	b29b      	uxth	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d042      	beq.n	800359c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d923      	bls.n	800356a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352c:	b292      	uxth	r2, r2
 800352e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b02      	subs	r3, #2
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d81f      	bhi.n	8003598 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	e016      	b.n	8003598 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f103 020c 	add.w	r2, r3, #12
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003598:	2301      	movs	r3, #1
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800359c:	f7fe faa0 	bl	8001ae0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d803      	bhi.n	80035b4 <HAL_SPI_TransmitReceive+0x3cc>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d102      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x3d2>
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80035c8:	e026      	b.n	8003618 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f47f af57 	bne.w	8003484 <HAL_SPI_TransmitReceive+0x29c>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f47f af50 	bne.w	8003484 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f93d 	bl	8003868 <SPI_EndRxTxTransaction>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e003      	b.n	8003618 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003620:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	@ 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800363c:	f7fe fa50 	bl	8001ae0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	4413      	add	r3, r2
 800364a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800364c:	f7fe fa48 	bl	8001ae0 <HAL_GetTick>
 8003650:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	015b      	lsls	r3, r3, #5
 8003658:	0d1b      	lsrs	r3, r3, #20
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	fb02 f303 	mul.w	r3, r2, r3
 8003660:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003662:	e054      	b.n	800370e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366a:	d050      	beq.n	800370e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800366c:	f7fe fa38 	bl	8001ae0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	429a      	cmp	r2, r3
 800367a:	d902      	bls.n	8003682 <SPI_WaitFlagStateUntilTimeout+0x56>
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d13d      	bne.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003690:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369a:	d111      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a4:	d004      	beq.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ae:	d107      	bne.n	80036c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036c8:	d10f      	bne.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e017      	b.n	800372e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	3b01      	subs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d19b      	bne.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200001b4 	.word	0x200001b4

0800373c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08a      	sub	sp, #40	@ 0x28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800374e:	f7fe f9c7 	bl	8001ae0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4413      	add	r3, r2
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800375e:	f7fe f9bf 	bl	8001ae0 <HAL_GetTick>
 8003762:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800376c:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00da      	lsls	r2, r3, #3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	0d1b      	lsrs	r3, r3, #20
 800377c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003784:	e060      	b.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800378c:	d107      	bne.n	800379e <SPI_WaitFifoStateUntilTimeout+0x62>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800379c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d050      	beq.n	8003848 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a6:	f7fe f99b 	bl	8001ae0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d902      	bls.n	80037bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d13d      	bne.n	8003838 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d4:	d111      	bne.n	80037fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037de:	d004      	beq.n	80037ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e8:	d107      	bne.n	80037fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003802:	d10f      	bne.n	8003824 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003822:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e010      	b.n	800385a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	3b01      	subs	r3, #1
 8003846:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4013      	ands	r3, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d196      	bne.n	8003786 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3728      	adds	r7, #40	@ 0x28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001b4 	.word	0x200001b4

08003868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff ff5b 	bl	800373c <SPI_WaitFifoStateUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e027      	b.n	80038ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	2180      	movs	r1, #128	@ 0x80
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f7ff fec0 	bl	800362c <SPI_WaitFlagStateUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e014      	b.n	80038ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ff34 	bl	800373c <SPI_WaitFifoStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e000      	b.n	80038ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <malloc>:
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <malloc+0xc>)
 80038f6:	4601      	mov	r1, r0
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	f000 b82d 	b.w	8003958 <_malloc_r>
 80038fe:	bf00      	nop
 8003900:	200001cc 	.word	0x200001cc

08003904 <free>:
 8003904:	4b02      	ldr	r3, [pc, #8]	@ (8003910 <free+0xc>)
 8003906:	4601      	mov	r1, r0
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	f000 bb89 	b.w	8004020 <_free_r>
 800390e:	bf00      	nop
 8003910:	200001cc 	.word	0x200001cc

08003914 <sbrk_aligned>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4e0f      	ldr	r6, [pc, #60]	@ (8003954 <sbrk_aligned+0x40>)
 8003918:	460c      	mov	r4, r1
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	b911      	cbnz	r1, 8003926 <sbrk_aligned+0x12>
 8003920:	f000 fb20 	bl	8003f64 <_sbrk_r>
 8003924:	6030      	str	r0, [r6, #0]
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 fb1b 	bl	8003f64 <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d103      	bne.n	800393a <sbrk_aligned+0x26>
 8003932:	f04f 34ff 	mov.w	r4, #4294967295
 8003936:	4620      	mov	r0, r4
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0f8      	beq.n	8003936 <sbrk_aligned+0x22>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fb0c 	bl	8003f64 <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1f2      	bne.n	8003936 <sbrk_aligned+0x22>
 8003950:	e7ef      	b.n	8003932 <sbrk_aligned+0x1e>
 8003952:	bf00      	nop
 8003954:	200003dc 	.word	0x200003dc

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4606      	mov	r6, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d904      	bls.n	800397e <_malloc_r+0x26>
 8003974:	230c      	movs	r3, #12
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	2000      	movs	r0, #0
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a54 <_malloc_r+0xfc>
 8003982:	f000 f869 	bl	8003a58 <__malloc_lock>
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	461c      	mov	r4, r3
 800398c:	bb44      	cbnz	r4, 80039e0 <_malloc_r+0x88>
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffbf 	bl	8003914 <sbrk_aligned>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	4604      	mov	r4, r0
 800399a:	d158      	bne.n	8003a4e <_malloc_r+0xf6>
 800399c:	f8d8 4000 	ldr.w	r4, [r8]
 80039a0:	4627      	mov	r7, r4
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d143      	bne.n	8003a2e <_malloc_r+0xd6>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d04b      	beq.n	8003a42 <_malloc_r+0xea>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	eb04 0903 	add.w	r9, r4, r3
 80039b4:	f000 fad6 	bl	8003f64 <_sbrk_r>
 80039b8:	4581      	cmp	r9, r0
 80039ba:	d142      	bne.n	8003a42 <_malloc_r+0xea>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	1a6d      	subs	r5, r5, r1
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffa6 	bl	8003914 <sbrk_aligned>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d03a      	beq.n	8003a42 <_malloc_r+0xea>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	442b      	add	r3, r5
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	bb62      	cbnz	r2, 8003a34 <_malloc_r+0xdc>
 80039da:	f8c8 7000 	str.w	r7, [r8]
 80039de:	e00f      	b.n	8003a00 <_malloc_r+0xa8>
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	d420      	bmi.n	8003a28 <_malloc_r+0xd0>
 80039e6:	2a0b      	cmp	r2, #11
 80039e8:	d917      	bls.n	8003a1a <_malloc_r+0xc2>
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6059      	strne	r1, [r3, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	bf08      	it	eq
 80039f8:	f8c8 1000 	streq.w	r1, [r8]
 80039fc:	5162      	str	r2, [r4, r5]
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f82f 	bl	8003a64 <__malloc_unlock>
 8003a06:	f104 000b 	add.w	r0, r4, #11
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	f020 0007 	bic.w	r0, r0, #7
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	bf1c      	itt	ne
 8003a14:	1a1b      	subne	r3, r3, r0
 8003a16:	50a3      	strne	r3, [r4, r2]
 8003a18:	e7af      	b.n	800397a <_malloc_r+0x22>
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bf0c      	ite	eq
 8003a20:	f8c8 2000 	streq.w	r2, [r8]
 8003a24:	605a      	strne	r2, [r3, #4]
 8003a26:	e7eb      	b.n	8003a00 <_malloc_r+0xa8>
 8003a28:	4623      	mov	r3, r4
 8003a2a:	6864      	ldr	r4, [r4, #4]
 8003a2c:	e7ae      	b.n	800398c <_malloc_r+0x34>
 8003a2e:	463c      	mov	r4, r7
 8003a30:	687f      	ldr	r7, [r7, #4]
 8003a32:	e7b6      	b.n	80039a2 <_malloc_r+0x4a>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d1fb      	bne.n	8003a34 <_malloc_r+0xdc>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e7de      	b.n	8003a00 <_malloc_r+0xa8>
 8003a42:	230c      	movs	r3, #12
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 f80c 	bl	8003a64 <__malloc_unlock>
 8003a4c:	e794      	b.n	8003978 <_malloc_r+0x20>
 8003a4e:	6005      	str	r5, [r0, #0]
 8003a50:	e7d6      	b.n	8003a00 <_malloc_r+0xa8>
 8003a52:	bf00      	nop
 8003a54:	200003e0 	.word	0x200003e0

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f000 bad0 	b.w	8003ffe <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	20000524 	.word	0x20000524

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f000 bacb 	b.w	8004000 <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	20000524 	.word	0x20000524

08003a70 <std>:
 8003a70:	2300      	movs	r3, #0
 8003a72:	b510      	push	{r4, lr}
 8003a74:	4604      	mov	r4, r0
 8003a76:	e9c0 3300 	strd	r3, r3, [r0]
 8003a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a7e:	6083      	str	r3, [r0, #8]
 8003a80:	8181      	strh	r1, [r0, #12]
 8003a82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a84:	81c2      	strh	r2, [r0, #14]
 8003a86:	6183      	str	r3, [r0, #24]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	305c      	adds	r0, #92	@ 0x5c
 8003a8e:	f000 fa2d 	bl	8003eec <memset>
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <std+0x58>)
 8003a94:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <std+0x5c>)
 8003a98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <std+0x60>)
 8003a9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <std+0x64>)
 8003aa0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <std+0x68>)
 8003aa4:	6224      	str	r4, [r4, #32]
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d006      	beq.n	8003ab8 <std+0x48>
 8003aaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003aae:	4294      	cmp	r4, r2
 8003ab0:	d002      	beq.n	8003ab8 <std+0x48>
 8003ab2:	33d0      	adds	r3, #208	@ 0xd0
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d105      	bne.n	8003ac4 <std+0x54>
 8003ab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f000 ba9c 	b.w	8003ffc <__retarget_lock_init_recursive>
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08003d3d 	.word	0x08003d3d
 8003acc:	08003d5f 	.word	0x08003d5f
 8003ad0:	08003d97 	.word	0x08003d97
 8003ad4:	08003dbb 	.word	0x08003dbb
 8003ad8:	200003e4 	.word	0x200003e4

08003adc <stdio_exit_handler>:
 8003adc:	4a02      	ldr	r2, [pc, #8]	@ (8003ae8 <stdio_exit_handler+0xc>)
 8003ade:	4903      	ldr	r1, [pc, #12]	@ (8003aec <stdio_exit_handler+0x10>)
 8003ae0:	4803      	ldr	r0, [pc, #12]	@ (8003af0 <stdio_exit_handler+0x14>)
 8003ae2:	f000 b869 	b.w	8003bb8 <_fwalk_sglue>
 8003ae6:	bf00      	nop
 8003ae8:	200001c0 	.word	0x200001c0
 8003aec:	08004a0d 	.word	0x08004a0d
 8003af0:	200001d0 	.word	0x200001d0

08003af4 <cleanup_stdio>:
 8003af4:	6841      	ldr	r1, [r0, #4]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <cleanup_stdio+0x34>)
 8003af8:	4299      	cmp	r1, r3
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
 8003afe:	d001      	beq.n	8003b04 <cleanup_stdio+0x10>
 8003b00:	f000 ff84 	bl	8004a0c <_fflush_r>
 8003b04:	68a1      	ldr	r1, [r4, #8]
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <cleanup_stdio+0x38>)
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	d002      	beq.n	8003b12 <cleanup_stdio+0x1e>
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f000 ff7d 	bl	8004a0c <_fflush_r>
 8003b12:	68e1      	ldr	r1, [r4, #12]
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <cleanup_stdio+0x3c>)
 8003b16:	4299      	cmp	r1, r3
 8003b18:	d004      	beq.n	8003b24 <cleanup_stdio+0x30>
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b20:	f000 bf74 	b.w	8004a0c <_fflush_r>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	200003e4 	.word	0x200003e4
 8003b2c:	2000044c 	.word	0x2000044c
 8003b30:	200004b4 	.word	0x200004b4

08003b34 <global_stdio_init.part.0>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <global_stdio_init.part.0+0x30>)
 8003b38:	4c0b      	ldr	r4, [pc, #44]	@ (8003b68 <global_stdio_init.part.0+0x34>)
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <global_stdio_init.part.0+0x38>)
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	2200      	movs	r2, #0
 8003b42:	2104      	movs	r1, #4
 8003b44:	f7ff ff94 	bl	8003a70 <std>
 8003b48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2109      	movs	r1, #9
 8003b50:	f7ff ff8e 	bl	8003a70 <std>
 8003b54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b58:	2202      	movs	r2, #2
 8003b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b5e:	2112      	movs	r1, #18
 8003b60:	f7ff bf86 	b.w	8003a70 <std>
 8003b64:	2000051c 	.word	0x2000051c
 8003b68:	200003e4 	.word	0x200003e4
 8003b6c:	08003add 	.word	0x08003add

08003b70 <__sfp_lock_acquire>:
 8003b70:	4801      	ldr	r0, [pc, #4]	@ (8003b78 <__sfp_lock_acquire+0x8>)
 8003b72:	f000 ba44 	b.w	8003ffe <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000525 	.word	0x20000525

08003b7c <__sfp_lock_release>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	@ (8003b84 <__sfp_lock_release+0x8>)
 8003b7e:	f000 ba3f 	b.w	8004000 <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	20000525 	.word	0x20000525

08003b88 <__sinit>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	f7ff fff0 	bl	8003b70 <__sfp_lock_acquire>
 8003b90:	6a23      	ldr	r3, [r4, #32]
 8003b92:	b11b      	cbz	r3, 8003b9c <__sinit+0x14>
 8003b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b98:	f7ff bff0 	b.w	8003b7c <__sfp_lock_release>
 8003b9c:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <__sinit+0x28>)
 8003b9e:	6223      	str	r3, [r4, #32]
 8003ba0:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <__sinit+0x2c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f5      	bne.n	8003b94 <__sinit+0xc>
 8003ba8:	f7ff ffc4 	bl	8003b34 <global_stdio_init.part.0>
 8003bac:	e7f2      	b.n	8003b94 <__sinit+0xc>
 8003bae:	bf00      	nop
 8003bb0:	08003af5 	.word	0x08003af5
 8003bb4:	2000051c 	.word	0x2000051c

08003bb8 <_fwalk_sglue>:
 8003bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	4688      	mov	r8, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bcc:	d505      	bpl.n	8003bda <_fwalk_sglue+0x22>
 8003bce:	6824      	ldr	r4, [r4, #0]
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	d1f7      	bne.n	8003bc4 <_fwalk_sglue+0xc>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d907      	bls.n	8003bf0 <_fwalk_sglue+0x38>
 8003be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003be4:	3301      	adds	r3, #1
 8003be6:	d003      	beq.n	8003bf0 <_fwalk_sglue+0x38>
 8003be8:	4629      	mov	r1, r5
 8003bea:	4638      	mov	r0, r7
 8003bec:	47c0      	blx	r8
 8003bee:	4306      	orrs	r6, r0
 8003bf0:	3568      	adds	r5, #104	@ 0x68
 8003bf2:	e7e9      	b.n	8003bc8 <_fwalk_sglue+0x10>

08003bf4 <iprintf>:
 8003bf4:	b40f      	push	{r0, r1, r2, r3}
 8003bf6:	b507      	push	{r0, r1, r2, lr}
 8003bf8:	4906      	ldr	r1, [pc, #24]	@ (8003c14 <iprintf+0x20>)
 8003bfa:	ab04      	add	r3, sp, #16
 8003bfc:	6808      	ldr	r0, [r1, #0]
 8003bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c02:	6881      	ldr	r1, [r0, #8]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	f000 fbd7 	bl	80043b8 <_vfiprintf_r>
 8003c0a:	b003      	add	sp, #12
 8003c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c10:	b004      	add	sp, #16
 8003c12:	4770      	bx	lr
 8003c14:	200001cc 	.word	0x200001cc

08003c18 <_puts_r>:
 8003c18:	6a03      	ldr	r3, [r0, #32]
 8003c1a:	b570      	push	{r4, r5, r6, lr}
 8003c1c:	6884      	ldr	r4, [r0, #8]
 8003c1e:	4605      	mov	r5, r0
 8003c20:	460e      	mov	r6, r1
 8003c22:	b90b      	cbnz	r3, 8003c28 <_puts_r+0x10>
 8003c24:	f7ff ffb0 	bl	8003b88 <__sinit>
 8003c28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c2a:	07db      	lsls	r3, r3, #31
 8003c2c:	d405      	bmi.n	8003c3a <_puts_r+0x22>
 8003c2e:	89a3      	ldrh	r3, [r4, #12]
 8003c30:	0598      	lsls	r0, r3, #22
 8003c32:	d402      	bmi.n	8003c3a <_puts_r+0x22>
 8003c34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c36:	f000 f9e2 	bl	8003ffe <__retarget_lock_acquire_recursive>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0719      	lsls	r1, r3, #28
 8003c3e:	d502      	bpl.n	8003c46 <_puts_r+0x2e>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d135      	bne.n	8003cb2 <_puts_r+0x9a>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f000 f8f9 	bl	8003e40 <__swsetup_r>
 8003c4e:	b380      	cbz	r0, 8003cb2 <_puts_r+0x9a>
 8003c50:	f04f 35ff 	mov.w	r5, #4294967295
 8003c54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c56:	07da      	lsls	r2, r3, #31
 8003c58:	d405      	bmi.n	8003c66 <_puts_r+0x4e>
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	059b      	lsls	r3, r3, #22
 8003c5e:	d402      	bmi.n	8003c66 <_puts_r+0x4e>
 8003c60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c62:	f000 f9cd 	bl	8004000 <__retarget_lock_release_recursive>
 8003c66:	4628      	mov	r0, r5
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da04      	bge.n	8003c78 <_puts_r+0x60>
 8003c6e:	69a2      	ldr	r2, [r4, #24]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	dc17      	bgt.n	8003ca4 <_puts_r+0x8c>
 8003c74:	290a      	cmp	r1, #10
 8003c76:	d015      	beq.n	8003ca4 <_puts_r+0x8c>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	6022      	str	r2, [r4, #0]
 8003c7e:	7019      	strb	r1, [r3, #0]
 8003c80:	68a3      	ldr	r3, [r4, #8]
 8003c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60a3      	str	r3, [r4, #8]
 8003c8a:	2900      	cmp	r1, #0
 8003c8c:	d1ed      	bne.n	8003c6a <_puts_r+0x52>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da11      	bge.n	8003cb6 <_puts_r+0x9e>
 8003c92:	4622      	mov	r2, r4
 8003c94:	210a      	movs	r1, #10
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f893 	bl	8003dc2 <__swbuf_r>
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d0d7      	beq.n	8003c50 <_puts_r+0x38>
 8003ca0:	250a      	movs	r5, #10
 8003ca2:	e7d7      	b.n	8003c54 <_puts_r+0x3c>
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f000 f88b 	bl	8003dc2 <__swbuf_r>
 8003cac:	3001      	adds	r0, #1
 8003cae:	d1e7      	bne.n	8003c80 <_puts_r+0x68>
 8003cb0:	e7ce      	b.n	8003c50 <_puts_r+0x38>
 8003cb2:	3e01      	subs	r6, #1
 8003cb4:	e7e4      	b.n	8003c80 <_puts_r+0x68>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	6022      	str	r2, [r4, #0]
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e7ee      	b.n	8003ca0 <_puts_r+0x88>
	...

08003cc4 <puts>:
 8003cc4:	4b02      	ldr	r3, [pc, #8]	@ (8003cd0 <puts+0xc>)
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	f7ff bfa5 	b.w	8003c18 <_puts_r>
 8003cce:	bf00      	nop
 8003cd0:	200001cc 	.word	0x200001cc

08003cd4 <sniprintf>:
 8003cd4:	b40c      	push	{r2, r3}
 8003cd6:	b530      	push	{r4, r5, lr}
 8003cd8:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <sniprintf+0x64>)
 8003cda:	1e0c      	subs	r4, r1, #0
 8003cdc:	681d      	ldr	r5, [r3, #0]
 8003cde:	b09d      	sub	sp, #116	@ 0x74
 8003ce0:	da08      	bge.n	8003cf4 <sniprintf+0x20>
 8003ce2:	238b      	movs	r3, #139	@ 0x8b
 8003ce4:	602b      	str	r3, [r5, #0]
 8003ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cea:	b01d      	add	sp, #116	@ 0x74
 8003cec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cf0:	b002      	add	sp, #8
 8003cf2:	4770      	bx	lr
 8003cf4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003cfc:	bf14      	ite	ne
 8003cfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003d02:	4623      	moveq	r3, r4
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	9307      	str	r3, [sp, #28]
 8003d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d0c:	9002      	str	r0, [sp, #8]
 8003d0e:	9006      	str	r0, [sp, #24]
 8003d10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003d16:	ab21      	add	r3, sp, #132	@ 0x84
 8003d18:	a902      	add	r1, sp, #8
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	f000 fa25 	bl	800416c <_svfiprintf_r>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	bfbc      	itt	lt
 8003d26:	238b      	movlt	r3, #139	@ 0x8b
 8003d28:	602b      	strlt	r3, [r5, #0]
 8003d2a:	2c00      	cmp	r4, #0
 8003d2c:	d0dd      	beq.n	8003cea <sniprintf+0x16>
 8003d2e:	9b02      	ldr	r3, [sp, #8]
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e7d9      	b.n	8003cea <sniprintf+0x16>
 8003d36:	bf00      	nop
 8003d38:	200001cc 	.word	0x200001cc

08003d3c <__sread>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	460c      	mov	r4, r1
 8003d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d44:	f000 f8fc 	bl	8003f40 <_read_r>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	bfab      	itete	ge
 8003d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d50:	181b      	addge	r3, r3, r0
 8003d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d56:	bfac      	ite	ge
 8003d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003d5a:	81a3      	strhlt	r3, [r4, #12]
 8003d5c:	bd10      	pop	{r4, pc}

08003d5e <__swrite>:
 8003d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d62:	461f      	mov	r7, r3
 8003d64:	898b      	ldrh	r3, [r1, #12]
 8003d66:	05db      	lsls	r3, r3, #23
 8003d68:	4605      	mov	r5, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	4616      	mov	r6, r2
 8003d6e:	d505      	bpl.n	8003d7c <__swrite+0x1e>
 8003d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d74:	2302      	movs	r3, #2
 8003d76:	2200      	movs	r2, #0
 8003d78:	f000 f8d0 	bl	8003f1c <_lseek_r>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	4632      	mov	r2, r6
 8003d8a:	463b      	mov	r3, r7
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d92:	f000 b8f7 	b.w	8003f84 <_write_r>

08003d96 <__sseek>:
 8003d96:	b510      	push	{r4, lr}
 8003d98:	460c      	mov	r4, r1
 8003d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9e:	f000 f8bd 	bl	8003f1c <_lseek_r>
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	bf15      	itete	ne
 8003da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003db2:	81a3      	strheq	r3, [r4, #12]
 8003db4:	bf18      	it	ne
 8003db6:	81a3      	strhne	r3, [r4, #12]
 8003db8:	bd10      	pop	{r4, pc}

08003dba <__sclose>:
 8003dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbe:	f000 b89d 	b.w	8003efc <_close_r>

08003dc2 <__swbuf_r>:
 8003dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc4:	460e      	mov	r6, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	4605      	mov	r5, r0
 8003dca:	b118      	cbz	r0, 8003dd4 <__swbuf_r+0x12>
 8003dcc:	6a03      	ldr	r3, [r0, #32]
 8003dce:	b90b      	cbnz	r3, 8003dd4 <__swbuf_r+0x12>
 8003dd0:	f7ff feda 	bl	8003b88 <__sinit>
 8003dd4:	69a3      	ldr	r3, [r4, #24]
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	071a      	lsls	r2, r3, #28
 8003ddc:	d501      	bpl.n	8003de2 <__swbuf_r+0x20>
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	b943      	cbnz	r3, 8003df4 <__swbuf_r+0x32>
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f82b 	bl	8003e40 <__swsetup_r>
 8003dea:	b118      	cbz	r0, 8003df4 <__swbuf_r+0x32>
 8003dec:	f04f 37ff 	mov.w	r7, #4294967295
 8003df0:	4638      	mov	r0, r7
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6922      	ldr	r2, [r4, #16]
 8003df8:	1a98      	subs	r0, r3, r2
 8003dfa:	6963      	ldr	r3, [r4, #20]
 8003dfc:	b2f6      	uxtb	r6, r6
 8003dfe:	4283      	cmp	r3, r0
 8003e00:	4637      	mov	r7, r6
 8003e02:	dc05      	bgt.n	8003e10 <__swbuf_r+0x4e>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 fe00 	bl	8004a0c <_fflush_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1ed      	bne.n	8003dec <__swbuf_r+0x2a>
 8003e10:	68a3      	ldr	r3, [r4, #8]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	60a3      	str	r3, [r4, #8]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	701e      	strb	r6, [r3, #0]
 8003e1e:	6962      	ldr	r2, [r4, #20]
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d004      	beq.n	8003e30 <__swbuf_r+0x6e>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	07db      	lsls	r3, r3, #31
 8003e2a:	d5e1      	bpl.n	8003df0 <__swbuf_r+0x2e>
 8003e2c:	2e0a      	cmp	r6, #10
 8003e2e:	d1df      	bne.n	8003df0 <__swbuf_r+0x2e>
 8003e30:	4621      	mov	r1, r4
 8003e32:	4628      	mov	r0, r5
 8003e34:	f000 fdea 	bl	8004a0c <_fflush_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d0d9      	beq.n	8003df0 <__swbuf_r+0x2e>
 8003e3c:	e7d6      	b.n	8003dec <__swbuf_r+0x2a>
	...

08003e40 <__swsetup_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4b29      	ldr	r3, [pc, #164]	@ (8003ee8 <__swsetup_r+0xa8>)
 8003e44:	4605      	mov	r5, r0
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b118      	cbz	r0, 8003e54 <__swsetup_r+0x14>
 8003e4c:	6a03      	ldr	r3, [r0, #32]
 8003e4e:	b90b      	cbnz	r3, 8003e54 <__swsetup_r+0x14>
 8003e50:	f7ff fe9a 	bl	8003b88 <__sinit>
 8003e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e58:	0719      	lsls	r1, r3, #28
 8003e5a:	d422      	bmi.n	8003ea2 <__swsetup_r+0x62>
 8003e5c:	06da      	lsls	r2, r3, #27
 8003e5e:	d407      	bmi.n	8003e70 <__swsetup_r+0x30>
 8003e60:	2209      	movs	r2, #9
 8003e62:	602a      	str	r2, [r5, #0]
 8003e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e68:	81a3      	strh	r3, [r4, #12]
 8003e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6e:	e033      	b.n	8003ed8 <__swsetup_r+0x98>
 8003e70:	0758      	lsls	r0, r3, #29
 8003e72:	d512      	bpl.n	8003e9a <__swsetup_r+0x5a>
 8003e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e76:	b141      	cbz	r1, 8003e8a <__swsetup_r+0x4a>
 8003e78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e7c:	4299      	cmp	r1, r3
 8003e7e:	d002      	beq.n	8003e86 <__swsetup_r+0x46>
 8003e80:	4628      	mov	r0, r5
 8003e82:	f000 f8cd 	bl	8004020 <_free_r>
 8003e86:	2300      	movs	r3, #0
 8003e88:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e90:	81a3      	strh	r3, [r4, #12]
 8003e92:	2300      	movs	r3, #0
 8003e94:	6063      	str	r3, [r4, #4]
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	f043 0308 	orr.w	r3, r3, #8
 8003ea0:	81a3      	strh	r3, [r4, #12]
 8003ea2:	6923      	ldr	r3, [r4, #16]
 8003ea4:	b94b      	cbnz	r3, 8003eba <__swsetup_r+0x7a>
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb0:	d003      	beq.n	8003eba <__swsetup_r+0x7a>
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 fdf7 	bl	8004aa8 <__smakebuf_r>
 8003eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ebe:	f013 0201 	ands.w	r2, r3, #1
 8003ec2:	d00a      	beq.n	8003eda <__swsetup_r+0x9a>
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	60a2      	str	r2, [r4, #8]
 8003ec8:	6962      	ldr	r2, [r4, #20]
 8003eca:	4252      	negs	r2, r2
 8003ecc:	61a2      	str	r2, [r4, #24]
 8003ece:	6922      	ldr	r2, [r4, #16]
 8003ed0:	b942      	cbnz	r2, 8003ee4 <__swsetup_r+0xa4>
 8003ed2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ed6:	d1c5      	bne.n	8003e64 <__swsetup_r+0x24>
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	0799      	lsls	r1, r3, #30
 8003edc:	bf58      	it	pl
 8003ede:	6962      	ldrpl	r2, [r4, #20]
 8003ee0:	60a2      	str	r2, [r4, #8]
 8003ee2:	e7f4      	b.n	8003ece <__swsetup_r+0x8e>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e7f7      	b.n	8003ed8 <__swsetup_r+0x98>
 8003ee8:	200001cc 	.word	0x200001cc

08003eec <memset>:
 8003eec:	4402      	add	r2, r0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <_close_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4d06      	ldr	r5, [pc, #24]	@ (8003f18 <_close_r+0x1c>)
 8003f00:	2300      	movs	r3, #0
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fd fc36 	bl	8001778 <_close>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_close_r+0x1a>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_close_r+0x1a>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	20000520 	.word	0x20000520

08003f1c <_lseek_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	@ (8003f3c <_lseek_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7fd fc4b 	bl	80017c6 <_lseek>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_lseek_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_lseek_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20000520 	.word	0x20000520

08003f40 <_read_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	@ (8003f60 <_read_r+0x20>)
 8003f44:	4604      	mov	r4, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	602a      	str	r2, [r5, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fd fbc8 	bl	80016e4 <_read>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_read_r+0x1e>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_read_r+0x1e>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000520 	.word	0x20000520

08003f64 <_sbrk_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	@ (8003f80 <_sbrk_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fd fbd6 	bl	8001720 <_sbrk>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_sbrk_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_sbrk_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20000520 	.word	0x20000520

08003f84 <_write_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d07      	ldr	r5, [pc, #28]	@ (8003fa4 <_write_r+0x20>)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	4608      	mov	r0, r1
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	2200      	movs	r2, #0
 8003f90:	602a      	str	r2, [r5, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	f7fd f827 	bl	8000fe6 <_write>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_write_r+0x1e>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_write_r+0x1e>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	20000520 	.word	0x20000520

08003fa8 <__errno>:
 8003fa8:	4b01      	ldr	r3, [pc, #4]	@ (8003fb0 <__errno+0x8>)
 8003faa:	6818      	ldr	r0, [r3, #0]
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	200001cc 	.word	0x200001cc

08003fb4 <__libc_init_array>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003fec <__libc_init_array+0x38>)
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff0 <__libc_init_array+0x3c>)
 8003fba:	1b64      	subs	r4, r4, r5
 8003fbc:	10a4      	asrs	r4, r4, #2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	42a6      	cmp	r6, r4
 8003fc2:	d109      	bne.n	8003fd8 <__libc_init_array+0x24>
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ff4 <__libc_init_array+0x40>)
 8003fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ff8 <__libc_init_array+0x44>)
 8003fc8:	f000 fe1c 	bl	8004c04 <_init>
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	10a4      	asrs	r4, r4, #2
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	42a6      	cmp	r6, r4
 8003fd4:	d105      	bne.n	8003fe2 <__libc_init_array+0x2e>
 8003fd6:	bd70      	pop	{r4, r5, r6, pc}
 8003fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fdc:	4798      	blx	r3
 8003fde:	3601      	adds	r6, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__libc_init_array+0xc>
 8003fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fe6:	4798      	blx	r3
 8003fe8:	3601      	adds	r6, #1
 8003fea:	e7f2      	b.n	8003fd2 <__libc_init_array+0x1e>
 8003fec:	08004cf0 	.word	0x08004cf0
 8003ff0:	08004cf0 	.word	0x08004cf0
 8003ff4:	08004cf0 	.word	0x08004cf0
 8003ff8:	08004cf4 	.word	0x08004cf4

08003ffc <__retarget_lock_init_recursive>:
 8003ffc:	4770      	bx	lr

08003ffe <__retarget_lock_acquire_recursive>:
 8003ffe:	4770      	bx	lr

08004000 <__retarget_lock_release_recursive>:
 8004000:	4770      	bx	lr

08004002 <memcpy>:
 8004002:	440a      	add	r2, r1
 8004004:	4291      	cmp	r1, r2
 8004006:	f100 33ff 	add.w	r3, r0, #4294967295
 800400a:	d100      	bne.n	800400e <memcpy+0xc>
 800400c:	4770      	bx	lr
 800400e:	b510      	push	{r4, lr}
 8004010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004018:	4291      	cmp	r1, r2
 800401a:	d1f9      	bne.n	8004010 <memcpy+0xe>
 800401c:	bd10      	pop	{r4, pc}
	...

08004020 <_free_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4605      	mov	r5, r0
 8004024:	2900      	cmp	r1, #0
 8004026:	d041      	beq.n	80040ac <_free_r+0x8c>
 8004028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402c:	1f0c      	subs	r4, r1, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bfb8      	it	lt
 8004032:	18e4      	addlt	r4, r4, r3
 8004034:	f7ff fd10 	bl	8003a58 <__malloc_lock>
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <_free_r+0x90>)
 800403a:	6813      	ldr	r3, [r2, #0]
 800403c:	b933      	cbnz	r3, 800404c <_free_r+0x2c>
 800403e:	6063      	str	r3, [r4, #4]
 8004040:	6014      	str	r4, [r2, #0]
 8004042:	4628      	mov	r0, r5
 8004044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004048:	f7ff bd0c 	b.w	8003a64 <__malloc_unlock>
 800404c:	42a3      	cmp	r3, r4
 800404e:	d908      	bls.n	8004062 <_free_r+0x42>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	1821      	adds	r1, r4, r0
 8004054:	428b      	cmp	r3, r1
 8004056:	bf01      	itttt	eq
 8004058:	6819      	ldreq	r1, [r3, #0]
 800405a:	685b      	ldreq	r3, [r3, #4]
 800405c:	1809      	addeq	r1, r1, r0
 800405e:	6021      	streq	r1, [r4, #0]
 8004060:	e7ed      	b.n	800403e <_free_r+0x1e>
 8004062:	461a      	mov	r2, r3
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b10b      	cbz	r3, 800406c <_free_r+0x4c>
 8004068:	42a3      	cmp	r3, r4
 800406a:	d9fa      	bls.n	8004062 <_free_r+0x42>
 800406c:	6811      	ldr	r1, [r2, #0]
 800406e:	1850      	adds	r0, r2, r1
 8004070:	42a0      	cmp	r0, r4
 8004072:	d10b      	bne.n	800408c <_free_r+0x6c>
 8004074:	6820      	ldr	r0, [r4, #0]
 8004076:	4401      	add	r1, r0
 8004078:	1850      	adds	r0, r2, r1
 800407a:	4283      	cmp	r3, r0
 800407c:	6011      	str	r1, [r2, #0]
 800407e:	d1e0      	bne.n	8004042 <_free_r+0x22>
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	6053      	str	r3, [r2, #4]
 8004086:	4408      	add	r0, r1
 8004088:	6010      	str	r0, [r2, #0]
 800408a:	e7da      	b.n	8004042 <_free_r+0x22>
 800408c:	d902      	bls.n	8004094 <_free_r+0x74>
 800408e:	230c      	movs	r3, #12
 8004090:	602b      	str	r3, [r5, #0]
 8004092:	e7d6      	b.n	8004042 <_free_r+0x22>
 8004094:	6820      	ldr	r0, [r4, #0]
 8004096:	1821      	adds	r1, r4, r0
 8004098:	428b      	cmp	r3, r1
 800409a:	bf04      	itt	eq
 800409c:	6819      	ldreq	r1, [r3, #0]
 800409e:	685b      	ldreq	r3, [r3, #4]
 80040a0:	6063      	str	r3, [r4, #4]
 80040a2:	bf04      	itt	eq
 80040a4:	1809      	addeq	r1, r1, r0
 80040a6:	6021      	streq	r1, [r4, #0]
 80040a8:	6054      	str	r4, [r2, #4]
 80040aa:	e7ca      	b.n	8004042 <_free_r+0x22>
 80040ac:	bd38      	pop	{r3, r4, r5, pc}
 80040ae:	bf00      	nop
 80040b0:	200003e0 	.word	0x200003e0

080040b4 <__ssputs_r>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	688e      	ldr	r6, [r1, #8]
 80040ba:	461f      	mov	r7, r3
 80040bc:	42be      	cmp	r6, r7
 80040be:	680b      	ldr	r3, [r1, #0]
 80040c0:	4682      	mov	sl, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	4690      	mov	r8, r2
 80040c6:	d82d      	bhi.n	8004124 <__ssputs_r+0x70>
 80040c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040d0:	d026      	beq.n	8004120 <__ssputs_r+0x6c>
 80040d2:	6965      	ldr	r5, [r4, #20]
 80040d4:	6909      	ldr	r1, [r1, #16]
 80040d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040da:	eba3 0901 	sub.w	r9, r3, r1
 80040de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e2:	1c7b      	adds	r3, r7, #1
 80040e4:	444b      	add	r3, r9
 80040e6:	106d      	asrs	r5, r5, #1
 80040e8:	429d      	cmp	r5, r3
 80040ea:	bf38      	it	cc
 80040ec:	461d      	movcc	r5, r3
 80040ee:	0553      	lsls	r3, r2, #21
 80040f0:	d527      	bpl.n	8004142 <__ssputs_r+0x8e>
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7ff fc30 	bl	8003958 <_malloc_r>
 80040f8:	4606      	mov	r6, r0
 80040fa:	b360      	cbz	r0, 8004156 <__ssputs_r+0xa2>
 80040fc:	6921      	ldr	r1, [r4, #16]
 80040fe:	464a      	mov	r2, r9
 8004100:	f7ff ff7f 	bl	8004002 <memcpy>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800410a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	6126      	str	r6, [r4, #16]
 8004112:	6165      	str	r5, [r4, #20]
 8004114:	444e      	add	r6, r9
 8004116:	eba5 0509 	sub.w	r5, r5, r9
 800411a:	6026      	str	r6, [r4, #0]
 800411c:	60a5      	str	r5, [r4, #8]
 800411e:	463e      	mov	r6, r7
 8004120:	42be      	cmp	r6, r7
 8004122:	d900      	bls.n	8004126 <__ssputs_r+0x72>
 8004124:	463e      	mov	r6, r7
 8004126:	6820      	ldr	r0, [r4, #0]
 8004128:	4632      	mov	r2, r6
 800412a:	4641      	mov	r1, r8
 800412c:	f000 fcf8 	bl	8004b20 <memmove>
 8004130:	68a3      	ldr	r3, [r4, #8]
 8004132:	1b9b      	subs	r3, r3, r6
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	4433      	add	r3, r6
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	2000      	movs	r0, #0
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004142:	462a      	mov	r2, r5
 8004144:	f000 fd28 	bl	8004b98 <_realloc_r>
 8004148:	4606      	mov	r6, r0
 800414a:	2800      	cmp	r0, #0
 800414c:	d1e0      	bne.n	8004110 <__ssputs_r+0x5c>
 800414e:	6921      	ldr	r1, [r4, #16]
 8004150:	4650      	mov	r0, sl
 8004152:	f7ff ff65 	bl	8004020 <_free_r>
 8004156:	230c      	movs	r3, #12
 8004158:	f8ca 3000 	str.w	r3, [sl]
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e7e9      	b.n	800413e <__ssputs_r+0x8a>
	...

0800416c <_svfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4698      	mov	r8, r3
 8004172:	898b      	ldrh	r3, [r1, #12]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	b09d      	sub	sp, #116	@ 0x74
 8004178:	4607      	mov	r7, r0
 800417a:	460d      	mov	r5, r1
 800417c:	4614      	mov	r4, r2
 800417e:	d510      	bpl.n	80041a2 <_svfiprintf_r+0x36>
 8004180:	690b      	ldr	r3, [r1, #16]
 8004182:	b973      	cbnz	r3, 80041a2 <_svfiprintf_r+0x36>
 8004184:	2140      	movs	r1, #64	@ 0x40
 8004186:	f7ff fbe7 	bl	8003958 <_malloc_r>
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	6128      	str	r0, [r5, #16]
 800418e:	b930      	cbnz	r0, 800419e <_svfiprintf_r+0x32>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	b01d      	add	sp, #116	@ 0x74
 800419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419e:	2340      	movs	r3, #64	@ 0x40
 80041a0:	616b      	str	r3, [r5, #20]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80041a6:	2320      	movs	r3, #32
 80041a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b0:	2330      	movs	r3, #48	@ 0x30
 80041b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004350 <_svfiprintf_r+0x1e4>
 80041b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80041ba:	f04f 0901 	mov.w	r9, #1
 80041be:	4623      	mov	r3, r4
 80041c0:	469a      	mov	sl, r3
 80041c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c6:	b10a      	cbz	r2, 80041cc <_svfiprintf_r+0x60>
 80041c8:	2a25      	cmp	r2, #37	@ 0x25
 80041ca:	d1f9      	bne.n	80041c0 <_svfiprintf_r+0x54>
 80041cc:	ebba 0b04 	subs.w	fp, sl, r4
 80041d0:	d00b      	beq.n	80041ea <_svfiprintf_r+0x7e>
 80041d2:	465b      	mov	r3, fp
 80041d4:	4622      	mov	r2, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	4638      	mov	r0, r7
 80041da:	f7ff ff6b 	bl	80040b4 <__ssputs_r>
 80041de:	3001      	adds	r0, #1
 80041e0:	f000 80a7 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041e6:	445a      	add	r2, fp
 80041e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ea:	f89a 3000 	ldrb.w	r3, [sl]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 809f 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041f4:	2300      	movs	r3, #0
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fe:	f10a 0a01 	add.w	sl, sl, #1
 8004202:	9304      	str	r3, [sp, #16]
 8004204:	9307      	str	r3, [sp, #28]
 8004206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800420a:	931a      	str	r3, [sp, #104]	@ 0x68
 800420c:	4654      	mov	r4, sl
 800420e:	2205      	movs	r2, #5
 8004210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004214:	484e      	ldr	r0, [pc, #312]	@ (8004350 <_svfiprintf_r+0x1e4>)
 8004216:	f7fb ffdb 	bl	80001d0 <memchr>
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	b9d8      	cbnz	r0, 8004256 <_svfiprintf_r+0xea>
 800421e:	06d0      	lsls	r0, r2, #27
 8004220:	bf44      	itt	mi
 8004222:	2320      	movmi	r3, #32
 8004224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004228:	0711      	lsls	r1, r2, #28
 800422a:	bf44      	itt	mi
 800422c:	232b      	movmi	r3, #43	@ 0x2b
 800422e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004232:	f89a 3000 	ldrb.w	r3, [sl]
 8004236:	2b2a      	cmp	r3, #42	@ 0x2a
 8004238:	d015      	beq.n	8004266 <_svfiprintf_r+0xfa>
 800423a:	9a07      	ldr	r2, [sp, #28]
 800423c:	4654      	mov	r4, sl
 800423e:	2000      	movs	r0, #0
 8004240:	f04f 0c0a 	mov.w	ip, #10
 8004244:	4621      	mov	r1, r4
 8004246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424a:	3b30      	subs	r3, #48	@ 0x30
 800424c:	2b09      	cmp	r3, #9
 800424e:	d94b      	bls.n	80042e8 <_svfiprintf_r+0x17c>
 8004250:	b1b0      	cbz	r0, 8004280 <_svfiprintf_r+0x114>
 8004252:	9207      	str	r2, [sp, #28]
 8004254:	e014      	b.n	8004280 <_svfiprintf_r+0x114>
 8004256:	eba0 0308 	sub.w	r3, r0, r8
 800425a:	fa09 f303 	lsl.w	r3, r9, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	46a2      	mov	sl, r4
 8004264:	e7d2      	b.n	800420c <_svfiprintf_r+0xa0>
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	1d19      	adds	r1, r3, #4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	9103      	str	r1, [sp, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfbb      	ittet	lt
 8004272:	425b      	neglt	r3, r3
 8004274:	f042 0202 	orrlt.w	r2, r2, #2
 8004278:	9307      	strge	r3, [sp, #28]
 800427a:	9307      	strlt	r3, [sp, #28]
 800427c:	bfb8      	it	lt
 800427e:	9204      	strlt	r2, [sp, #16]
 8004280:	7823      	ldrb	r3, [r4, #0]
 8004282:	2b2e      	cmp	r3, #46	@ 0x2e
 8004284:	d10a      	bne.n	800429c <_svfiprintf_r+0x130>
 8004286:	7863      	ldrb	r3, [r4, #1]
 8004288:	2b2a      	cmp	r3, #42	@ 0x2a
 800428a:	d132      	bne.n	80042f2 <_svfiprintf_r+0x186>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	9203      	str	r2, [sp, #12]
 8004294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004298:	3402      	adds	r4, #2
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004360 <_svfiprintf_r+0x1f4>
 80042a0:	7821      	ldrb	r1, [r4, #0]
 80042a2:	2203      	movs	r2, #3
 80042a4:	4650      	mov	r0, sl
 80042a6:	f7fb ff93 	bl	80001d0 <memchr>
 80042aa:	b138      	cbz	r0, 80042bc <_svfiprintf_r+0x150>
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	eba0 000a 	sub.w	r0, r0, sl
 80042b2:	2240      	movs	r2, #64	@ 0x40
 80042b4:	4082      	lsls	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	3401      	adds	r4, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	4824      	ldr	r0, [pc, #144]	@ (8004354 <_svfiprintf_r+0x1e8>)
 80042c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042c6:	2206      	movs	r2, #6
 80042c8:	f7fb ff82 	bl	80001d0 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d036      	beq.n	800433e <_svfiprintf_r+0x1d2>
 80042d0:	4b21      	ldr	r3, [pc, #132]	@ (8004358 <_svfiprintf_r+0x1ec>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_svfiprintf_r+0x1b0>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e2:	4433      	add	r3, r6
 80042e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042e6:	e76a      	b.n	80041be <_svfiprintf_r+0x52>
 80042e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ec:	460c      	mov	r4, r1
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7a8      	b.n	8004244 <_svfiprintf_r+0xd8>
 80042f2:	2300      	movs	r3, #0
 80042f4:	3401      	adds	r4, #1
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0c0a 	mov.w	ip, #10
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	@ 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x1a6>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c6      	beq.n	800429c <_svfiprintf_r+0x130>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c4      	b.n	800429c <_svfiprintf_r+0x130>
 8004312:	fb0c 2101 	mla	r1, ip, r1, r2
 8004316:	4604      	mov	r4, r0
 8004318:	2301      	movs	r3, #1
 800431a:	e7f0      	b.n	80042fe <_svfiprintf_r+0x192>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <_svfiprintf_r+0x1f0>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4638      	mov	r0, r7
 8004328:	f3af 8000 	nop.w
 800432c:	1c42      	adds	r2, r0, #1
 800432e:	4606      	mov	r6, r0
 8004330:	d1d6      	bne.n	80042e0 <_svfiprintf_r+0x174>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af2d 	bmi.w	8004194 <_svfiprintf_r+0x28>
 800433a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800433c:	e72c      	b.n	8004198 <_svfiprintf_r+0x2c>
 800433e:	ab03      	add	r3, sp, #12
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	462a      	mov	r2, r5
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <_svfiprintf_r+0x1f0>)
 8004346:	a904      	add	r1, sp, #16
 8004348:	4638      	mov	r0, r7
 800434a:	f000 f9bb 	bl	80046c4 <_printf_i>
 800434e:	e7ed      	b.n	800432c <_svfiprintf_r+0x1c0>
 8004350:	08004cb4 	.word	0x08004cb4
 8004354:	08004cbe 	.word	0x08004cbe
 8004358:	00000000 	.word	0x00000000
 800435c:	080040b5 	.word	0x080040b5
 8004360:	08004cba 	.word	0x08004cba

08004364 <__sfputc_r>:
 8004364:	6893      	ldr	r3, [r2, #8]
 8004366:	3b01      	subs	r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	b410      	push	{r4}
 800436c:	6093      	str	r3, [r2, #8]
 800436e:	da08      	bge.n	8004382 <__sfputc_r+0x1e>
 8004370:	6994      	ldr	r4, [r2, #24]
 8004372:	42a3      	cmp	r3, r4
 8004374:	db01      	blt.n	800437a <__sfputc_r+0x16>
 8004376:	290a      	cmp	r1, #10
 8004378:	d103      	bne.n	8004382 <__sfputc_r+0x1e>
 800437a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437e:	f7ff bd20 	b.w	8003dc2 <__swbuf_r>
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	1c58      	adds	r0, r3, #1
 8004386:	6010      	str	r0, [r2, #0]
 8004388:	7019      	strb	r1, [r3, #0]
 800438a:	4608      	mov	r0, r1
 800438c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004390:	4770      	bx	lr

08004392 <__sfputs_r>:
 8004392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004394:	4606      	mov	r6, r0
 8004396:	460f      	mov	r7, r1
 8004398:	4614      	mov	r4, r2
 800439a:	18d5      	adds	r5, r2, r3
 800439c:	42ac      	cmp	r4, r5
 800439e:	d101      	bne.n	80043a4 <__sfputs_r+0x12>
 80043a0:	2000      	movs	r0, #0
 80043a2:	e007      	b.n	80043b4 <__sfputs_r+0x22>
 80043a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a8:	463a      	mov	r2, r7
 80043aa:	4630      	mov	r0, r6
 80043ac:	f7ff ffda 	bl	8004364 <__sfputc_r>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d1f3      	bne.n	800439c <__sfputs_r+0xa>
 80043b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043b8 <_vfiprintf_r>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	460d      	mov	r5, r1
 80043be:	b09d      	sub	sp, #116	@ 0x74
 80043c0:	4614      	mov	r4, r2
 80043c2:	4698      	mov	r8, r3
 80043c4:	4606      	mov	r6, r0
 80043c6:	b118      	cbz	r0, 80043d0 <_vfiprintf_r+0x18>
 80043c8:	6a03      	ldr	r3, [r0, #32]
 80043ca:	b90b      	cbnz	r3, 80043d0 <_vfiprintf_r+0x18>
 80043cc:	f7ff fbdc 	bl	8003b88 <__sinit>
 80043d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043d2:	07d9      	lsls	r1, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <_vfiprintf_r+0x2a>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	059a      	lsls	r2, r3, #22
 80043da:	d402      	bmi.n	80043e2 <_vfiprintf_r+0x2a>
 80043dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043de:	f7ff fe0e 	bl	8003ffe <__retarget_lock_acquire_recursive>
 80043e2:	89ab      	ldrh	r3, [r5, #12]
 80043e4:	071b      	lsls	r3, r3, #28
 80043e6:	d501      	bpl.n	80043ec <_vfiprintf_r+0x34>
 80043e8:	692b      	ldr	r3, [r5, #16]
 80043ea:	b99b      	cbnz	r3, 8004414 <_vfiprintf_r+0x5c>
 80043ec:	4629      	mov	r1, r5
 80043ee:	4630      	mov	r0, r6
 80043f0:	f7ff fd26 	bl	8003e40 <__swsetup_r>
 80043f4:	b170      	cbz	r0, 8004414 <_vfiprintf_r+0x5c>
 80043f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043f8:	07dc      	lsls	r4, r3, #31
 80043fa:	d504      	bpl.n	8004406 <_vfiprintf_r+0x4e>
 80043fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004400:	b01d      	add	sp, #116	@ 0x74
 8004402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	0598      	lsls	r0, r3, #22
 800440a:	d4f7      	bmi.n	80043fc <_vfiprintf_r+0x44>
 800440c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800440e:	f7ff fdf7 	bl	8004000 <__retarget_lock_release_recursive>
 8004412:	e7f3      	b.n	80043fc <_vfiprintf_r+0x44>
 8004414:	2300      	movs	r3, #0
 8004416:	9309      	str	r3, [sp, #36]	@ 0x24
 8004418:	2320      	movs	r3, #32
 800441a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800441e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004422:	2330      	movs	r3, #48	@ 0x30
 8004424:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045d4 <_vfiprintf_r+0x21c>
 8004428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800442c:	f04f 0901 	mov.w	r9, #1
 8004430:	4623      	mov	r3, r4
 8004432:	469a      	mov	sl, r3
 8004434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004438:	b10a      	cbz	r2, 800443e <_vfiprintf_r+0x86>
 800443a:	2a25      	cmp	r2, #37	@ 0x25
 800443c:	d1f9      	bne.n	8004432 <_vfiprintf_r+0x7a>
 800443e:	ebba 0b04 	subs.w	fp, sl, r4
 8004442:	d00b      	beq.n	800445c <_vfiprintf_r+0xa4>
 8004444:	465b      	mov	r3, fp
 8004446:	4622      	mov	r2, r4
 8004448:	4629      	mov	r1, r5
 800444a:	4630      	mov	r0, r6
 800444c:	f7ff ffa1 	bl	8004392 <__sfputs_r>
 8004450:	3001      	adds	r0, #1
 8004452:	f000 80a7 	beq.w	80045a4 <_vfiprintf_r+0x1ec>
 8004456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004458:	445a      	add	r2, fp
 800445a:	9209      	str	r2, [sp, #36]	@ 0x24
 800445c:	f89a 3000 	ldrb.w	r3, [sl]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 809f 	beq.w	80045a4 <_vfiprintf_r+0x1ec>
 8004466:	2300      	movs	r3, #0
 8004468:	f04f 32ff 	mov.w	r2, #4294967295
 800446c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004470:	f10a 0a01 	add.w	sl, sl, #1
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800447c:	931a      	str	r3, [sp, #104]	@ 0x68
 800447e:	4654      	mov	r4, sl
 8004480:	2205      	movs	r2, #5
 8004482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004486:	4853      	ldr	r0, [pc, #332]	@ (80045d4 <_vfiprintf_r+0x21c>)
 8004488:	f7fb fea2 	bl	80001d0 <memchr>
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	b9d8      	cbnz	r0, 80044c8 <_vfiprintf_r+0x110>
 8004490:	06d1      	lsls	r1, r2, #27
 8004492:	bf44      	itt	mi
 8004494:	2320      	movmi	r3, #32
 8004496:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800449a:	0713      	lsls	r3, r2, #28
 800449c:	bf44      	itt	mi
 800449e:	232b      	movmi	r3, #43	@ 0x2b
 80044a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044a4:	f89a 3000 	ldrb.w	r3, [sl]
 80044a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80044aa:	d015      	beq.n	80044d8 <_vfiprintf_r+0x120>
 80044ac:	9a07      	ldr	r2, [sp, #28]
 80044ae:	4654      	mov	r4, sl
 80044b0:	2000      	movs	r0, #0
 80044b2:	f04f 0c0a 	mov.w	ip, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044bc:	3b30      	subs	r3, #48	@ 0x30
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d94b      	bls.n	800455a <_vfiprintf_r+0x1a2>
 80044c2:	b1b0      	cbz	r0, 80044f2 <_vfiprintf_r+0x13a>
 80044c4:	9207      	str	r2, [sp, #28]
 80044c6:	e014      	b.n	80044f2 <_vfiprintf_r+0x13a>
 80044c8:	eba0 0308 	sub.w	r3, r0, r8
 80044cc:	fa09 f303 	lsl.w	r3, r9, r3
 80044d0:	4313      	orrs	r3, r2
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	46a2      	mov	sl, r4
 80044d6:	e7d2      	b.n	800447e <_vfiprintf_r+0xc6>
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	1d19      	adds	r1, r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	9103      	str	r1, [sp, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bfbb      	ittet	lt
 80044e4:	425b      	neglt	r3, r3
 80044e6:	f042 0202 	orrlt.w	r2, r2, #2
 80044ea:	9307      	strge	r3, [sp, #28]
 80044ec:	9307      	strlt	r3, [sp, #28]
 80044ee:	bfb8      	it	lt
 80044f0:	9204      	strlt	r2, [sp, #16]
 80044f2:	7823      	ldrb	r3, [r4, #0]
 80044f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80044f6:	d10a      	bne.n	800450e <_vfiprintf_r+0x156>
 80044f8:	7863      	ldrb	r3, [r4, #1]
 80044fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80044fc:	d132      	bne.n	8004564 <_vfiprintf_r+0x1ac>
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	1d1a      	adds	r2, r3, #4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	9203      	str	r2, [sp, #12]
 8004506:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800450a:	3402      	adds	r4, #2
 800450c:	9305      	str	r3, [sp, #20]
 800450e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045e4 <_vfiprintf_r+0x22c>
 8004512:	7821      	ldrb	r1, [r4, #0]
 8004514:	2203      	movs	r2, #3
 8004516:	4650      	mov	r0, sl
 8004518:	f7fb fe5a 	bl	80001d0 <memchr>
 800451c:	b138      	cbz	r0, 800452e <_vfiprintf_r+0x176>
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	eba0 000a 	sub.w	r0, r0, sl
 8004524:	2240      	movs	r2, #64	@ 0x40
 8004526:	4082      	lsls	r2, r0
 8004528:	4313      	orrs	r3, r2
 800452a:	3401      	adds	r4, #1
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004532:	4829      	ldr	r0, [pc, #164]	@ (80045d8 <_vfiprintf_r+0x220>)
 8004534:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004538:	2206      	movs	r2, #6
 800453a:	f7fb fe49 	bl	80001d0 <memchr>
 800453e:	2800      	cmp	r0, #0
 8004540:	d03f      	beq.n	80045c2 <_vfiprintf_r+0x20a>
 8004542:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <_vfiprintf_r+0x224>)
 8004544:	bb1b      	cbnz	r3, 800458e <_vfiprintf_r+0x1d6>
 8004546:	9b03      	ldr	r3, [sp, #12]
 8004548:	3307      	adds	r3, #7
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	3308      	adds	r3, #8
 8004550:	9303      	str	r3, [sp, #12]
 8004552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004554:	443b      	add	r3, r7
 8004556:	9309      	str	r3, [sp, #36]	@ 0x24
 8004558:	e76a      	b.n	8004430 <_vfiprintf_r+0x78>
 800455a:	fb0c 3202 	mla	r2, ip, r2, r3
 800455e:	460c      	mov	r4, r1
 8004560:	2001      	movs	r0, #1
 8004562:	e7a8      	b.n	80044b6 <_vfiprintf_r+0xfe>
 8004564:	2300      	movs	r3, #0
 8004566:	3401      	adds	r4, #1
 8004568:	9305      	str	r3, [sp, #20]
 800456a:	4619      	mov	r1, r3
 800456c:	f04f 0c0a 	mov.w	ip, #10
 8004570:	4620      	mov	r0, r4
 8004572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004576:	3a30      	subs	r2, #48	@ 0x30
 8004578:	2a09      	cmp	r2, #9
 800457a:	d903      	bls.n	8004584 <_vfiprintf_r+0x1cc>
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0c6      	beq.n	800450e <_vfiprintf_r+0x156>
 8004580:	9105      	str	r1, [sp, #20]
 8004582:	e7c4      	b.n	800450e <_vfiprintf_r+0x156>
 8004584:	fb0c 2101 	mla	r1, ip, r1, r2
 8004588:	4604      	mov	r4, r0
 800458a:	2301      	movs	r3, #1
 800458c:	e7f0      	b.n	8004570 <_vfiprintf_r+0x1b8>
 800458e:	ab03      	add	r3, sp, #12
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	462a      	mov	r2, r5
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <_vfiprintf_r+0x228>)
 8004596:	a904      	add	r1, sp, #16
 8004598:	4630      	mov	r0, r6
 800459a:	f3af 8000 	nop.w
 800459e:	4607      	mov	r7, r0
 80045a0:	1c78      	adds	r0, r7, #1
 80045a2:	d1d6      	bne.n	8004552 <_vfiprintf_r+0x19a>
 80045a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045a6:	07d9      	lsls	r1, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_vfiprintf_r+0x1fe>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_vfiprintf_r+0x1fe>
 80045b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045b2:	f7ff fd25 	bl	8004000 <__retarget_lock_release_recursive>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	065b      	lsls	r3, r3, #25
 80045ba:	f53f af1f 	bmi.w	80043fc <_vfiprintf_r+0x44>
 80045be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045c0:	e71e      	b.n	8004400 <_vfiprintf_r+0x48>
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <_vfiprintf_r+0x228>)
 80045ca:	a904      	add	r1, sp, #16
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f879 	bl	80046c4 <_printf_i>
 80045d2:	e7e4      	b.n	800459e <_vfiprintf_r+0x1e6>
 80045d4:	08004cb4 	.word	0x08004cb4
 80045d8:	08004cbe 	.word	0x08004cbe
 80045dc:	00000000 	.word	0x00000000
 80045e0:	08004393 	.word	0x08004393
 80045e4:	08004cba 	.word	0x08004cba

080045e8 <_printf_common>:
 80045e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	4616      	mov	r6, r2
 80045ee:	4698      	mov	r8, r3
 80045f0:	688a      	ldr	r2, [r1, #8]
 80045f2:	690b      	ldr	r3, [r1, #16]
 80045f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045f8:	4293      	cmp	r3, r2
 80045fa:	bfb8      	it	lt
 80045fc:	4613      	movlt	r3, r2
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004604:	4607      	mov	r7, r0
 8004606:	460c      	mov	r4, r1
 8004608:	b10a      	cbz	r2, 800460e <_printf_common+0x26>
 800460a:	3301      	adds	r3, #1
 800460c:	6033      	str	r3, [r6, #0]
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	0699      	lsls	r1, r3, #26
 8004612:	bf42      	ittt	mi
 8004614:	6833      	ldrmi	r3, [r6, #0]
 8004616:	3302      	addmi	r3, #2
 8004618:	6033      	strmi	r3, [r6, #0]
 800461a:	6825      	ldr	r5, [r4, #0]
 800461c:	f015 0506 	ands.w	r5, r5, #6
 8004620:	d106      	bne.n	8004630 <_printf_common+0x48>
 8004622:	f104 0a19 	add.w	sl, r4, #25
 8004626:	68e3      	ldr	r3, [r4, #12]
 8004628:	6832      	ldr	r2, [r6, #0]
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	42ab      	cmp	r3, r5
 800462e:	dc26      	bgt.n	800467e <_printf_common+0x96>
 8004630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	3b00      	subs	r3, #0
 8004638:	bf18      	it	ne
 800463a:	2301      	movne	r3, #1
 800463c:	0692      	lsls	r2, r2, #26
 800463e:	d42b      	bmi.n	8004698 <_printf_common+0xb0>
 8004640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004644:	4641      	mov	r1, r8
 8004646:	4638      	mov	r0, r7
 8004648:	47c8      	blx	r9
 800464a:	3001      	adds	r0, #1
 800464c:	d01e      	beq.n	800468c <_printf_common+0xa4>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	6922      	ldr	r2, [r4, #16]
 8004652:	f003 0306 	and.w	r3, r3, #6
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf02      	ittt	eq
 800465a:	68e5      	ldreq	r5, [r4, #12]
 800465c:	6833      	ldreq	r3, [r6, #0]
 800465e:	1aed      	subeq	r5, r5, r3
 8004660:	68a3      	ldr	r3, [r4, #8]
 8004662:	bf0c      	ite	eq
 8004664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004668:	2500      	movne	r5, #0
 800466a:	4293      	cmp	r3, r2
 800466c:	bfc4      	itt	gt
 800466e:	1a9b      	subgt	r3, r3, r2
 8004670:	18ed      	addgt	r5, r5, r3
 8004672:	2600      	movs	r6, #0
 8004674:	341a      	adds	r4, #26
 8004676:	42b5      	cmp	r5, r6
 8004678:	d11a      	bne.n	80046b0 <_printf_common+0xc8>
 800467a:	2000      	movs	r0, #0
 800467c:	e008      	b.n	8004690 <_printf_common+0xa8>
 800467e:	2301      	movs	r3, #1
 8004680:	4652      	mov	r2, sl
 8004682:	4641      	mov	r1, r8
 8004684:	4638      	mov	r0, r7
 8004686:	47c8      	blx	r9
 8004688:	3001      	adds	r0, #1
 800468a:	d103      	bne.n	8004694 <_printf_common+0xac>
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	3501      	adds	r5, #1
 8004696:	e7c6      	b.n	8004626 <_printf_common+0x3e>
 8004698:	18e1      	adds	r1, r4, r3
 800469a:	1c5a      	adds	r2, r3, #1
 800469c:	2030      	movs	r0, #48	@ 0x30
 800469e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046a2:	4422      	add	r2, r4
 80046a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046ac:	3302      	adds	r3, #2
 80046ae:	e7c7      	b.n	8004640 <_printf_common+0x58>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4622      	mov	r2, r4
 80046b4:	4641      	mov	r1, r8
 80046b6:	4638      	mov	r0, r7
 80046b8:	47c8      	blx	r9
 80046ba:	3001      	adds	r0, #1
 80046bc:	d0e6      	beq.n	800468c <_printf_common+0xa4>
 80046be:	3601      	adds	r6, #1
 80046c0:	e7d9      	b.n	8004676 <_printf_common+0x8e>
	...

080046c4 <_printf_i>:
 80046c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046c8:	7e0f      	ldrb	r7, [r1, #24]
 80046ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046cc:	2f78      	cmp	r7, #120	@ 0x78
 80046ce:	4691      	mov	r9, r2
 80046d0:	4680      	mov	r8, r0
 80046d2:	460c      	mov	r4, r1
 80046d4:	469a      	mov	sl, r3
 80046d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046da:	d807      	bhi.n	80046ec <_printf_i+0x28>
 80046dc:	2f62      	cmp	r7, #98	@ 0x62
 80046de:	d80a      	bhi.n	80046f6 <_printf_i+0x32>
 80046e0:	2f00      	cmp	r7, #0
 80046e2:	f000 80d2 	beq.w	800488a <_printf_i+0x1c6>
 80046e6:	2f58      	cmp	r7, #88	@ 0x58
 80046e8:	f000 80b9 	beq.w	800485e <_printf_i+0x19a>
 80046ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046f4:	e03a      	b.n	800476c <_printf_i+0xa8>
 80046f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046fa:	2b15      	cmp	r3, #21
 80046fc:	d8f6      	bhi.n	80046ec <_printf_i+0x28>
 80046fe:	a101      	add	r1, pc, #4	@ (adr r1, 8004704 <_printf_i+0x40>)
 8004700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004704:	0800475d 	.word	0x0800475d
 8004708:	08004771 	.word	0x08004771
 800470c:	080046ed 	.word	0x080046ed
 8004710:	080046ed 	.word	0x080046ed
 8004714:	080046ed 	.word	0x080046ed
 8004718:	080046ed 	.word	0x080046ed
 800471c:	08004771 	.word	0x08004771
 8004720:	080046ed 	.word	0x080046ed
 8004724:	080046ed 	.word	0x080046ed
 8004728:	080046ed 	.word	0x080046ed
 800472c:	080046ed 	.word	0x080046ed
 8004730:	08004871 	.word	0x08004871
 8004734:	0800479b 	.word	0x0800479b
 8004738:	0800482b 	.word	0x0800482b
 800473c:	080046ed 	.word	0x080046ed
 8004740:	080046ed 	.word	0x080046ed
 8004744:	08004893 	.word	0x08004893
 8004748:	080046ed 	.word	0x080046ed
 800474c:	0800479b 	.word	0x0800479b
 8004750:	080046ed 	.word	0x080046ed
 8004754:	080046ed 	.word	0x080046ed
 8004758:	08004833 	.word	0x08004833
 800475c:	6833      	ldr	r3, [r6, #0]
 800475e:	1d1a      	adds	r2, r3, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800476c:	2301      	movs	r3, #1
 800476e:	e09d      	b.n	80048ac <_printf_i+0x1e8>
 8004770:	6833      	ldr	r3, [r6, #0]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1d19      	adds	r1, r3, #4
 8004776:	6031      	str	r1, [r6, #0]
 8004778:	0606      	lsls	r6, r0, #24
 800477a:	d501      	bpl.n	8004780 <_printf_i+0xbc>
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	e003      	b.n	8004788 <_printf_i+0xc4>
 8004780:	0645      	lsls	r5, r0, #25
 8004782:	d5fb      	bpl.n	800477c <_printf_i+0xb8>
 8004784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004788:	2d00      	cmp	r5, #0
 800478a:	da03      	bge.n	8004794 <_printf_i+0xd0>
 800478c:	232d      	movs	r3, #45	@ 0x2d
 800478e:	426d      	negs	r5, r5
 8004790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004794:	4859      	ldr	r0, [pc, #356]	@ (80048fc <_printf_i+0x238>)
 8004796:	230a      	movs	r3, #10
 8004798:	e011      	b.n	80047be <_printf_i+0xfa>
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	0608      	lsls	r0, r1, #24
 80047a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047a4:	d402      	bmi.n	80047ac <_printf_i+0xe8>
 80047a6:	0649      	lsls	r1, r1, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2ad      	uxthmi	r5, r5
 80047ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ae:	4853      	ldr	r0, [pc, #332]	@ (80048fc <_printf_i+0x238>)
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	bf14      	ite	ne
 80047b4:	230a      	movne	r3, #10
 80047b6:	2308      	moveq	r3, #8
 80047b8:	2100      	movs	r1, #0
 80047ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047be:	6866      	ldr	r6, [r4, #4]
 80047c0:	60a6      	str	r6, [r4, #8]
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	bfa2      	ittt	ge
 80047c6:	6821      	ldrge	r1, [r4, #0]
 80047c8:	f021 0104 	bicge.w	r1, r1, #4
 80047cc:	6021      	strge	r1, [r4, #0]
 80047ce:	b90d      	cbnz	r5, 80047d4 <_printf_i+0x110>
 80047d0:	2e00      	cmp	r6, #0
 80047d2:	d04b      	beq.n	800486c <_printf_i+0x1a8>
 80047d4:	4616      	mov	r6, r2
 80047d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80047da:	fb03 5711 	mls	r7, r3, r1, r5
 80047de:	5dc7      	ldrb	r7, [r0, r7]
 80047e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047e4:	462f      	mov	r7, r5
 80047e6:	42bb      	cmp	r3, r7
 80047e8:	460d      	mov	r5, r1
 80047ea:	d9f4      	bls.n	80047d6 <_printf_i+0x112>
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d10b      	bne.n	8004808 <_printf_i+0x144>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07df      	lsls	r7, r3, #31
 80047f4:	d508      	bpl.n	8004808 <_printf_i+0x144>
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	6861      	ldr	r1, [r4, #4]
 80047fa:	4299      	cmp	r1, r3
 80047fc:	bfde      	ittt	le
 80047fe:	2330      	movle	r3, #48	@ 0x30
 8004800:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004804:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004808:	1b92      	subs	r2, r2, r6
 800480a:	6122      	str	r2, [r4, #16]
 800480c:	f8cd a000 	str.w	sl, [sp]
 8004810:	464b      	mov	r3, r9
 8004812:	aa03      	add	r2, sp, #12
 8004814:	4621      	mov	r1, r4
 8004816:	4640      	mov	r0, r8
 8004818:	f7ff fee6 	bl	80045e8 <_printf_common>
 800481c:	3001      	adds	r0, #1
 800481e:	d14a      	bne.n	80048b6 <_printf_i+0x1f2>
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	b004      	add	sp, #16
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	f043 0320 	orr.w	r3, r3, #32
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	4833      	ldr	r0, [pc, #204]	@ (8004900 <_printf_i+0x23c>)
 8004834:	2778      	movs	r7, #120	@ 0x78
 8004836:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	6831      	ldr	r1, [r6, #0]
 800483e:	061f      	lsls	r7, r3, #24
 8004840:	f851 5b04 	ldr.w	r5, [r1], #4
 8004844:	d402      	bmi.n	800484c <_printf_i+0x188>
 8004846:	065f      	lsls	r7, r3, #25
 8004848:	bf48      	it	mi
 800484a:	b2ad      	uxthmi	r5, r5
 800484c:	6031      	str	r1, [r6, #0]
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	bf44      	itt	mi
 8004852:	f043 0320 	orrmi.w	r3, r3, #32
 8004856:	6023      	strmi	r3, [r4, #0]
 8004858:	b11d      	cbz	r5, 8004862 <_printf_i+0x19e>
 800485a:	2310      	movs	r3, #16
 800485c:	e7ac      	b.n	80047b8 <_printf_i+0xf4>
 800485e:	4827      	ldr	r0, [pc, #156]	@ (80048fc <_printf_i+0x238>)
 8004860:	e7e9      	b.n	8004836 <_printf_i+0x172>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f023 0320 	bic.w	r3, r3, #32
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	e7f6      	b.n	800485a <_printf_i+0x196>
 800486c:	4616      	mov	r6, r2
 800486e:	e7bd      	b.n	80047ec <_printf_i+0x128>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	6961      	ldr	r1, [r4, #20]
 8004876:	1d18      	adds	r0, r3, #4
 8004878:	6030      	str	r0, [r6, #0]
 800487a:	062e      	lsls	r6, r5, #24
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	d501      	bpl.n	8004884 <_printf_i+0x1c0>
 8004880:	6019      	str	r1, [r3, #0]
 8004882:	e002      	b.n	800488a <_printf_i+0x1c6>
 8004884:	0668      	lsls	r0, r5, #25
 8004886:	d5fb      	bpl.n	8004880 <_printf_i+0x1bc>
 8004888:	8019      	strh	r1, [r3, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	4616      	mov	r6, r2
 8004890:	e7bc      	b.n	800480c <_printf_i+0x148>
 8004892:	6833      	ldr	r3, [r6, #0]
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	6032      	str	r2, [r6, #0]
 8004898:	681e      	ldr	r6, [r3, #0]
 800489a:	6862      	ldr	r2, [r4, #4]
 800489c:	2100      	movs	r1, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	f7fb fc96 	bl	80001d0 <memchr>
 80048a4:	b108      	cbz	r0, 80048aa <_printf_i+0x1e6>
 80048a6:	1b80      	subs	r0, r0, r6
 80048a8:	6060      	str	r0, [r4, #4]
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	6123      	str	r3, [r4, #16]
 80048ae:	2300      	movs	r3, #0
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048b4:	e7aa      	b.n	800480c <_printf_i+0x148>
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	4632      	mov	r2, r6
 80048ba:	4649      	mov	r1, r9
 80048bc:	4640      	mov	r0, r8
 80048be:	47d0      	blx	sl
 80048c0:	3001      	adds	r0, #1
 80048c2:	d0ad      	beq.n	8004820 <_printf_i+0x15c>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	079b      	lsls	r3, r3, #30
 80048c8:	d413      	bmi.n	80048f2 <_printf_i+0x22e>
 80048ca:	68e0      	ldr	r0, [r4, #12]
 80048cc:	9b03      	ldr	r3, [sp, #12]
 80048ce:	4298      	cmp	r0, r3
 80048d0:	bfb8      	it	lt
 80048d2:	4618      	movlt	r0, r3
 80048d4:	e7a6      	b.n	8004824 <_printf_i+0x160>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4632      	mov	r2, r6
 80048da:	4649      	mov	r1, r9
 80048dc:	4640      	mov	r0, r8
 80048de:	47d0      	blx	sl
 80048e0:	3001      	adds	r0, #1
 80048e2:	d09d      	beq.n	8004820 <_printf_i+0x15c>
 80048e4:	3501      	adds	r5, #1
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	9903      	ldr	r1, [sp, #12]
 80048ea:	1a5b      	subs	r3, r3, r1
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dcf2      	bgt.n	80048d6 <_printf_i+0x212>
 80048f0:	e7eb      	b.n	80048ca <_printf_i+0x206>
 80048f2:	2500      	movs	r5, #0
 80048f4:	f104 0619 	add.w	r6, r4, #25
 80048f8:	e7f5      	b.n	80048e6 <_printf_i+0x222>
 80048fa:	bf00      	nop
 80048fc:	08004cc5 	.word	0x08004cc5
 8004900:	08004cd6 	.word	0x08004cd6

08004904 <__sflush_r>:
 8004904:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490c:	0716      	lsls	r6, r2, #28
 800490e:	4605      	mov	r5, r0
 8004910:	460c      	mov	r4, r1
 8004912:	d454      	bmi.n	80049be <__sflush_r+0xba>
 8004914:	684b      	ldr	r3, [r1, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dc02      	bgt.n	8004920 <__sflush_r+0x1c>
 800491a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	dd48      	ble.n	80049b2 <__sflush_r+0xae>
 8004920:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004922:	2e00      	cmp	r6, #0
 8004924:	d045      	beq.n	80049b2 <__sflush_r+0xae>
 8004926:	2300      	movs	r3, #0
 8004928:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800492c:	682f      	ldr	r7, [r5, #0]
 800492e:	6a21      	ldr	r1, [r4, #32]
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	d030      	beq.n	8004996 <__sflush_r+0x92>
 8004934:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	0759      	lsls	r1, r3, #29
 800493a:	d505      	bpl.n	8004948 <__sflush_r+0x44>
 800493c:	6863      	ldr	r3, [r4, #4]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004942:	b10b      	cbz	r3, 8004948 <__sflush_r+0x44>
 8004944:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800494c:	6a21      	ldr	r1, [r4, #32]
 800494e:	4628      	mov	r0, r5
 8004950:	47b0      	blx	r6
 8004952:	1c43      	adds	r3, r0, #1
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	d106      	bne.n	8004966 <__sflush_r+0x62>
 8004958:	6829      	ldr	r1, [r5, #0]
 800495a:	291d      	cmp	r1, #29
 800495c:	d82b      	bhi.n	80049b6 <__sflush_r+0xb2>
 800495e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <__sflush_r+0x104>)
 8004960:	410a      	asrs	r2, r1
 8004962:	07d6      	lsls	r6, r2, #31
 8004964:	d427      	bmi.n	80049b6 <__sflush_r+0xb2>
 8004966:	2200      	movs	r2, #0
 8004968:	6062      	str	r2, [r4, #4]
 800496a:	04d9      	lsls	r1, r3, #19
 800496c:	6922      	ldr	r2, [r4, #16]
 800496e:	6022      	str	r2, [r4, #0]
 8004970:	d504      	bpl.n	800497c <__sflush_r+0x78>
 8004972:	1c42      	adds	r2, r0, #1
 8004974:	d101      	bne.n	800497a <__sflush_r+0x76>
 8004976:	682b      	ldr	r3, [r5, #0]
 8004978:	b903      	cbnz	r3, 800497c <__sflush_r+0x78>
 800497a:	6560      	str	r0, [r4, #84]	@ 0x54
 800497c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800497e:	602f      	str	r7, [r5, #0]
 8004980:	b1b9      	cbz	r1, 80049b2 <__sflush_r+0xae>
 8004982:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004986:	4299      	cmp	r1, r3
 8004988:	d002      	beq.n	8004990 <__sflush_r+0x8c>
 800498a:	4628      	mov	r0, r5
 800498c:	f7ff fb48 	bl	8004020 <_free_r>
 8004990:	2300      	movs	r3, #0
 8004992:	6363      	str	r3, [r4, #52]	@ 0x34
 8004994:	e00d      	b.n	80049b2 <__sflush_r+0xae>
 8004996:	2301      	movs	r3, #1
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	4602      	mov	r2, r0
 800499e:	1c50      	adds	r0, r2, #1
 80049a0:	d1c9      	bne.n	8004936 <__sflush_r+0x32>
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0c6      	beq.n	8004936 <__sflush_r+0x32>
 80049a8:	2b1d      	cmp	r3, #29
 80049aa:	d001      	beq.n	80049b0 <__sflush_r+0xac>
 80049ac:	2b16      	cmp	r3, #22
 80049ae:	d11e      	bne.n	80049ee <__sflush_r+0xea>
 80049b0:	602f      	str	r7, [r5, #0]
 80049b2:	2000      	movs	r0, #0
 80049b4:	e022      	b.n	80049fc <__sflush_r+0xf8>
 80049b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	e01b      	b.n	80049f6 <__sflush_r+0xf2>
 80049be:	690f      	ldr	r7, [r1, #16]
 80049c0:	2f00      	cmp	r7, #0
 80049c2:	d0f6      	beq.n	80049b2 <__sflush_r+0xae>
 80049c4:	0793      	lsls	r3, r2, #30
 80049c6:	680e      	ldr	r6, [r1, #0]
 80049c8:	bf08      	it	eq
 80049ca:	694b      	ldreq	r3, [r1, #20]
 80049cc:	600f      	str	r7, [r1, #0]
 80049ce:	bf18      	it	ne
 80049d0:	2300      	movne	r3, #0
 80049d2:	eba6 0807 	sub.w	r8, r6, r7
 80049d6:	608b      	str	r3, [r1, #8]
 80049d8:	f1b8 0f00 	cmp.w	r8, #0
 80049dc:	dde9      	ble.n	80049b2 <__sflush_r+0xae>
 80049de:	6a21      	ldr	r1, [r4, #32]
 80049e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049e2:	4643      	mov	r3, r8
 80049e4:	463a      	mov	r2, r7
 80049e6:	4628      	mov	r0, r5
 80049e8:	47b0      	blx	r6
 80049ea:	2800      	cmp	r0, #0
 80049ec:	dc08      	bgt.n	8004a00 <__sflush_r+0xfc>
 80049ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a00:	4407      	add	r7, r0
 8004a02:	eba8 0800 	sub.w	r8, r8, r0
 8004a06:	e7e7      	b.n	80049d8 <__sflush_r+0xd4>
 8004a08:	dfbffffe 	.word	0xdfbffffe

08004a0c <_fflush_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	4605      	mov	r5, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	b913      	cbnz	r3, 8004a1c <_fflush_r+0x10>
 8004a16:	2500      	movs	r5, #0
 8004a18:	4628      	mov	r0, r5
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	b118      	cbz	r0, 8004a26 <_fflush_r+0x1a>
 8004a1e:	6a03      	ldr	r3, [r0, #32]
 8004a20:	b90b      	cbnz	r3, 8004a26 <_fflush_r+0x1a>
 8004a22:	f7ff f8b1 	bl	8003b88 <__sinit>
 8004a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f3      	beq.n	8004a16 <_fflush_r+0xa>
 8004a2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a30:	07d0      	lsls	r0, r2, #31
 8004a32:	d404      	bmi.n	8004a3e <_fflush_r+0x32>
 8004a34:	0599      	lsls	r1, r3, #22
 8004a36:	d402      	bmi.n	8004a3e <_fflush_r+0x32>
 8004a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a3a:	f7ff fae0 	bl	8003ffe <__retarget_lock_acquire_recursive>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4621      	mov	r1, r4
 8004a42:	f7ff ff5f 	bl	8004904 <__sflush_r>
 8004a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a48:	07da      	lsls	r2, r3, #31
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	d4e4      	bmi.n	8004a18 <_fflush_r+0xc>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	059b      	lsls	r3, r3, #22
 8004a52:	d4e1      	bmi.n	8004a18 <_fflush_r+0xc>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f7ff fad3 	bl	8004000 <__retarget_lock_release_recursive>
 8004a5a:	e7dd      	b.n	8004a18 <_fflush_r+0xc>

08004a5c <__swhatbuf_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460c      	mov	r4, r1
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2900      	cmp	r1, #0
 8004a66:	b096      	sub	sp, #88	@ 0x58
 8004a68:	4615      	mov	r5, r2
 8004a6a:	461e      	mov	r6, r3
 8004a6c:	da0d      	bge.n	8004a8a <__swhatbuf_r+0x2e>
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a74:	f04f 0100 	mov.w	r1, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2340      	movne	r3, #64	@ 0x40
 8004a7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004a80:	2000      	movs	r0, #0
 8004a82:	6031      	str	r1, [r6, #0]
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	b016      	add	sp, #88	@ 0x58
 8004a88:	bd70      	pop	{r4, r5, r6, pc}
 8004a8a:	466a      	mov	r2, sp
 8004a8c:	f000 f862 	bl	8004b54 <_fstat_r>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	dbec      	blt.n	8004a6e <__swhatbuf_r+0x12>
 8004a94:	9901      	ldr	r1, [sp, #4]
 8004a96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004a9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004a9e:	4259      	negs	r1, r3
 8004aa0:	4159      	adcs	r1, r3
 8004aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa6:	e7eb      	b.n	8004a80 <__swhatbuf_r+0x24>

08004aa8 <__smakebuf_r>:
 8004aa8:	898b      	ldrh	r3, [r1, #12]
 8004aaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aac:	079d      	lsls	r5, r3, #30
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	d507      	bpl.n	8004ac4 <__smakebuf_r+0x1c>
 8004ab4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	6123      	str	r3, [r4, #16]
 8004abc:	2301      	movs	r3, #1
 8004abe:	6163      	str	r3, [r4, #20]
 8004ac0:	b003      	add	sp, #12
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	ab01      	add	r3, sp, #4
 8004ac6:	466a      	mov	r2, sp
 8004ac8:	f7ff ffc8 	bl	8004a5c <__swhatbuf_r>
 8004acc:	9f00      	ldr	r7, [sp, #0]
 8004ace:	4605      	mov	r5, r0
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7fe ff40 	bl	8003958 <_malloc_r>
 8004ad8:	b948      	cbnz	r0, 8004aee <__smakebuf_r+0x46>
 8004ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ade:	059a      	lsls	r2, r3, #22
 8004ae0:	d4ee      	bmi.n	8004ac0 <__smakebuf_r+0x18>
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	f043 0302 	orr.w	r3, r3, #2
 8004aea:	81a3      	strh	r3, [r4, #12]
 8004aec:	e7e2      	b.n	8004ab4 <__smakebuf_r+0xc>
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004afe:	b15b      	cbz	r3, 8004b18 <__smakebuf_r+0x70>
 8004b00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f837 	bl	8004b78 <_isatty_r>
 8004b0a:	b128      	cbz	r0, 8004b18 <__smakebuf_r+0x70>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	431d      	orrs	r5, r3
 8004b1c:	81a5      	strh	r5, [r4, #12]
 8004b1e:	e7cf      	b.n	8004ac0 <__smakebuf_r+0x18>

08004b20 <memmove>:
 8004b20:	4288      	cmp	r0, r1
 8004b22:	b510      	push	{r4, lr}
 8004b24:	eb01 0402 	add.w	r4, r1, r2
 8004b28:	d902      	bls.n	8004b30 <memmove+0x10>
 8004b2a:	4284      	cmp	r4, r0
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	d807      	bhi.n	8004b40 <memmove+0x20>
 8004b30:	1e43      	subs	r3, r0, #1
 8004b32:	42a1      	cmp	r1, r4
 8004b34:	d008      	beq.n	8004b48 <memmove+0x28>
 8004b36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b3e:	e7f8      	b.n	8004b32 <memmove+0x12>
 8004b40:	4402      	add	r2, r0
 8004b42:	4601      	mov	r1, r0
 8004b44:	428a      	cmp	r2, r1
 8004b46:	d100      	bne.n	8004b4a <memmove+0x2a>
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b52:	e7f7      	b.n	8004b44 <memmove+0x24>

08004b54 <_fstat_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4d07      	ldr	r5, [pc, #28]	@ (8004b74 <_fstat_r+0x20>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4604      	mov	r4, r0
 8004b5c:	4608      	mov	r0, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	602b      	str	r3, [r5, #0]
 8004b62:	f7fc fe15 	bl	8001790 <_fstat>
 8004b66:	1c43      	adds	r3, r0, #1
 8004b68:	d102      	bne.n	8004b70 <_fstat_r+0x1c>
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	b103      	cbz	r3, 8004b70 <_fstat_r+0x1c>
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	bd38      	pop	{r3, r4, r5, pc}
 8004b72:	bf00      	nop
 8004b74:	20000520 	.word	0x20000520

08004b78 <_isatty_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d06      	ldr	r5, [pc, #24]	@ (8004b94 <_isatty_r+0x1c>)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc fe14 	bl	80017b0 <_isatty>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_isatty_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_isatty_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	20000520 	.word	0x20000520

08004b98 <_realloc_r>:
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	4615      	mov	r5, r2
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	b921      	cbnz	r1, 8004bae <_realloc_r+0x16>
 8004ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	4611      	mov	r1, r2
 8004baa:	f7fe bed5 	b.w	8003958 <_malloc_r>
 8004bae:	b92a      	cbnz	r2, 8004bbc <_realloc_r+0x24>
 8004bb0:	f7ff fa36 	bl	8004020 <_free_r>
 8004bb4:	2400      	movs	r4, #0
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	f000 f81a 	bl	8004bf4 <_malloc_usable_size_r>
 8004bc0:	4285      	cmp	r5, r0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	d802      	bhi.n	8004bcc <_realloc_r+0x34>
 8004bc6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bca:	d8f4      	bhi.n	8004bb6 <_realloc_r+0x1e>
 8004bcc:	4629      	mov	r1, r5
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f7fe fec2 	bl	8003958 <_malloc_r>
 8004bd4:	4607      	mov	r7, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d0ec      	beq.n	8004bb4 <_realloc_r+0x1c>
 8004bda:	42b5      	cmp	r5, r6
 8004bdc:	462a      	mov	r2, r5
 8004bde:	4621      	mov	r1, r4
 8004be0:	bf28      	it	cs
 8004be2:	4632      	movcs	r2, r6
 8004be4:	f7ff fa0d 	bl	8004002 <memcpy>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4640      	mov	r0, r8
 8004bec:	f7ff fa18 	bl	8004020 <_free_r>
 8004bf0:	463c      	mov	r4, r7
 8004bf2:	e7e0      	b.n	8004bb6 <_realloc_r+0x1e>

08004bf4 <_malloc_usable_size_r>:
 8004bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bf8:	1f18      	subs	r0, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bfbc      	itt	lt
 8004bfe:	580b      	ldrlt	r3, [r1, r0]
 8004c00:	18c0      	addlt	r0, r0, r3
 8004c02:	4770      	bx	lr

08004c04 <_init>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	bf00      	nop
 8004c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0a:	bc08      	pop	{r3}
 8004c0c:	469e      	mov	lr, r3
 8004c0e:	4770      	bx	lr

08004c10 <_fini>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr
