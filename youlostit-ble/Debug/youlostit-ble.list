
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  000071b0  2**0
                  CONTENTS
  4 .ARM          00000008  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800507c  0800507c  000071b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800507c  0800507c  0000607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08005084  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001b0  08005234  000071b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005234  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b804  00000000  00000000  000071e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217b  00000000  00000000  000129e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  00014b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000773  00000000  00000000  00015568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027583  00000000  00000000  00015cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b84c  00000000  00000000  0003d25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fbf  00000000  00000000  00048aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139a69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003030  00000000  00000000  00139aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  0013cadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ed4 	.word	0x08004ed4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08004ed4 	.word	0x08004ed4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ble_init>:
 int16_t connectionHandler[2] = {-1, -1}; // Little Endian Format for connection handler

 /**
  * Initializes the BLE module with appropriate settings
  */
 void ble_init(){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af02      	add	r7, sp, #8
	 //fetching the reset event
	 rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 8000276:	2006      	movs	r0, #6
 8000278:	f003 fd02 	bl	8003c80 <malloc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b70      	ldr	r3, [pc, #448]	@ (8000444 <ble_init+0x1d4>)
 8000282:	601a      	str	r2, [r3, #0]
	 int res;

	 while(!dataAvailable);
 8000284:	bf00      	nop
 8000286:	4b70      	ldr	r3, [pc, #448]	@ (8000448 <ble_init+0x1d8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <ble_init+0x16>
	 res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 800028e:	4b6d      	ldr	r3, [pc, #436]	@ (8000444 <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2106      	movs	r1, #6
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f905 	bl	80004a4 <fetchBleEvent>
 800029a:	6078      	str	r0, [r7, #4]

	 if(res==BLE_OK){
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d111      	bne.n	80002c6 <ble_init+0x56>
	 res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80002a2:	4b68      	ldr	r3, [pc, #416]	@ (8000444 <ble_init+0x1d4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2206      	movs	r2, #6
 80002a8:	4968      	ldr	r1, [pc, #416]	@ (800044c <ble_init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f984 	bl	80005b8 <checkEventResp>
 80002b0:	6078      	str	r0, [r7, #4]
	 if(res==BLE_OK){
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d106      	bne.n	80002c6 <ble_init+0x56>
		stackInitCompleteFlag|=0x01;
 80002b8:	4b65      	ldr	r3, [pc, #404]	@ (8000450 <ble_init+0x1e0>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b63      	ldr	r3, [pc, #396]	@ (8000450 <ble_init+0x1e0>)
 80002c4:	801a      	strh	r2, [r3, #0]
	 }
	 }
	 HAL_Delay(10);
 80002c6:	200a      	movs	r0, #10
 80002c8:	f001 fdc8 	bl	8001e5c <HAL_Delay>
	 free(rxEvent);
 80002cc:	4b5d      	ldr	r3, [pc, #372]	@ (8000444 <ble_init+0x1d4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 fcdd 	bl	8003c90 <free>

	 //INIT GATT
	 if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 80002d6:	2300      	movs	r3, #0
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2307      	movs	r3, #7
 80002dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000454 <ble_init+0x1e4>)
 80002de:	2104      	movs	r1, #4
 80002e0:	485d      	ldr	r0, [pc, #372]	@ (8000458 <ble_init+0x1e8>)
 80002e2:	f000 fa9f 	bl	8000824 <BLE_command>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d106      	bne.n	80002fa <ble_init+0x8a>
		stackInitCompleteFlag|=0x02;
 80002ec:	4b58      	ldr	r3, [pc, #352]	@ (8000450 <ble_init+0x1e0>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	f043 0302 	orr.w	r3, r3, #2
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	4b56      	ldr	r3, [pc, #344]	@ (8000450 <ble_init+0x1e0>)
 80002f8:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80002fa:	4b52      	ldr	r3, [pc, #328]	@ (8000444 <ble_init+0x1d4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f003 fcc6 	bl	8003c90 <free>

	 //INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	 if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 8000304:	2303      	movs	r3, #3
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	2307      	movs	r3, #7
 800030a:	4a54      	ldr	r2, [pc, #336]	@ (800045c <ble_init+0x1ec>)
 800030c:	2107      	movs	r1, #7
 800030e:	4854      	ldr	r0, [pc, #336]	@ (8000460 <ble_init+0x1f0>)
 8000310:	f000 fa88 	bl	8000824 <BLE_command>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d11b      	bne.n	8000352 <ble_init+0xe2>
		stackInitCompleteFlag|=0x04;
 800031a:	4b4d      	ldr	r3, [pc, #308]	@ (8000450 <ble_init+0x1e0>)
 800031c:	881b      	ldrh	r3, [r3, #0]
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b4a      	ldr	r3, [pc, #296]	@ (8000450 <ble_init+0x1e0>)
 8000326:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000328:	4b46      	ldr	r3, [pc, #280]	@ (8000444 <ble_init+0x1d4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3307      	adds	r3, #7
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	b29a      	uxth	r2, r3
 8000332:	4b4c      	ldr	r3, [pc, #304]	@ (8000464 <ble_init+0x1f4>)
 8000334:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <ble_init+0x1d4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3309      	adds	r3, #9
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29a      	uxth	r2, r3
 8000340:	4b49      	ldr	r3, [pc, #292]	@ (8000468 <ble_init+0x1f8>)
 8000342:	801a      	strh	r2, [r3, #0]
		memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 8000344:	4b3f      	ldr	r3, [pc, #252]	@ (8000444 <ble_init+0x1d4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	330b      	adds	r3, #11
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	b29a      	uxth	r2, r3
 800034e:	4b47      	ldr	r3, [pc, #284]	@ (800046c <ble_init+0x1fc>)
 8000350:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000352:	4b3c      	ldr	r3, [pc, #240]	@ (8000444 <ble_init+0x1d4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f003 fc9a 	bl	8003c90 <free>

	 //SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	 updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 800035c:	4b44      	ldr	r3, [pc, #272]	@ (8000470 <ble_init+0x200>)
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2306      	movs	r3, #6
 8000362:	2200      	movs	r2, #0
 8000364:	4940      	ldr	r1, [pc, #256]	@ (8000468 <ble_init+0x1f8>)
 8000366:	483f      	ldr	r0, [pc, #252]	@ (8000464 <ble_init+0x1f4>)
 8000368:	f000 fb22 	bl	80009b0 <updateCharValue>
	 stackInitCompleteFlag|=0x08;
 800036c:	4b38      	ldr	r3, [pc, #224]	@ (8000450 <ble_init+0x1e0>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <ble_init+0x1e0>)
 8000378:	801a      	strh	r2, [r3, #0]
	 free(rxEvent);
 800037a:	4b32      	ldr	r3, [pc, #200]	@ (8000444 <ble_init+0x1d4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fc86 	bl	8003c90 <free>

	 //INIT AUTH
	 if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 8000384:	2300      	movs	r3, #0
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2307      	movs	r3, #7
 800038a:	4a3a      	ldr	r2, [pc, #232]	@ (8000474 <ble_init+0x204>)
 800038c:	2110      	movs	r1, #16
 800038e:	483a      	ldr	r0, [pc, #232]	@ (8000478 <ble_init+0x208>)
 8000390:	f000 fa48 	bl	8000824 <BLE_command>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d106      	bne.n	80003a8 <ble_init+0x138>
		stackInitCompleteFlag|=0x10;
 800039a:	4b2d      	ldr	r3, [pc, #180]	@ (8000450 <ble_init+0x1e0>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	f043 0310 	orr.w	r3, r3, #16
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <ble_init+0x1e0>)
 80003a6:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003a8:	4b26      	ldr	r3, [pc, #152]	@ (8000444 <ble_init+0x1d4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fc6f 	bl	8003c90 <free>

	 //SET_TX_LEVEL
	 if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 80003b2:	2300      	movs	r3, #0
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2307      	movs	r3, #7
 80003b8:	4a30      	ldr	r2, [pc, #192]	@ (800047c <ble_init+0x20c>)
 80003ba:	2106      	movs	r1, #6
 80003bc:	4830      	ldr	r0, [pc, #192]	@ (8000480 <ble_init+0x210>)
 80003be:	f000 fa31 	bl	8000824 <BLE_command>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <ble_init+0x166>
		stackInitCompleteFlag|=0x20;
 80003c8:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <ble_init+0x1e0>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <ble_init+0x1e0>)
 80003d4:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ble_init+0x1d4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fc58 	bl	8003c90 <free>

	 //SET SCAN RESPONSE DATA
	 if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 80003e0:	2300      	movs	r3, #0
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2307      	movs	r3, #7
 80003e6:	4a27      	ldr	r2, [pc, #156]	@ (8000484 <ble_init+0x214>)
 80003e8:	2124      	movs	r1, #36	@ 0x24
 80003ea:	4827      	ldr	r0, [pc, #156]	@ (8000488 <ble_init+0x218>)
 80003ec:	f000 fa1a 	bl	8000824 <BLE_command>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d106      	bne.n	8000404 <ble_init+0x194>
		stackInitCompleteFlag|=0x40;
 80003f6:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <ble_init+0x1e0>)
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <ble_init+0x1e0>)
 8000402:	801a      	strh	r2, [r3, #0]
	 }
	 free(rxEvent);
 8000404:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <ble_init+0x1d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f003 fc41 	bl	8003c90 <free>

	 //This will start the advertisment,
	 setConnectable();
 800040e:	f000 f98b 	bl	8000728 <setConnectable>

	 //add the nordic UART service
	 addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 8000412:	2207      	movs	r2, #7
 8000414:	491d      	ldr	r1, [pc, #116]	@ (800048c <ble_init+0x21c>)
 8000416:	481e      	ldr	r0, [pc, #120]	@ (8000490 <ble_init+0x220>)
 8000418:	f000 fa50 	bl	80008bc <addService>

	 //add the nordic UART charachteristics
	 addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 800041c:	2310      	movs	r3, #16
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2314      	movs	r3, #20
 8000422:	4a1a      	ldr	r2, [pc, #104]	@ (800048c <ble_init+0x21c>)
 8000424:	491b      	ldr	r1, [pc, #108]	@ (8000494 <ble_init+0x224>)
 8000426:	481c      	ldr	r0, [pc, #112]	@ (8000498 <ble_init+0x228>)
 8000428:	f000 fa80 	bl	800092c <addCharacteristic>
	 addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 800042c:	2304      	movs	r3, #4
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2314      	movs	r3, #20
 8000432:	4a16      	ldr	r2, [pc, #88]	@ (800048c <ble_init+0x21c>)
 8000434:	4919      	ldr	r1, [pc, #100]	@ (800049c <ble_init+0x22c>)
 8000436:	481a      	ldr	r0, [pc, #104]	@ (80004a0 <ble_init+0x230>)
 8000438:	f000 fa78 	bl	800092c <addCharacteristic>

	 if(stackInitCompleteFlag==255){
	   //turn on led blue if everything was fine
	 //  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	 }
	 return;
 800043c:	bf00      	nop
 }
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	200002e4 	.word	0x200002e4
 8000448:	200002e8 	.word	0x200002e8
 800044c:	20000000 	.word	0x20000000
 8000450:	200002e2 	.word	0x200002e2
 8000454:	2000000c 	.word	0x2000000c
 8000458:	20000008 	.word	0x20000008
 800045c:	2000001c 	.word	0x2000001c
 8000460:	20000014 	.word	0x20000014
 8000464:	200001cc 	.word	0x200001cc
 8000468:	200001d0 	.word	0x200001d0
 800046c:	200001d4 	.word	0x200001d4
 8000470:	2000010c 	.word	0x2000010c
 8000474:	20000034 	.word	0x20000034
 8000478:	20000024 	.word	0x20000024
 800047c:	20000044 	.word	0x20000044
 8000480:	2000003c 	.word	0x2000003c
 8000484:	20000070 	.word	0x20000070
 8000488:	2000004c 	.word	0x2000004c
 800048c:	200002d8 	.word	0x200002d8
 8000490:	20000114 	.word	0x20000114
 8000494:	200002e0 	.word	0x200002e0
 8000498:	20000134 	.word	0x20000134
 800049c:	200002dc 	.word	0x200002dc
 80004a0:	20000124 	.word	0x20000124

080004a4 <fetchBleEvent>:
	  if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	  }
	  free(rxEvent);
 }

 int fetchBleEvent(uint8_t *container, int size){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08c      	sub	sp, #48	@ 0x30
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]

   uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 80004ae:	4a3d      	ldr	r2, [pc, #244]	@ (80005a4 <fetchBleEvent+0x100>)
 80004b0:	f107 0318 	add.w	r3, r7, #24
 80004b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b8:	6018      	str	r0, [r3, #0]
 80004ba:	3304      	adds	r3, #4
 80004bc:	7019      	strb	r1, [r3, #0]
   uint8_t slave_header[5];

   //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
   if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80004be:	2140      	movs	r1, #64	@ 0x40
 80004c0:	4839      	ldr	r0, [pc, #228]	@ (80005a8 <fetchBleEvent+0x104>)
 80004c2:	f001 ffcb 	bl	800245c <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d065      	beq.n	8000598 <fetchBleEvent+0xf4>

   HAL_Delay(5);
 80004cc:	2005      	movs	r0, #5
 80004ce:	f001 fcc5 	bl	8001e5c <HAL_Delay>
   //PIN_CS of SPI2 LOW
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d8:	4834      	ldr	r0, [pc, #208]	@ (80005ac <fetchBleEvent+0x108>)
 80004da:	f001 ffd7 	bl	800248c <HAL_GPIO_WritePin>

   //SPI2 in this case, it could change according to the board
   //we send a byte containing a request of reading followed by 4 dummy bytes
   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 80004de:	f107 0210 	add.w	r2, r7, #16
 80004e2:	f107 0118 	add.w	r1, r7, #24
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2305      	movs	r3, #5
 80004ec:	4830      	ldr	r0, [pc, #192]	@ (80005b0 <fetchBleEvent+0x10c>)
 80004ee:	f003 f841 	bl	8003574 <HAL_SPI_TransmitReceive>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	482c      	ldr	r0, [pc, #176]	@ (80005ac <fetchBleEvent+0x108>)
 80004fa:	f001 ffc7 	bl	800248c <HAL_GPIO_WritePin>
   HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
 8000500:	f001 fcac 	bl	8001e5c <HAL_Delay>
   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <fetchBleEvent+0x108>)
 800050c:	f001 ffbe 	bl	800248c <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000510:	f107 0210 	add.w	r2, r7, #16
 8000514:	f107 0118 	add.w	r1, r7, #24
 8000518:	2301      	movs	r3, #1
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2305      	movs	r3, #5
 800051e:	4824      	ldr	r0, [pc, #144]	@ (80005b0 <fetchBleEvent+0x10c>)
 8000520:	f003 f828 	bl	8003574 <HAL_SPI_TransmitReceive>

   //let's get the size of data available
   int dataSize;
   dataSize=(slave_header[3]|slave_header[4]<<8);
 8000524:	7cfb      	ldrb	r3, [r7, #19]
 8000526:	461a      	mov	r2, r3
 8000528:	7d3b      	ldrb	r3, [r7, #20]
 800052a:	021b      	lsls	r3, r3, #8
 800052c:	4313      	orrs	r3, r2
 800052e:	627b      	str	r3, [r7, #36]	@ 0x24
   int i;
   char dummy=0xff;
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	73fb      	strb	r3, [r7, #15]

   if(dataSize>size){
 8000534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	dd01      	ble.n	8000540 <fetchBleEvent+0x9c>
	   dataSize=size;
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
   }

   if(dataSize>0){
 8000540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dd1f      	ble.n	8000586 <fetchBleEvent+0xe2>
		 //let's fill the get the bytes availables and insert them into the container variable
		   for(i=0;i<dataSize;i++){
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
 800054a:	e00d      	b.n	8000568 <fetchBleEvent+0xc4>
		   HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	441a      	add	r2, r3
 8000552:	f107 010f 	add.w	r1, r7, #15
 8000556:	2301      	movs	r3, #1
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2301      	movs	r3, #1
 800055c:	4814      	ldr	r0, [pc, #80]	@ (80005b0 <fetchBleEvent+0x10c>)
 800055e:	f003 f809 	bl	8003574 <HAL_SPI_TransmitReceive>
		   for(i=0;i<dataSize;i++){
 8000562:	6a3b      	ldr	r3, [r7, #32]
 8000564:	3301      	adds	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3a      	ldr	r2, [r7, #32]
 800056a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056c:	429a      	cmp	r2, r3
 800056e:	dbed      	blt.n	800054c <fetchBleEvent+0xa8>

		   }
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	480d      	ldr	r0, [pc, #52]	@ (80005ac <fetchBleEvent+0x108>)
 8000578:	f001 ff88 	bl	800248c <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
		 return -1;
	   }

   //let's stop the SPI2
   dataAvailable=0;
 800057c:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <fetchBleEvent+0x110>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
   return BLE_OK;
 8000582:	2300      	movs	r3, #0
 8000584:	e00a      	b.n	800059c <fetchBleEvent+0xf8>
		   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 8000586:	2201      	movs	r2, #1
 8000588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <fetchBleEvent+0x108>)
 800058e:	f001 ff7d 	bl	800248c <HAL_GPIO_WritePin>
		 return -1;
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	e001      	b.n	800059c <fetchBleEvent+0xf8>
   }else{
   return -2;
 8000598:	f06f 0301 	mvn.w	r3, #1
   }
 }
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	@ 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	08004eec 	.word	0x08004eec
 80005a8:	48001000 	.word	0x48001000
 80005ac:	48000c00 	.word	0x48000c00
 80005b0:	200002ec 	.word	0x200002ec
 80005b4:	200002e8 	.word	0x200002e8

080005b8 <checkEventResp>:


 int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
	 int j=0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]

	 for(j=0;j<size;j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e00f      	b.n	80005ee <checkEventResp+0x36>

		 if(event[j]!=reference[j]){
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	68b9      	ldr	r1, [r7, #8]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d002      	beq.n	80005e8 <checkEventResp+0x30>
			 return -1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e007      	b.n	80005f8 <checkEventResp+0x40>
	 for(j=0;j<size;j++){
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3301      	adds	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	dbeb      	blt.n	80005ce <checkEventResp+0x16>
		 }
	 }

 return BLE_OK;
 80005f6:	2300      	movs	r3, #0
 }
 80005f8:	4618      	mov	r0, r3
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <sendCommand>:

 void sendCommand(uint8_t *command,int size){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af02      	add	r7, sp, #8
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]

	   uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 800060e:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <sendCommand+0x88>)
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000618:	6018      	str	r0, [r3, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	7019      	strb	r1, [r3, #0]
	   uint8_t slave_header[5];

	   int result;

	 do{
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <sendCommand+0x8c>)
 8000626:	f001 ff31 	bl	800248c <HAL_GPIO_WritePin>

	   //wait until it is possible to write
	   //while(!dataAvailable);
	   HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 800062a:	f107 0208 	add.w	r2, r7, #8
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2305      	movs	r3, #5
 8000638:	4816      	ldr	r0, [pc, #88]	@ (8000694 <sendCommand+0x90>)
 800063a:	f002 ff9b 	bl	8003574 <HAL_SPI_TransmitReceive>
	   int bufferSize=(slave_header[2]<<8|slave_header[1]);
 800063e:	7abb      	ldrb	r3, [r7, #10]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	7a7a      	ldrb	r2, [r7, #9]
 8000644:	4313      	orrs	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
	   if(bufferSize>=size){
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	429a      	cmp	r2, r3
 800064e:	db09      	blt.n	8000664 <sendCommand+0x60>
		 HAL_SPI_Transmit(&hspi3,command,size,1);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	480e      	ldr	r0, [pc, #56]	@ (8000694 <sendCommand+0x90>)
 800065a:	f002 fe16 	bl	800328a <HAL_SPI_Transmit>
		 result=0;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
 8000662:	e002      	b.n	800066a <sendCommand+0x66>
	   }else{
		 result=-1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	61fb      	str	r3, [r7, #28]
	   }
	   HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <sendCommand+0x8c>)
 8000672:	f001 ff0b 	bl	800248c <HAL_GPIO_WritePin>
	   dataAvailable=0;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <sendCommand+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	 }while(result!=0);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1cd      	bne.n	800061e <sendCommand+0x1a>

 }
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08004ef4 	.word	0x08004ef4
 8000690:	48000c00 	.word	0x48000c00
 8000694:	200002ec 	.word	0x200002ec
 8000698:	200002e8 	.word	0x200002e8

0800069c <catchBLE>:

 void catchBLE(uint8_t * byte1, uint8_t * byte2){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	 int result=fetchBleEvent(buffer,127);
 80006a6:	217f      	movs	r1, #127	@ 0x7f
 80006a8:	481a      	ldr	r0, [pc, #104]	@ (8000714 <catchBLE+0x78>)
 80006aa:	f7ff fefb 	bl	80004a4 <fetchBleEvent>
 80006ae:	60f8      	str	r0, [r7, #12]
	 if(result==BLE_OK){
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d12a      	bne.n	800070c <catchBLE+0x70>
		 if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 80006b6:	2203      	movs	r2, #3
 80006b8:	4917      	ldr	r1, [pc, #92]	@ (8000718 <catchBLE+0x7c>)
 80006ba:	4816      	ldr	r0, [pc, #88]	@ (8000714 <catchBLE+0x78>)
 80006bc:	f7ff ff7c 	bl	80005b8 <checkEventResp>
			 //setConnectable();
		 }
		 if(checkEventResp(buffer, EVENT_CONNECTED, 5)==BLE_OK){
 80006c0:	2205      	movs	r2, #5
 80006c2:	4916      	ldr	r1, [pc, #88]	@ (800071c <catchBLE+0x80>)
 80006c4:	4813      	ldr	r0, [pc, #76]	@ (8000714 <catchBLE+0x78>)
 80006c6:	f7ff ff77 	bl	80005b8 <checkEventResp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d109      	bne.n	80006e4 <catchBLE+0x48>
			 // Little Endian Format
			 *(connectionHandler) = buffer[5];
 80006d0:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <catchBLE+0x78>)
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <catchBLE+0x84>)
 80006d8:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <catchBLE+0x78>)
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	b21a      	sxth	r2, r3
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <catchBLE+0x84>)
 80006e2:	805a      	strh	r2, [r3, #2]
		 }
		 if (checkEventResp(buffer, EVENT_GATT_CHANGED, 6)){
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <catchBLE+0x88>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2206      	movs	r2, #6
 80006ea:	4619      	mov	r1, r3
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <catchBLE+0x78>)
 80006ee:	f7ff ff63 	bl	80005b8 <checkEventResp>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d009      	beq.n	800070c <catchBLE+0x70>
			 *(connectionHandler) = buffer[5];
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <catchBLE+0x78>)
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <catchBLE+0x84>)
 8000700:	801a      	strh	r2, [r3, #0]
			 *(connectionHandler + 1) = buffer[6];
 8000702:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <catchBLE+0x78>)
 8000704:	799b      	ldrb	r3, [r3, #6]
 8000706:	b21a      	sxth	r2, r3
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <catchBLE+0x84>)
 800070a:	805a      	strh	r2, [r3, #2]
		 }
	 }else{
		 //something bad is happening if I am here
	 }
 }
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001d8 	.word	0x200001d8
 8000718:	200000ec 	.word	0x200000ec
 800071c:	200000f8 	.word	0x200000f8
 8000720:	20000144 	.word	0x20000144
 8000724:	200000fd 	.word	0x200000fd

08000728 <setConnectable>:

 void setConnectable(){
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 		uint8_t* rxEvent;
 		//Start advertising
 		uint8_t *localname;
 		int res;
 		localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 800072e:	200b      	movs	r0, #11
 8000730:	f003 faa6 	bl	8003c80 <malloc>
 8000734:	4603      	mov	r3, r0
 8000736:	60fb      	str	r3, [r7, #12]
 		memcpy(localname,deviceName,sizeof(deviceName));
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4a36      	ldr	r2, [pc, #216]	@ (8000814 <setConnectable+0xec>)
 800073c:	6810      	ldr	r0, [r2, #0]
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	8892      	ldrh	r2, [r2, #4]
 8000742:	809a      	strh	r2, [r3, #4]
 		localname[sizeof(deviceName)+1]=0x00;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3307      	adds	r3, #7
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+2]=0x00;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3308      	adds	r3, #8
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+3]=0x00;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3309      	adds	r3, #9
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)+4]=0x00;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	330a      	adds	r3, #10
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
 		localname[sizeof(deviceName)]=0x00;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3306      	adds	r3, #6
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]


 		ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 800076c:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <setConnectable+0xf0>)
 800076e:	2207      	movs	r2, #7
 8000770:	72da      	strb	r2, [r3, #11]
 		ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 8000772:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <setConnectable+0xf0>)
 8000774:	2214      	movs	r2, #20
 8000776:	70da      	strb	r2, [r3, #3]

 		uint8_t *discoverableCommand;
 		discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000778:	2018      	movs	r0, #24
 800077a:	f003 fa81 	bl	8003c80 <malloc>
 800077e:	4603      	mov	r3, r0
 8000780:	60bb      	str	r3, [r7, #8]
 		memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4a24      	ldr	r2, [pc, #144]	@ (8000818 <setConnectable+0xf0>)
 8000786:	461c      	mov	r4, r3
 8000788:	4613      	mov	r3, r2
 800078a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800078c:	6020      	str	r0, [r4, #0]
 800078e:	6061      	str	r1, [r4, #4]
 8000790:	60a2      	str	r2, [r4, #8]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	7323      	strb	r3, [r4, #12]
 		memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	330d      	adds	r3, #13
 800079a:	220b      	movs	r2, #11
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fd97 	bl	80042d2 <memcpy>

 		// remove existing buffer content
 		rxEvent=(uint8_t*)malloc(7);
 80007a4:	2007      	movs	r0, #7
 80007a6:	f003 fa6b 	bl	8003c80 <malloc>
 80007aa:	4603      	mov	r3, r0
 80007ac:	607b      	str	r3, [r7, #4]
 		res=fetchBleEvent(rxEvent,7);
 80007ae:	2107      	movs	r1, #7
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe77 	bl	80004a4 <fetchBleEvent>
 80007b6:	6038      	str	r0, [r7, #0]

 		// send the command to make the peripheral discoverable
 		sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80007b8:	2118      	movs	r1, #24
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f7ff ff22 	bl	8000604 <sendCommand>
 		HAL_Delay(100);
 80007c0:	2064      	movs	r0, #100	@ 0x64
 80007c2:	f001 fb4b 	bl	8001e5c <HAL_Delay>
 		res=fetchBleEvent(rxEvent,7);
 80007c6:	2107      	movs	r1, #7
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe6b 	bl	80004a4 <fetchBleEvent>
 80007ce:	6038      	str	r0, [r7, #0]
 		if(res==BLE_OK){
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10e      	bne.n	80007f4 <setConnectable+0xcc>
 		   if(checkEventResp(rxEvent, ACI_GAP_SET_DISCOVERABLE_COMPLETE, 7)==BLE_OK){
 80007d6:	2207      	movs	r2, #7
 80007d8:	4910      	ldr	r1, [pc, #64]	@ (800081c <setConnectable+0xf4>)
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff feec 	bl	80005b8 <checkEventResp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <setConnectable+0xcc>
 			  stackInitCompleteFlag|=0x80;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <setConnectable+0xf8>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <setConnectable+0xf8>)
 80007f2:	801a      	strh	r2, [r3, #0]
 		   }
 		}
 		free(rxEvent);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f003 fa4b 	bl	8003c90 <free>
 		free(discoverableCommand);
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	f003 fa48 	bl	8003c90 <free>
 		free(localname);
 8000800:	68f8      	ldr	r0, [r7, #12]
 8000802:	f003 fa45 	bl	8003c90 <free>
 		HAL_Delay(10);
 8000806:	200a      	movs	r0, #10
 8000808:	f001 fb28 	bl	8001e5c <HAL_Delay>
  }
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bd90      	pop	{r4, r7, pc}
 8000814:	2000010c 	.word	0x2000010c
 8000818:	20000078 	.word	0x20000078
 800081c:	20000088 	.word	0x20000088
 8000820:	200002e2 	.word	0x200002e2

08000824 <BLE_command>:
  * @param sizeRes Expected size of the response result.
  * @param returnHandles Number of handles expected in the response (each handle occupies 2 bytes).
  * @return int Returns BLE_OK if the command was successfully executed and the event response is valid,
  *             or an error code if something went wrong.
  */
 int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]
		int response;

		sendCommand(command,size);
 8000832:	68b9      	ldr	r1, [r7, #8]
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f7ff fee5 	bl	8000604 <sendCommand>
		rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	005a      	lsls	r2, r3, #1
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fa1c 	bl	8003c80 <malloc>
 8000848:	4603      	mov	r3, r0
 800084a:	461a      	mov	r2, r3
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <BLE_command+0x90>)
 800084e:	601a      	str	r2, [r3, #0]

		long contatore=0;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000854:	e007      	b.n	8000866 <BLE_command+0x42>
			contatore++;
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3301      	adds	r3, #1
 800085a:	613b      	str	r3, [r7, #16]
			if(contatore>30000){
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000862:	4293      	cmp	r3, r2
 8000864:	dc07      	bgt.n	8000876 <BLE_command+0x52>
		while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000866:	2140      	movs	r1, #64	@ 0x40
 8000868:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <BLE_command+0x94>)
 800086a:	f001 fdf7 	bl	800245c <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f0      	beq.n	8000856 <BLE_command+0x32>
 8000874:	e000      	b.n	8000878 <BLE_command+0x54>
				break;
 8000876:	bf00      	nop
			}
		}


		response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <BLE_command+0x90>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	005a      	lsls	r2, r3, #1
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4619      	mov	r1, r3
 8000886:	f7ff fe0d 	bl	80004a4 <fetchBleEvent>
 800088a:	6178      	str	r0, [r7, #20]
		if(response==BLE_OK){
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d107      	bne.n	80008a2 <BLE_command+0x7e>
			response=checkEventResp(rxEvent,result,sizeRes);
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <BLE_command+0x90>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe8c 	bl	80005b8 <checkEventResp>
 80008a0:	6178      	str	r0, [r7, #20]
		}
		HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 fada 	bl	8001e5c <HAL_Delay>


	 return response;
 80008a8:	697b      	ldr	r3, [r7, #20]
 }
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002e4 	.word	0x200002e4
 80008b8:	48001000 	.word	0x48001000

080008bc <addService>:

 void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]


	 //memcpy
	 memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <addService+0x60>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 fcff 	bl	80042d2 <memcpy>
	 ADD_PRIMARY_SERVICE[22]=attributes;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <addService+0x64>)
 80008da:	759a      	strb	r2, [r3, #22]
		if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80008dc:	2301      	movs	r3, #1
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2307      	movs	r3, #7
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <addService+0x68>)
 80008e4:	2117      	movs	r1, #23
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <addService+0x64>)
 80008e8:	f7ff ff9c 	bl	8000824 <BLE_command>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d10a      	bne.n	8000908 <addService+0x4c>
			handle[0]=rxEvent[7];
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <addService+0x6c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	79da      	ldrb	r2, [r3, #7]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	701a      	strb	r2, [r3, #0]
			handle[1]=rxEvent[8];
 80008fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <addService+0x6c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3301      	adds	r3, #1
 8000904:	7a12      	ldrb	r2, [r2, #8]
 8000906:	701a      	strb	r2, [r3, #0]
		 }
		free(rxEvent);
 8000908:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <addService+0x6c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f9bf 	bl	8003c90 <free>
 }
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000095 	.word	0x20000095
 8000920:	20000090 	.word	0x20000090
 8000924:	200000a8 	.word	0x200000a8
 8000928:	200002e4 	.word	0x200002e4

0800092c <addCharacteristic>:

 void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	70fb      	strb	r3, [r7, #3]
	 memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <addCharacteristic+0x74>)
 800093c:	2210      	movs	r2, #16
 800093e:	68f9      	ldr	r1, [r7, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	f003 fcc6 	bl	80042d2 <memcpy>

	 ADD_CUSTOM_CHAR[4]= handleService[0];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <addCharacteristic+0x78>)
 800094c:	711a      	strb	r2, [r3, #4]
	 ADD_CUSTOM_CHAR[5]= handleService[1];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	785a      	ldrb	r2, [r3, #1]
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <addCharacteristic+0x78>)
 8000954:	715a      	strb	r2, [r3, #5]
	 ADD_CUSTOM_CHAR[23]= maxsize;
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <addCharacteristic+0x78>)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	75d3      	strb	r3, [r2, #23]
	 ADD_CUSTOM_CHAR[25]= proprieties;
 800095c:	4a11      	ldr	r2, [pc, #68]	@ (80009a4 <addCharacteristic+0x78>)
 800095e:	7e3b      	ldrb	r3, [r7, #24]
 8000960:	7653      	strb	r3, [r2, #25]
	 if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 8000962:	2301      	movs	r3, #1
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2307      	movs	r3, #7
 8000968:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <addCharacteristic+0x7c>)
 800096a:	211e      	movs	r1, #30
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <addCharacteristic+0x78>)
 800096e:	f7ff ff59 	bl	8000824 <BLE_command>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d10a      	bne.n	800098e <addCharacteristic+0x62>
		 handleChar[0]=rxEvent[7];
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <addCharacteristic+0x80>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79da      	ldrb	r2, [r3, #7]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	701a      	strb	r2, [r3, #0]
		 handleChar[1]=rxEvent[8];
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <addCharacteristic+0x80>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	7a12      	ldrb	r2, [r2, #8]
 800098c:	701a      	strb	r2, [r3, #0]
	 }
	 free(rxEvent);
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <addCharacteristic+0x80>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f003 f97c 	bl	8003c90 <free>
 }
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000b7 	.word	0x200000b7
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	200000d0 	.word	0x200000d0
 80009ac:	200002e4 	.word	0x200002e4

080009b0 <updateCharValue>:

 void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	 UPDATE_CHAR[3]=size+6;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	3306      	adds	r3, #6
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <updateCharValue+0x9c>)
 80009c8:	70da      	strb	r2, [r3, #3]
	 UPDATE_CHAR[4]=handleService[0];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <updateCharValue+0x9c>)
 80009d0:	711a      	strb	r2, [r3, #4]
	 UPDATE_CHAR[5]=handleService[1];
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	785a      	ldrb	r2, [r3, #1]
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <updateCharValue+0x9c>)
 80009d8:	715a      	strb	r2, [r3, #5]
	 UPDATE_CHAR[6]=handleChar[0];
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <updateCharValue+0x9c>)
 80009e0:	719a      	strb	r2, [r3, #6]
	 UPDATE_CHAR[7]=handleChar[1];
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	785a      	ldrb	r2, [r3, #1]
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <updateCharValue+0x9c>)
 80009e8:	71da      	strb	r2, [r3, #7]
	 UPDATE_CHAR[8]=offset;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <updateCharValue+0x9c>)
 80009f0:	721a      	strb	r2, [r3, #8]
	 UPDATE_CHAR[9]=size;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <updateCharValue+0x9c>)
 80009f8:	725a      	strb	r2, [r3, #9]

	 uint8_t* commandComplete;
	 commandComplete=(uint8_t*)malloc(10+size);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	330a      	adds	r3, #10
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 f93e 	bl	8003c80 <malloc>
 8000a04:	4603      	mov	r3, r0
 8000a06:	617b      	str	r3, [r7, #20]
	 memcpy(commandComplete,UPDATE_CHAR,10);
 8000a08:	220a      	movs	r2, #10
 8000a0a:	4910      	ldr	r1, [pc, #64]	@ (8000a4c <updateCharValue+0x9c>)
 8000a0c:	6978      	ldr	r0, [r7, #20]
 8000a0e:	f003 fc60 	bl	80042d2 <memcpy>
	 memcpy(commandComplete+10,data,size);
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	330a      	adds	r3, #10
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	6a39      	ldr	r1, [r7, #32]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fc59 	bl	80042d2 <memcpy>

	 BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f103 010a 	add.w	r1, r3, #10
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <updateCharValue+0xa0>)
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff fef8 	bl	8000824 <BLE_command>

	 free(commandComplete);
 8000a34:	6978      	ldr	r0, [r7, #20]
 8000a36:	f003 f92b 	bl	8003c90 <free>
	 free(rxEvent);
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <updateCharValue+0xa4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 f926 	bl	8003c90 <free>
 }
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200000d8 	.word	0x200000d8
 8000a50:	200000d0 	.word	0x200000d0
 8000a54:	200002e4 	.word	0x200002e4

08000a58 <disconnectBLE>:

 /**
  * @brief Disconnects the peripheral from the central
 */
 void disconnectBLE(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
	 if (connectionHandler[0] == -1 && connectionHandler[1] == -1){
 8000a5e:	4b24      	ldr	r3, [pc, #144]	@ (8000af0 <disconnectBLE+0x98>)
 8000a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d105      	bne.n	8000a76 <disconnectBLE+0x1e>
 8000a6a:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <disconnectBLE+0x98>)
 8000a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d037      	beq.n	8000ae6 <disconnectBLE+0x8e>
		// should not be -1
		return;
	 }
	 uint8_t command[7];
	 memcpy(command, DISCONNECT, 4);
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <disconnectBLE+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	607b      	str	r3, [r7, #4]
	 command[4] = connectionHandler[0];
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <disconnectBLE+0x98>)
 8000a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	723b      	strb	r3, [r7, #8]
	 command[5] = connectionHandler[1];
 8000a86:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <disconnectBLE+0x98>)
 8000a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	727b      	strb	r3, [r7, #9]
	 command[6] = 0x13;
 8000a90:	2313      	movs	r3, #19
 8000a92:	72bb      	strb	r3, [r7, #10]
	 if(BLE_command(command,sizeof(command),EVENT_DISCONNECT_PENDING,7,0)==BLE_OK){
 8000a94:	1d38      	adds	r0, r7, #4
 8000a96:	2300      	movs	r3, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <disconnectBLE+0xa0>)
 8000a9e:	2107      	movs	r1, #7
 8000aa0:	f7ff fec0 	bl	8000824 <BLE_command>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d11e      	bne.n	8000ae8 <disconnectBLE+0x90>
		 int result=fetchBleEvent(buffer,127);
 8000aaa:	217f      	movs	r1, #127	@ 0x7f
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <disconnectBLE+0xa4>)
 8000aae:	f7ff fcf9 	bl	80004a4 <fetchBleEvent>
 8000ab2:	60f8      	str	r0, [r7, #12]
		 if(result==BLE_OK){
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10f      	bne.n	8000ada <disconnectBLE+0x82>
			  if(checkEventResp(buffer,EVENT_DISCONNECTED,4)==BLE_OK){
 8000aba:	2204      	movs	r2, #4
 8000abc:	4910      	ldr	r1, [pc, #64]	@ (8000b00 <disconnectBLE+0xa8>)
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <disconnectBLE+0xa4>)
 8000ac0:	f7ff fd7a 	bl	80005b8 <checkEventResp>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d107      	bne.n	8000ada <disconnectBLE+0x82>
				  //setConnectable();
				  connectionHandler[0] = -1;
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <disconnectBLE+0x98>)
 8000acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad0:	801a      	strh	r2, [r3, #0]
				  connectionHandler[1] = -1;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <disconnectBLE+0x98>)
 8000ad4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad8:	805a      	strh	r2, [r3, #2]
			  }
		 }
	 free(rxEvent);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <disconnectBLE+0xac>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f003 f8d6 	bl	8003c90 <free>
 8000ae4:	e000      	b.n	8000ae8 <disconnectBLE+0x90>
		return;
 8000ae6:	bf00      	nop
	 }
 }
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000144 	.word	0x20000144
 8000af4:	200000e8 	.word	0x200000e8
 8000af8:	200000f0 	.word	0x200000f0
 8000afc:	200001d8 	.word	0x200001d8
 8000b00:	200000ec 	.word	0x200000ec
 8000b04:	200002e4 	.word	0x200002e4

08000b08 <setDiscoverability>:
 /**
  * DO NOT CHANGE FUNCTION definition
  * @brief Sets the discoverability of the peripheral
  * @param mode 0 => Non Discoverable, 1 => Discoverable
  * */
 void setDiscoverability(uint8_t mode){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	 if (mode == 1){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d102      	bne.n	8000b1e <setDiscoverability+0x16>
		 setConnectable();
 8000b18:	f7ff fe06 	bl	8000728 <setConnectable>
		 free(rxEvent);
	 }
	 else{
		 // Do nothing
	 }
 }
 8000b1c:	e00f      	b.n	8000b3e <setDiscoverability+0x36>
	 else if (mode == 0){
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10c      	bne.n	8000b3e <setDiscoverability+0x36>
		 if(BLE_command(ACI_GAP_SET_NON_DISCOVERABLE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE),ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE,sizeof(ACI_GAP_SET_NON_DISCOVERABLE_COMPLETE),0)==BLE_OK){
 8000b24:	2300      	movs	r3, #0
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2307      	movs	r3, #7
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <setDiscoverability+0x40>)
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <setDiscoverability+0x44>)
 8000b30:	f7ff fe78 	bl	8000824 <BLE_command>
		 free(rxEvent);
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <setDiscoverability+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f8a9 	bl	8003c90 <free>
 }
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000104 	.word	0x20000104
 8000b4c:	20000100 	.word	0x20000100
 8000b50:	200002e4 	.word	0x200002e4

08000b54 <i2c_init>:
 *
*/

unsigned int in = 0;

void i2c_init() {
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	// Turn on Clock for I2C
	RCC->APB1ENR1 |= RCC_APB1ENR1_I2C2EN;
 8000b58:	4b65      	ldr	r3, [pc, #404]	@ (8000cf0 <i2c_init+0x19c>)
 8000b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5c:	4a64      	ldr	r2, [pc, #400]	@ (8000cf0 <i2c_init+0x19c>)
 8000b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b62:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000b64:	4b62      	ldr	r3, [pc, #392]	@ (8000cf0 <i2c_init+0x19c>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a61      	ldr	r2, [pc, #388]	@ (8000cf0 <i2c_init+0x19c>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// Configure GPIO
	// Set GPIO to Alternative function mode
	GPIOB->MODER &= ~GPIO_MODER_MODE10;
 8000b70:	4b60      	ldr	r3, [pc, #384]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a5f      	ldr	r2, [pc, #380]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b76:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000b7a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE10_1;
 8000b7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b86:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~GPIO_MODER_MODE11;
 8000b88:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a59      	ldr	r2, [pc, #356]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b8e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b92:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODE11_1;
 8000b94:	4b57      	ldr	r3, [pc, #348]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a56      	ldr	r2, [pc, #344]	@ (8000cf4 <i2c_init+0x1a0>)
 8000b9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b9e:	6013      	str	r3, [r2, #0]

	/* Configure the GPIO output as push pull (transistor for high and low) */
	GPIOB->OTYPER |= GPIO_OTYPER_OT11;
 8000ba0:	4b54      	ldr	r3, [pc, #336]	@ (8000cf4 <i2c_init+0x1a0>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4a53      	ldr	r2, [pc, #332]	@ (8000cf4 <i2c_init+0x1a0>)
 8000ba6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000baa:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= GPIO_OTYPER_OT10;
 8000bac:	4b51      	ldr	r3, [pc, #324]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	4a50      	ldr	r2, [pc, #320]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb6:	6053      	str	r3, [r2, #4]

	/* Disable the internal pull-up and pull-down resistors */
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD11;
 8000bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bbe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bc2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD11_1;
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bce:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPD10;
 8000bd0:	4b48      	ldr	r3, [pc, #288]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	4a47      	ldr	r2, [pc, #284]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bd6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000bda:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD10_1;
 8000bdc:	4b45      	ldr	r3, [pc, #276]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4a44      	ldr	r2, [pc, #272]	@ (8000cf4 <i2c_init+0x1a0>)
 8000be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be6:	60d3      	str	r3, [r2, #12]

	/* Configure the GPIO to use high speed mode */
	GPIOB->OSPEEDR |= (0x2 << GPIO_OSPEEDR_OSPEED10_Pos);
 8000be8:	4b42      	ldr	r3, [pc, #264]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	4a41      	ldr	r2, [pc, #260]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf2:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x2 << GPIO_OSPEEDR_OSPEED11_Pos);
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8000cf4 <i2c_init+0x1a0>)
 8000bfa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bfe:	6093      	str	r3, [r2, #8]

	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL11;
 8000c00:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c04:	4a3b      	ldr	r2, [pc, #236]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000c0a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL11_Pos);//GPIO_AFRH_AFSEL11_2;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c10:	4a38      	ldr	r2, [pc, #224]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c16:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~GPIO_AFRH_AFSEL10;
 8000c18:	4b36      	ldr	r3, [pc, #216]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c1c:	4a35      	ldr	r2, [pc, #212]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c22:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4 << GPIO_AFRH_AFSEL10_Pos);//GPIO_AFRH_AFSEL10_2;
 8000c24:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c28:	4a32      	ldr	r2, [pc, #200]	@ (8000cf4 <i2c_init+0x1a0>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2e:	6253      	str	r3, [r2, #36]	@ 0x24

	// Configure I2C
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000c30:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a30      	ldr	r2, [pc, #192]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c36:	f023 0301 	bic.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]


	// Turn on Master Mode timers
	I2C2->TIMINGR |= I2C_TIMINGR_SCLH;
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c42:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 8000c46:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= I2C_TIMINGR_SCLL;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c4e:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8000c52:	6113      	str	r3, [r2, #16]

	// Set BAUD rate to 400khz
	// prescaler
	I2C2->TIMINGR |= (1 << I2C_TIMINGR_PRESC_Pos);//(0 << I2C_TIMINGR_PRESC_Pos);
 8000c54:	4b28      	ldr	r3, [pc, #160]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	4a27      	ldr	r2, [pc, #156]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	6113      	str	r3, [r2, #16]
	// low cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLL;
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a24      	ldr	r2, [pc, #144]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c6a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x13 << I2C_TIMINGR_SCLL_Pos);
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c72:	f043 0313 	orr.w	r3, r3, #19
 8000c76:	6113      	str	r3, [r2, #16]
	// high cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLH;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000c82:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0xF << I2C_TIMINGR_SCLH_Pos);
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c8a:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000c8e:	6113      	str	r3, [r2, #16]
	// data hold cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SDADEL;
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c96:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c9a:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x2 << I2C_TIMINGR_SDADEL_Pos);
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <i2c_init+0x1a4>)
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	4a15      	ldr	r2, [pc, #84]	@ (8000cf8 <i2c_init+0x1a4>)
 8000ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca6:	6113      	str	r3, [r2, #16]
	// data setup cycles
	I2C2->TIMINGR &= ~I2C_TIMINGR_SCLDEL;
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <i2c_init+0x1a4>)
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	4a12      	ldr	r2, [pc, #72]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000cb2:	6113      	str	r3, [r2, #16]
	I2C2->TIMINGR |= (0x4 << I2C_TIMINGR_SCLDEL_Pos);
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cbe:	6113      	str	r3, [r2, #16]

	// Set slave byte control
	//I2C2->CR1 |= I2C_CR1_SBC;

	// Enable Reload
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cca:	6053      	str	r3, [r2, #4]

	// Turn it to 7 bit addressing mode
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cd2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000cd6:	6053      	str	r3, [r2, #4]
//	I2C2->CR1 |= I2C_CR1_ADDRIE;
//	I2C2->CR1 |= I2C_CR1_RXIE;
//	I2C2->CR1 |= I2C_CR1_TXIE;

	// Enable peripheral
	I2C2->CR1 |= I2C_CR1_PE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a06      	ldr	r2, [pc, #24]	@ (8000cf8 <i2c_init+0x1a4>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6013      	str	r3, [r2, #0]

}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	40005800 	.word	0x40005800

08000cfc <i2c_transaction>:

uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	603a      	str	r2, [r7, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	71bb      	strb	r3, [r7, #6]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	717b      	strb	r3, [r7, #5]
	while ((I2C2->ISR & I2C_ISR_BUSY)) {}
 8000d12:	bf00      	nop
 8000d14:	4b4a      	ldr	r3, [pc, #296]	@ (8000e40 <i2c_transaction+0x144>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f9      	bne.n	8000d14 <i2c_transaction+0x18>
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 8000d20:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <i2c_transaction+0x144>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a46      	ldr	r2, [pc, #280]	@ (8000e40 <i2c_transaction+0x144>)
 8000d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2a:	6053      	str	r3, [r2, #4]
	I2C2->CR2 &= ~I2C_CR2_ADD10;
 8000d2c:	4b44      	ldr	r3, [pc, #272]	@ (8000e40 <i2c_transaction+0x144>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	4a43      	ldr	r2, [pc, #268]	@ (8000e40 <i2c_transaction+0x144>)
 8000d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d36:	6053      	str	r3, [r2, #4]

	int count = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]

	// set amount of expecting bytes
	I2C2->CR2 &= ~I2C_CR2_NBYTES;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	@ (8000e40 <i2c_transaction+0x144>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	4a3f      	ldr	r2, [pc, #252]	@ (8000e40 <i2c_transaction+0x144>)
 8000d42:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000d46:	6053      	str	r3, [r2, #4]
	I2C2->CR2 |= len << I2C_CR2_NBYTES_Pos;
 8000d48:	4b3d      	ldr	r3, [pc, #244]	@ (8000e40 <i2c_transaction+0x144>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	797b      	ldrb	r3, [r7, #5]
 8000d4e:	041b      	lsls	r3, r3, #16
 8000d50:	493b      	ldr	r1, [pc, #236]	@ (8000e40 <i2c_transaction+0x144>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	604b      	str	r3, [r1, #4]

	// set device addr
	I2C2->CR2 &= ~I2C_CR2_SADD;
 8000d56:	4b3a      	ldr	r3, [pc, #232]	@ (8000e40 <i2c_transaction+0x144>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	4a39      	ldr	r2, [pc, #228]	@ (8000e40 <i2c_transaction+0x144>)
 8000d5c:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8000d60:	f023 0303 	bic.w	r3, r3, #3
 8000d64:	6053      	str	r3, [r2, #4]
	I2C2->CR2 |= (address << 1);
 8000d66:	4b36      	ldr	r3, [pc, #216]	@ (8000e40 <i2c_transaction+0x144>)
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4934      	ldr	r1, [pc, #208]	@ (8000e40 <i2c_transaction+0x144>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]

	// if dir == 0 then slave in receiver, else it is transmitter
	if (dir == 0) {
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d120      	bne.n	8000dbc <i2c_transaction+0xc0>
		I2C2->CR2 &= ~(I2C_CR2_RD_WRN);
 8000d7a:	4b31      	ldr	r3, [pc, #196]	@ (8000e40 <i2c_transaction+0x144>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a30      	ldr	r2, [pc, #192]	@ (8000e40 <i2c_transaction+0x144>)
 8000d80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d84:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000d86:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <i2c_transaction+0x144>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e40 <i2c_transaction+0x144>)
 8000d8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d90:	6053      	str	r3, [r2, #4]
		while (count < len) {
 8000d92:	e00e      	b.n	8000db2 <i2c_transaction+0xb6>
			// if TXIS = 1, then it it looking for something to be written the TXDR register
			if (I2C2->ISR & I2C_ISR_TXIS) {
 8000d94:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <i2c_transaction+0x144>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d008      	beq.n	8000db2 <i2c_transaction+0xb6>
				I2C2->TXDR = *(data+count) & 0xFF;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <i2c_transaction+0x144>)
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
				count++;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
		while (count < len) {
 8000db2:	797b      	ldrb	r3, [r7, #5]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dbec      	blt.n	8000d94 <i2c_transaction+0x98>
 8000dba:	e03a      	b.n	8000e32 <i2c_transaction+0x136>
			}
		}
	}
	else if (dir == 1) {
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d137      	bne.n	8000e32 <i2c_transaction+0x136>
		// write register addr
		I2C2->CR2 &= ~(I2C_CR2_RD_WRN);
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e40 <i2c_transaction+0x144>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <i2c_transaction+0x144>)
 8000dc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dcc:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <i2c_transaction+0x144>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e40 <i2c_transaction+0x144>)
 8000dd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dd8:	6053      	str	r3, [r2, #4]
		while (!(I2C2->ISR & I2C_ISR_TXIS)) {}
 8000dda:	bf00      	nop
 8000ddc:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <i2c_transaction+0x144>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f9      	beq.n	8000ddc <i2c_transaction+0xe0>
		I2C2->TXDR = data[0] & 0xFF;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <i2c_transaction+0x144>)
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28

		// repeated start
		I2C2->CR2 |= (0x1 << I2C_CR2_RD_WRN_Pos);
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <i2c_transaction+0x144>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <i2c_transaction+0x144>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfa:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= I2C_CR2_START;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <i2c_transaction+0x144>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <i2c_transaction+0x144>)
 8000e02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e06:	6053      	str	r3, [r2, #4]
		while(count < len) {
 8000e08:	e00f      	b.n	8000e2a <i2c_transaction+0x12e>
			if (I2C2->ISR & I2C_ISR_RXNE) {
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <i2c_transaction+0x144>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d009      	beq.n	8000e2a <i2c_transaction+0x12e>
				//data[count] = 0;
				data[count] = I2C2->RXDR & 0xFF;
 8000e16:	4b0a      	ldr	r3, [pc, #40]	@ (8000e40 <i2c_transaction+0x144>)
 8000e18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b2ca      	uxtb	r2, r1
 8000e22:	701a      	strb	r2, [r3, #0]

				count++;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
		while(count < len) {
 8000e2a:	797b      	ldrb	r3, [r7, #5]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	dbeb      	blt.n	8000e0a <i2c_transaction+0x10e>
	// Clear the stop flag
//	I2C2->ICR |= I2C_ICR_STOPCF;
	// clear out address by setting ADDRCF bit
//	I2C2->ISR |= I2C_ICR_ADDRCF;
	//I2C2->CR2 &= ~I2C2->CR2;
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40005800 	.word	0x40005800

08000e44 <leds_init>:

/* Include memory map of our MCU */
#include <stm32l475xx.h>

void leds_init()
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  // Enable clock for GPIOA and GPIOB
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000e48:	4b32      	ldr	r3, [pc, #200]	@ (8000f14 <leds_init+0xd0>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a31      	ldr	r2, [pc, #196]	@ (8000f14 <leds_init+0xd0>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <leds_init+0xd0>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	4a2e      	ldr	r2, [pc, #184]	@ (8000f14 <leds_init+0xd0>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c


  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOA->MODER &= ~GPIO_MODER_MODE5;
 8000e60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e6a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000e6e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODE5_0;
 8000e70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Configure PA5 as an output by clearing all bits and setting the mode */
  GPIOB->MODER &= ~GPIO_MODER_MODE14;
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <leds_init+0xd4>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a24      	ldr	r2, [pc, #144]	@ (8000f18 <leds_init+0xd4>)
 8000e86:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000e8a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= GPIO_MODER_MODE14_0;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <leds_init+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <leds_init+0xd4>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e96:	6013      	str	r3, [r2, #0]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOA->OTYPER &= ~GPIO_OTYPER_OT5;
 8000e98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ea2:	f023 0320 	bic.w	r3, r3, #32
 8000ea6:	6053      	str	r3, [r2, #4]

  /* Configure the GPIO output as push pull (transistor for high and low) */
  GPIOB->OTYPER &= ~GPIO_OTYPER_OT14;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <leds_init+0xd4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4a1a      	ldr	r2, [pc, #104]	@ (8000f18 <leds_init+0xd4>)
 8000eae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000eb2:	6053      	str	r3, [r2, #4]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOA->PUPDR &= GPIO_PUPDR_PUPD5;
 8000eb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	60d3      	str	r3, [r2, #12]

  /* Disable the internal pull-up and pull-down resistors */
  GPIOB->PUPDR &= GPIO_PUPDR_PUPD14;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <leds_init+0xd4>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <leds_init+0xd4>)
 8000eca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ece:	60d3      	str	r3, [r2, #12]

  /* Configure the GPIO to use **very high speed speed mode */
  GPIOA->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000ed0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eda:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000ede:	6093      	str	r3, [r2, #8]

  /* Configure the GPIO to use **very high speed speed mode */
  GPIOB->OSPEEDR |= (0x3 << GPIO_OSPEEDR_OSPEED5_Pos);
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <leds_init+0xd4>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f18 <leds_init+0xd4>)
 8000ee6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000eea:	6093      	str	r3, [r2, #8]

  /* Turn off the LED */
  GPIOA->ODR &= ~GPIO_ODR_OD5;
 8000eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ef6:	f023 0320 	bic.w	r3, r3, #32
 8000efa:	6153      	str	r3, [r2, #20]

  /* Turn off the LED */
  GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <leds_init+0xd4>)
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <leds_init+0xd4>)
 8000f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f06:	6153      	str	r3, [r2, #20]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	48000400 	.word	0x48000400

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <lsm6dsl_init>:
#define WAKE_UP_DUR 0x5C
#define WAKE_UP_THS 0x5B
#define TAP_CFG 0x58
#define MD1_CFG 0x5E

void lsm6dsl_init() {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	i2c_init();
 8000fb2:	f7ff fdcf 	bl	8000b54 <i2c_init>
//	uint8_t data[2] = {CTRL1_XL, 0x60};
//	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
//	data[0] = INT1_CTRL;
//	data[1] = 0x01;
//	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
	uint8_t data[2] = {CTRL1_XL, 0x60};
 8000fb6:	f246 0310 	movw	r3, #24592	@ 0x6010
 8000fba:	80bb      	strh	r3, [r7, #4]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000fbc:	1d3a      	adds	r2, r7, #4
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	206a      	movs	r0, #106	@ 0x6a
 8000fc4:	f7ff fe9a 	bl	8000cfc <i2c_transaction>
	data[0] = INT1_CTRL;
 8000fc8:	230d      	movs	r3, #13
 8000fca:	713b      	strb	r3, [r7, #4]
	data[1] = 0x41;
 8000fcc:	2341      	movs	r3, #65	@ 0x41
 8000fce:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8000fd0:	1d3a      	adds	r2, r7, #4
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	206a      	movs	r0, #106	@ 0x6a
 8000fd8:	f7ff fe90 	bl	8000cfc <i2c_transaction>

	RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	@ (80010bc <lsm6dsl_init+0x110>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a36      	ldr	r2, [pc, #216]	@ (80010bc <lsm6dsl_init+0x110>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <lsm6dsl_init+0x110>)
 8000fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fec:	4a33      	ldr	r2, [pc, #204]	@ (80010bc <lsm6dsl_init+0x110>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6613      	str	r3, [r2, #96]	@ 0x60

	// Clear mode bits (and also set to input mode 00)
	GPIOD->MODER &= ~(GPIO_MODER_MODE11_Msk);
 8000ff4:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <lsm6dsl_init+0x114>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a31      	ldr	r2, [pc, #196]	@ (80010c0 <lsm6dsl_init+0x114>)
 8000ffa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000ffe:	6013      	str	r3, [r2, #0]
	GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPD11_Msk);
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <lsm6dsl_init+0x114>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a2e      	ldr	r2, [pc, #184]	@ (80010c0 <lsm6dsl_init+0x114>)
 8001006:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800100a:	60d3      	str	r3, [r2, #12]
	GPIOD->PUPDR |= (GPIO_PUPDR_PUPD11_1);
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <lsm6dsl_init+0x114>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <lsm6dsl_init+0x114>)
 8001012:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001016:	60d3      	str	r3, [r2, #12]

	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI11_PD;
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <lsm6dsl_init+0x118>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <lsm6dsl_init+0x118>)
 800101e:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8001022:	6113      	str	r3, [r2, #16]
	EXTI->IMR1 |= EXTI_IMR1_IM11;
 8001024:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <lsm6dsl_init+0x11c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <lsm6dsl_init+0x11c>)
 800102a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800102e:	6013      	str	r3, [r2, #0]
	EXTI->RTSR1 |= EXTI_RTSR1_RT11;
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <lsm6dsl_init+0x11c>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a24      	ldr	r2, [pc, #144]	@ (80010c8 <lsm6dsl_init+0x11c>)
 8001036:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800103a:	6093      	str	r3, [r2, #8]
	EXTI->FTSR1 |= EXTI_FTSR1_FT11;
 800103c:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <lsm6dsl_init+0x11c>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a21      	ldr	r2, [pc, #132]	@ (80010c8 <lsm6dsl_init+0x11c>)
 8001042:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001046:	60d3      	str	r3, [r2, #12]
	EXTI->PR1 |= EXTI_PR1_PIF11;
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <lsm6dsl_init+0x11c>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a1e      	ldr	r2, [pc, #120]	@ (80010c8 <lsm6dsl_init+0x11c>)
 800104e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001052:	6153      	str	r3, [r2, #20]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001054:	2028      	movs	r0, #40	@ 0x28
 8001056:	f7ff ff61 	bl	8000f1c <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0); // Adjust priority as needed
 800105a:	2100      	movs	r1, #0
 800105c:	2028      	movs	r0, #40	@ 0x28
 800105e:	f7ff ff7b 	bl	8000f58 <__NVIC_SetPriority>

	data[0] = TAP_CFG;
 8001062:	2358      	movs	r3, #88	@ 0x58
 8001064:	713b      	strb	r3, [r7, #4]
	data[1] = 0x90;
 8001066:	2390      	movs	r3, #144	@ 0x90
 8001068:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 800106a:	1d3a      	adds	r2, r7, #4
 800106c:	2302      	movs	r3, #2
 800106e:	2100      	movs	r1, #0
 8001070:	206a      	movs	r0, #106	@ 0x6a
 8001072:	f7ff fe43 	bl	8000cfc <i2c_transaction>

	data[0] = WAKE_UP_DUR;
 8001076:	235c      	movs	r3, #92	@ 0x5c
 8001078:	713b      	strb	r3, [r7, #4]
	data[1] = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 800107e:	1d3a      	adds	r2, r7, #4
 8001080:	2302      	movs	r3, #2
 8001082:	2100      	movs	r1, #0
 8001084:	206a      	movs	r0, #106	@ 0x6a
 8001086:	f7ff fe39 	bl	8000cfc <i2c_transaction>
	data[0] = WAKE_UP_THS;
 800108a:	235b      	movs	r3, #91	@ 0x5b
 800108c:	713b      	strb	r3, [r7, #4]
	data[1] = 0x02;
 800108e:	2302      	movs	r3, #2
 8001090:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 8001092:	1d3a      	adds	r2, r7, #4
 8001094:	2302      	movs	r3, #2
 8001096:	2100      	movs	r1, #0
 8001098:	206a      	movs	r0, #106	@ 0x6a
 800109a:	f7ff fe2f 	bl	8000cfc <i2c_transaction>

	data[0] = MD1_CFG;
 800109e:	235e      	movs	r3, #94	@ 0x5e
 80010a0:	713b      	strb	r3, [r7, #4]
	data[1] = 0x20;
 80010a2:	2320      	movs	r3, #32
 80010a4:	717b      	strb	r3, [r7, #5]
	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	2302      	movs	r3, #2
 80010aa:	2100      	movs	r1, #0
 80010ac:	206a      	movs	r0, #106	@ 0x6a
 80010ae:	f7ff fe25 	bl	8000cfc <i2c_transaction>

//	data[0] = CTRL8_XL;
//	data[1] = 0x11 << 5;
//	i2c_transaction(LSM6DSL_ADDR, 0, data, 2);
//	printf("lsm6dsl init done\n");
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000c00 	.word	0x48000c00
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40010400 	.word	0x40010400

080010cc <lsm6dsl_read_xyz>:

void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	uint8_t data = STATUS_REG;
 80010d8:	231e      	movs	r3, #30
 80010da:	75fb      	strb	r3, [r7, #23]
	while (data & 0x1) {
 80010dc:	e00d      	b.n	80010fa <lsm6dsl_read_xyz+0x2e>
		printf("checking status reg %d \n", data);
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4833      	ldr	r0, [pc, #204]	@ (80011b0 <lsm6dsl_read_xyz+0xe4>)
 80010e4:	f002 ff4c 	bl	8003f80 <iprintf>
		data = STATUS_REG;
 80010e8:	231e      	movs	r3, #30
 80010ea:	75fb      	strb	r3, [r7, #23]
		i2c_transaction(LSM6DSL_ADDR, 1, &data, 1);
 80010ec:	f107 0217 	add.w	r2, r7, #23
 80010f0:	2301      	movs	r3, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	206a      	movs	r0, #106	@ 0x6a
 80010f6:	f7ff fe01 	bl	8000cfc <i2c_transaction>
	while (data & 0x1) {
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1ec      	bne.n	80010de <lsm6dsl_read_xyz+0x12>
	}
	uint8_t xl = OUTX_L_XL;
 8001104:	2328      	movs	r3, #40	@ 0x28
 8001106:	75bb      	strb	r3, [r7, #22]
	i2c_transaction(LSM6DSL_ADDR, 1, &xl, 1);
 8001108:	f107 0216 	add.w	r2, r7, #22
 800110c:	2301      	movs	r3, #1
 800110e:	2101      	movs	r1, #1
 8001110:	206a      	movs	r0, #106	@ 0x6a
 8001112:	f7ff fdf3 	bl	8000cfc <i2c_transaction>
	//printf("xl: %d ", xl);
	uint8_t xh = OUTX_H_XL;
 8001116:	2329      	movs	r3, #41	@ 0x29
 8001118:	757b      	strb	r3, [r7, #21]
	i2c_transaction(LSM6DSL_ADDR, 1, &xh, 1);
 800111a:	f107 0215 	add.w	r2, r7, #21
 800111e:	2301      	movs	r3, #1
 8001120:	2101      	movs	r1, #1
 8001122:	206a      	movs	r0, #106	@ 0x6a
 8001124:	f7ff fdea 	bl	8000cfc <i2c_transaction>
	//printf("xh: %d \n", xh);
	uint8_t yl = OUTY_L_XL;
 8001128:	232a      	movs	r3, #42	@ 0x2a
 800112a:	753b      	strb	r3, [r7, #20]
	i2c_transaction(LSM6DSL_ADDR, 1, &yl, 1);
 800112c:	f107 0214 	add.w	r2, r7, #20
 8001130:	2301      	movs	r3, #1
 8001132:	2101      	movs	r1, #1
 8001134:	206a      	movs	r0, #106	@ 0x6a
 8001136:	f7ff fde1 	bl	8000cfc <i2c_transaction>
	//printf("yl: %d \n", yl);
	uint8_t yh = OUTY_H_XL;
 800113a:	232b      	movs	r3, #43	@ 0x2b
 800113c:	74fb      	strb	r3, [r7, #19]
	i2c_transaction(LSM6DSL_ADDR, 1, &yh, 1);
 800113e:	f107 0213 	add.w	r2, r7, #19
 8001142:	2301      	movs	r3, #1
 8001144:	2101      	movs	r1, #1
 8001146:	206a      	movs	r0, #106	@ 0x6a
 8001148:	f7ff fdd8 	bl	8000cfc <i2c_transaction>
	//printf("yh: %d \n", yh);
	uint8_t zl = OUTZ_L_XL;
 800114c:	232c      	movs	r3, #44	@ 0x2c
 800114e:	74bb      	strb	r3, [r7, #18]
	i2c_transaction(LSM6DSL_ADDR, 1, &zl, 1);
 8001150:	f107 0212 	add.w	r2, r7, #18
 8001154:	2301      	movs	r3, #1
 8001156:	2101      	movs	r1, #1
 8001158:	206a      	movs	r0, #106	@ 0x6a
 800115a:	f7ff fdcf 	bl	8000cfc <i2c_transaction>
	//printf("zl: %d \n", zl);
	uint8_t zh = OUTZ_H_XL;
 800115e:	232d      	movs	r3, #45	@ 0x2d
 8001160:	747b      	strb	r3, [r7, #17]
	i2c_transaction(LSM6DSL_ADDR, 1, &zh, 1);
 8001162:	f107 0211 	add.w	r2, r7, #17
 8001166:	2301      	movs	r3, #1
 8001168:	2101      	movs	r1, #1
 800116a:	206a      	movs	r0, #106	@ 0x6a
 800116c:	f7ff fdc6 	bl	8000cfc <i2c_transaction>
	//printf("zh: %d \n", zh);
	*x = xh << 8 | xl;
 8001170:	7d7b      	ldrb	r3, [r7, #21]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	b21a      	sxth	r2, r3
 8001176:	7dbb      	ldrb	r3, [r7, #22]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	801a      	strh	r2, [r3, #0]
	*y = yh << 8 | yl;
 8001182:	7cfb      	ldrb	r3, [r7, #19]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	7d3b      	ldrb	r3, [r7, #20]
 800118a:	b21b      	sxth	r3, r3
 800118c:	4313      	orrs	r3, r2
 800118e:	b21a      	sxth	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	801a      	strh	r2, [r3, #0]
	*z = zh << 8 | zl;
 8001194:	7c7b      	ldrb	r3, [r7, #17]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	7cbb      	ldrb	r3, [r7, #18]
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	801a      	strh	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08004efc 	.word	0x08004efc

080011b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011dc:	e000      	b.n	80011e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f9      	beq.n	80011de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_write>:
int dataAvailable = 0;

SPI_HandleTypeDef hspi3;

// Redefine the libc _write() function so you can use printf in your code
int _write(int file, char *ptr, int len) {
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
    int i = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x2a>
        ITM_SendChar(*ptr++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc7 	bl	80011b4 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x16>
    }
    return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 fd94 	bl	8001d72 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 fa29 	bl	80016a0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 faab 	bl	80017a8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001252:	f000 fa6b 	bl	800172c <MX_SPI3_Init>

  // Our peripheral configurables
  leds_init();
 8001256:	f7ff fdf5 	bl	8000e44 <leds_init>
  timer_init(TIM2);
 800125a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800125e:	f000 fce1 	bl	8001c24 <timer_init>
  timer_init(TIM3);
 8001262:	4845      	ldr	r0, [pc, #276]	@ (8001378 <main+0x138>)
 8001264:	f000 fcde 	bl	8001c24 <timer_init>
  timer_set_ms(TIM3, 10000); // 10 second delay
 8001268:	f242 7110 	movw	r1, #10000	@ 0x2710
 800126c:	4842      	ldr	r0, [pc, #264]	@ (8001378 <main+0x138>)
 800126e:	f000 fd32 	bl	8001cd6 <timer_set_ms>
  timer_set_ms(TIM2, 5000);
 8001272:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001276:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800127a:	f000 fd2c 	bl	8001cd6 <timer_set_ms>
//  timer_set_arr(TIM3, 1600);
//  timer_set_arr(TIM2, 160);

  lsm6dsl_init();
 800127e:	f7ff fe95 	bl	8000fac <lsm6dsl_init>
  // accelerometer is EXTI11
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f001 f8fe 	bl	800248c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f000 fde3 	bl	8001e5c <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800129c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a0:	f001 f8f4 	bl	800248c <HAL_GPIO_WritePin>

  ble_init();
 80012a4:	f7fe ffe4 	bl	8000270 <ble_init>

  HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f000 fdd7 	bl	8001e5c <HAL_Delay>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80012ae:	b662      	cpsie	i
}
 80012b0:	bf00      	nop
  __enable_irq();

  uint8_t nonDiscoverable = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]

  int16_t prev_xyz[3] = {0,0,0};
 80012b6:	2300      	movs	r3, #0
 80012b8:	803b      	strh	r3, [r7, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	2300      	movs	r3, #0
 80012c0:	80bb      	strh	r3, [r7, #4]


  while (1)
  {
	  RCC->CR &= ~RCC_CR_MSIRANGE;
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <main+0x13c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <main+0x13c>)
 80012c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012cc:	6013      	str	r3, [r2, #0]
	  RCC->CR |= RCC_CR_MSIRANGE_0;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <main+0x13c>)
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <main+0x13c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6013      	str	r3, [r2, #0]
//	  timer_set_arr(TIM3, 50);
//	  timer_set_arr(TIM2, 5);
	  timer_set_presc(TIM2, 99);
 80012d6:	2163      	movs	r1, #99	@ 0x63
 80012d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012dc:	f000 fd11 	bl	8001d02 <timer_set_presc>
	  timer_set_presc(TIM3, 99);
 80012e0:	2163      	movs	r1, #99	@ 0x63
 80012e2:	4825      	ldr	r0, [pc, #148]	@ (8001378 <main+0x138>)
 80012e4:	f000 fd0d 	bl	8001d02 <timer_set_presc>
	  PWR->CR1 |= PWR_CR1_LPR;
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <main+0x140>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <main+0x140>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f2:	6013      	str	r3, [r2, #0]

	  if(!nonDiscoverable && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d12d      	bne.n	8001356 <main+0x116>
 80012fa:	2140      	movs	r1, #64	@ 0x40
 80012fc:	4821      	ldr	r0, [pc, #132]	@ (8001384 <main+0x144>)
 80012fe:	f001 f8ad 	bl	800245c <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d026      	beq.n	8001356 <main+0x116>
		  PWR->CR1 &= ~PWR_CR1_LPR;
 8001308:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <main+0x140>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <main+0x140>)
 800130e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001312:	6013      	str	r3, [r2, #0]
		  while ((PWR->SR2 & PWR_SR2_REGLPF) != 0) {}
 8001314:	bf00      	nop
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <main+0x140>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <main+0xd6>
		  RCC->CR &= ~RCC_CR_MSIRANGE;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <main+0x13c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a15      	ldr	r2, [pc, #84]	@ (800137c <main+0x13c>)
 8001328:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800132c:	6013      	str	r3, [r2, #0]
		  RCC->CR |= RCC_CR_MSIRANGE_7;
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <main+0x13c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <main+0x13c>)
 8001334:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001338:	6013      	str	r3, [r2, #0]
//		  timer_set_arr(TIM3, 4000);
//		  timer_set_arr(TIM2, 400);
		  timer_set_presc(TIM2, 7999);
 800133a:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 800133e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001342:	f000 fcde 	bl	8001d02 <timer_set_presc>
		  timer_set_presc(TIM3, 7999);
 8001346:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 800134a:	480b      	ldr	r0, [pc, #44]	@ (8001378 <main+0x138>)
 800134c:	f000 fcd9 	bl	8001d02 <timer_set_presc>
		  catchBLE();
 8001350:	f7ff f9a4 	bl	800069c <catchBLE>
 8001354:	e00a      	b.n	800136c <main+0x12c>
	  }else{
		  if (checkAccel) {
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <main+0x148>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d006      	beq.n	800136c <main+0x12c>
			  you_lost_it(prev_xyz);
 800135e:	463b      	mov	r3, r7
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f813 	bl	800138c <you_lost_it>
//			  new_lost_it();
			  checkAccel = 0;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <main+0x148>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
//	  if using STOP mode then you have to use an EXTI from accelerometer?
//	  PWR->CR1 |= PWR_CR1_LPMS_STOP2;
//	  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
	  // Wait for interrupt, only uncomment if low power is needed
//	  __enable_irq();
	  HAL_SuspendTick();
 800136c:	f000 fd9a 	bl	8001ea4 <HAL_SuspendTick>
//	  PWR->CR1 |= PWR_CR1_LPMS_STOP2;
	  __WFI();
 8001370:	bf30      	wfi
//	  HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
//	  leds_set(1);
	  HAL_ResumeTick();
 8001372:	f000 fda7 	bl	8001ec4 <HAL_ResumeTick>
	  RCC->CR &= ~RCC_CR_MSIRANGE;
 8001376:	e7a4      	b.n	80012c2 <main+0x82>
 8001378:	40000400 	.word	0x40000400
 800137c:	40021000 	.word	0x40021000
 8001380:	40007000 	.word	0x40007000
 8001384:	48001000 	.word	0x48001000
 8001388:	20000364 	.word	0x20000364

0800138c <you_lost_it>:

//	  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
  }
}

void you_lost_it(int16_t* xyz){
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
	int16_t prev_x = xyz[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t prev_y = xyz[1];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	885b      	ldrh	r3, [r3, #2]
 800139e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	int16_t prev_z = xyz[2];
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	889b      	ldrh	r3, [r3, #4]
 80013a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
	int16_t x = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	847b      	strh	r3, [r7, #34]	@ 0x22
	int16_t y = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	843b      	strh	r3, [r7, #32]
	int16_t z = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	83fb      	strh	r3, [r7, #30]
	lsm6dsl_read_xyz(&x,&y, &z);
 80013b2:	f107 021e 	add.w	r2, r7, #30
 80013b6:	f107 0120 	add.w	r1, r7, #32
 80013ba:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe84 	bl	80010cc <lsm6dsl_read_xyz>
	int16_t diff_x = abs(x) - abs(prev_x);
 80013c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bfb8      	it	lt
 80013cc:	425b      	neglt	r3, r3
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bfb8      	it	lt
 80013d8:	425b      	neglt	r3, r3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b29b      	uxth	r3, r3
 80013e0:	853b      	strh	r3, [r7, #40]	@ 0x28
	int16_t diff_y = abs(y) - abs(prev_y);
 80013e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bfb8      	it	lt
 80013ea:	425b      	neglt	r3, r3
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bfb8      	it	lt
 80013f6:	425b      	neglt	r3, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int16_t diff_z = abs(z) - abs(prev_z);
 8001400:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001404:	2b00      	cmp	r3, #0
 8001406:	bfb8      	it	lt
 8001408:	425b      	neglt	r3, r3
 800140a:	b29a      	uxth	r2, r3
 800140c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001410:	2b00      	cmp	r3, #0
 8001412:	bfb8      	it	lt
 8001414:	425b      	neglt	r3, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29b      	uxth	r3, r3
 800141c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    //leds_set(lights);
	// keep track of how many times that it moved
	if (diff_x + diff_y + diff_z >= OFFSET_THRESH) { // This is checking for when it moves
 800141e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001422:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001426:	441a      	add	r2, r3
 8001428:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800142c:	4413      	add	r3, r2
 800142e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001432:	db38      	blt.n	80014a6 <you_lost_it+0x11a>
		timer_reset(TIM2);
 8001434:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001438:	f000 fc3e 	bl	8001cb8 <timer_reset>
		timer_reset(TIM3);
 800143c:	484b      	ldr	r0, [pc, #300]	@ (800156c <you_lost_it+0x1e0>)
 800143e:	f000 fc3b 	bl	8001cb8 <timer_reset>
		sendMessage = 0;
 8001442:	4b4b      	ldr	r3, [pc, #300]	@ (8001570 <you_lost_it+0x1e4>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
		led_interupt = 0;
 8001448:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <you_lost_it+0x1e8>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
		minsLost = 0;
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <you_lost_it+0x1ec>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
//		leds_set(0);
		PWR->CR1 &= ~PWR_CR1_LPR;
 8001454:	4b49      	ldr	r3, [pc, #292]	@ (800157c <you_lost_it+0x1f0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a48      	ldr	r2, [pc, #288]	@ (800157c <you_lost_it+0x1f0>)
 800145a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800145e:	6013      	str	r3, [r2, #0]
		while ((PWR->SR2 & PWR_SR2_REGLPF) != 0) {}
 8001460:	bf00      	nop
 8001462:	4b46      	ldr	r3, [pc, #280]	@ (800157c <you_lost_it+0x1f0>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f9      	bne.n	8001462 <you_lost_it+0xd6>
		RCC->CR &= ~RCC_CR_MSIRANGE;
 800146e:	4b44      	ldr	r3, [pc, #272]	@ (8001580 <you_lost_it+0x1f4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a43      	ldr	r2, [pc, #268]	@ (8001580 <you_lost_it+0x1f4>)
 8001474:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001478:	6013      	str	r3, [r2, #0]
		RCC->CR |= RCC_CR_MSIRANGE_7;
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <you_lost_it+0x1f4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a40      	ldr	r2, [pc, #256]	@ (8001580 <you_lost_it+0x1f4>)
 8001480:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001484:	6013      	str	r3, [r2, #0]
//		timer_set_arr(TIM3, 4000);
//		timer_set_arr(TIM2, 400);
		timer_set_presc(TIM2, 7999);
 8001486:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 800148a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800148e:	f000 fc38 	bl	8001d02 <timer_set_presc>
		timer_set_presc(TIM3, 7999);
 8001492:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 8001496:	4835      	ldr	r0, [pc, #212]	@ (800156c <you_lost_it+0x1e0>)
 8001498:	f000 fc33 	bl	8001d02 <timer_set_presc>
		disconnectBLE();
 800149c:	f7ff fadc 	bl	8000a58 <disconnectBLE>
		setDiscoverability(0);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fb31 	bl	8000b08 <setDiscoverability>
	}
	if (led_interupt && minsLost >= 10) { // This is when it is lost for 60s (10 seconds)
 80014a6:	4b33      	ldr	r3, [pc, #204]	@ (8001574 <you_lost_it+0x1e8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d04c      	beq.n	8001548 <you_lost_it+0x1bc>
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <you_lost_it+0x1ec>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b09      	cmp	r3, #9
 80014b4:	dd48      	ble.n	8001548 <you_lost_it+0x1bc>
		PWR->CR1 &= ~PWR_CR1_LPR;
 80014b6:	4b31      	ldr	r3, [pc, #196]	@ (800157c <you_lost_it+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a30      	ldr	r2, [pc, #192]	@ (800157c <you_lost_it+0x1f0>)
 80014bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80014c0:	6013      	str	r3, [r2, #0]
		while ((PWR->SR2 & PWR_SR2_REGLPF) != 0) {}
 80014c2:	bf00      	nop
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <you_lost_it+0x1f0>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f9      	bne.n	80014c4 <you_lost_it+0x138>
		RCC->CR &= ~RCC_CR_MSIRANGE;
 80014d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <you_lost_it+0x1f4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001580 <you_lost_it+0x1f4>)
 80014d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014da:	6013      	str	r3, [r2, #0]
		RCC->CR |= RCC_CR_MSIRANGE_7;
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <you_lost_it+0x1f4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <you_lost_it+0x1f4>)
 80014e2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80014e6:	6013      	str	r3, [r2, #0]
//		timer_set_arr(TIM3, 4000);
//		timer_set_arr(TIM2, 400);
		timer_set_presc(TIM2, 7999);
 80014e8:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 80014ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014f0:	f000 fc07 	bl	8001d02 <timer_set_presc>
		timer_set_presc(TIM3, 7999);
 80014f4:	f641 713f 	movw	r1, #7999	@ 0x1f3f
 80014f8:	481c      	ldr	r0, [pc, #112]	@ (800156c <you_lost_it+0x1e0>)
 80014fa:	f000 fc02 	bl	8001d02 <timer_set_presc>
		setDiscoverability(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff fb02 	bl	8000b08 <setDiscoverability>
//		leds_set(lights);
		unsigned char message[20] = ""; //21 characters seems like the max
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
		if (sendMessage) {
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <you_lost_it+0x1e4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d014      	beq.n	8001548 <you_lost_it+0x1bc>
			snprintf((char*)message, 20, "Secs lost %d", minsLost-10);
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <you_lost_it+0x1ec>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3b0a      	subs	r3, #10
 8001524:	f107 0008 	add.w	r0, r7, #8
 8001528:	4a16      	ldr	r2, [pc, #88]	@ (8001584 <you_lost_it+0x1f8>)
 800152a:	2114      	movs	r1, #20
 800152c:	f002 fd3a 	bl	8003fa4 <sniprintf>
			updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(message)-1, message);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2313      	movs	r3, #19
 8001538:	2200      	movs	r2, #0
 800153a:	4913      	ldr	r1, [pc, #76]	@ (8001588 <you_lost_it+0x1fc>)
 800153c:	4813      	ldr	r0, [pc, #76]	@ (800158c <you_lost_it+0x200>)
 800153e:	f7ff fa37 	bl	80009b0 <updateCharValue>
			sendMessage = 0;
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <you_lost_it+0x1e4>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
		}
	}
	xyz[0] = x;
 8001548:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	801a      	strh	r2, [r3, #0]
	xyz[1] = y;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3302      	adds	r3, #2
 8001554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001558:	801a      	strh	r2, [r3, #0]
	xyz[2] = z;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3304      	adds	r3, #4
 800155e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001562:	801a      	strh	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	@ 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40000400 	.word	0x40000400
 8001570:	20000360 	.word	0x20000360
 8001574:	20000358 	.word	0x20000358
 8001578:	2000035c 	.word	0x2000035c
 800157c:	40007000 	.word	0x40007000
 8001580:	40021000 	.word	0x40021000
 8001584:	08004f18 	.word	0x08004f18
 8001588:	200002e0 	.word	0x200002e0
 800158c:	200002d8 	.word	0x200002d8

08001590 <TIM2_IRQHandler>:
		}
	}
}
// Timer to keep track of how long it has been lost and set the blinking
void TIM2_IRQHandler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	if (TIM2start == 0) {
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <TIM2_IRQHandler+0x58>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10d      	bne.n	80015b8 <TIM2_IRQHandler+0x28>
		TIM2start++;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <TIM2_IRQHandler+0x58>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <TIM2_IRQHandler+0x58>)
 80015a4:	6013      	str	r3, [r2, #0]
		TIM2->SR &= ~TIM_SR_UIF;
 80015a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6113      	str	r3, [r2, #16]
		return;
 80015b6:	e012      	b.n	80015de <TIM2_IRQHandler+0x4e>
	}
	minsLost+= 5;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <TIM2_IRQHandler+0x5c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3305      	adds	r3, #5
 80015be:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <TIM2_IRQHandler+0x5c>)
 80015c0:	6013      	str	r3, [r2, #0]
//		led2[15-i] = (minsLost & (highbit << 2*i)) ? 2 : 0;
//	}
//	lights = led1[on_off] + led2[on_off];
//	on_off = (on_off + 1) % 16;
//	leds_set(1);
	led_interupt = 1;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <TIM2_IRQHandler+0x60>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
	checkAccel = 1;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <TIM2_IRQHandler+0x64>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
	// Reset the interrupt bit
	TIM2->SR &= ~TIM_SR_UIF;
 80015ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	6113      	str	r3, [r2, #16]
}
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000350 	.word	0x20000350
 80015ec:	2000035c 	.word	0x2000035c
 80015f0:	20000358 	.word	0x20000358
 80015f4:	20000364 	.word	0x20000364

080015f8 <TIM3_IRQHandler>:

// set the leds blinking pattern
void TIM3_IRQHandler(void) {
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	if (!TIM3start) {
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <TIM3_IRQHandler+0x3c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <TIM3_IRQHandler+0x20>
		TIM3start = 1;
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <TIM3_IRQHandler+0x3c>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <TIM3_IRQHandler+0x40>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <TIM3_IRQHandler+0x40>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6113      	str	r3, [r2, #16]
		return;
 8001616:	e008      	b.n	800162a <TIM3_IRQHandler+0x32>
	}
//	lights = led1[on_off] + led2[on_off];
//	on_off = (on_off + 1) % 16;
//	leds_set(2);
	sendMessage = 1;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <TIM3_IRQHandler+0x44>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
	TIM3->SR &= ~TIM_SR_UIF;
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <TIM3_IRQHandler+0x40>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <TIM3_IRQHandler+0x40>)
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6113      	str	r3, [r2, #16]
}
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000354 	.word	0x20000354
 8001638:	40000400 	.word	0x40000400
 800163c:	20000360 	.word	0x20000360

08001640 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
//    leds_set(3);

    if (EXTI->PR1 & EXTI_PR1_PIF11) {
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <EXTI15_10_IRQHandler+0x2c>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00b      	beq.n	8001668 <EXTI15_10_IRQHandler+0x28>
    	readAccel = 1;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <EXTI15_10_IRQHandler+0x30>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
//    	leds_set(3);
    	printf("accel interrupt");
 8001656:	4807      	ldr	r0, [pc, #28]	@ (8001674 <EXTI15_10_IRQHandler+0x34>)
 8001658:	f002 fc92 	bl	8003f80 <iprintf>
    	EXTI->PR1 |= EXTI_PR1_PIF11;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <EXTI15_10_IRQHandler+0x2c>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a02      	ldr	r2, [pc, #8]	@ (800166c <EXTI15_10_IRQHandler+0x2c>)
 8001662:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001666:	6153      	str	r3, [r2, #20]
    }
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010400 	.word	0x40010400
 8001670:	20000368 	.word	0x20000368
 8001674:	08004f28 	.word	0x08004f28

08001678 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_11) {
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001688:	d102      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0x18>
		readAccel = 1;
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <HAL_GPIO_EXTI_Callback+0x24>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]
//		leds_set(3);
	}
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000368 	.word	0x20000368

080016a0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @attention This changes the System clock frequency, make sure you reflect that change in your timer
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	@ 0x58
 80016a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2244      	movs	r2, #68	@ 0x44
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f002 fd84 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016c6:	f000 ff1f 	bl	8002508 <HAL_PWREx_ControlVoltageScaling>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016d0:	f000 f902 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016d4:	2310      	movs	r3, #16
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  // This lines changes system clock frequency
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7; // MSIRANGE_7 is 8 mhz
 80016e0:	2370      	movs	r3, #112	@ 0x70
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
//  __HAL_RCC_HSI_DISABLE();
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 ff61 	bl	80025b4 <HAL_RCC_OscConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80016f8:	f000 f8ee 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fc:	230f      	movs	r3, #15
 80016fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001710:	463b      	mov	r3, r7
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fb29 	bl	8002d6c <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001720:	f000 f8da 	bl	80018d8 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3758      	adds	r7, #88	@ 0x58
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <MX_SPI3_Init+0x78>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001738:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800173c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001746:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800174a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_SPI3_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_SPI3_Init+0x74>)
 800175a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800175e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <MX_SPI3_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <MX_SPI3_Init+0x74>)
 800177a:	2207      	movs	r2, #7
 800177c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <MX_SPI3_Init+0x74>)
 8001786:	2208      	movs	r2, #8
 8001788:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_SPI3_Init+0x74>)
 800178c:	f001 fcda 	bl	8003144 <HAL_SPI_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001796:	f000 f89f 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200002ec 	.word	0x200002ec
 80017a4:	40003c00 	.word	0x40003c00

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017be:	4b43      	ldr	r3, [pc, #268]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ca:	4b40      	ldr	r3, [pc, #256]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b3d      	ldr	r3, [pc, #244]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	4a3c      	ldr	r2, [pc, #240]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e2:	4b3a      	ldr	r3, [pc, #232]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fa:	4b34      	ldr	r3, [pc, #208]	@ (80018cc <MX_GPIO_Init+0x124>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <MX_GPIO_Init+0x124>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a30      	ldr	r2, [pc, #192]	@ (80018cc <MX_GPIO_Init+0x124>)
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <MX_GPIO_Init+0x124>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <MX_GPIO_Init+0x124>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a2a      	ldr	r2, [pc, #168]	@ (80018cc <MX_GPIO_Init+0x124>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <MX_GPIO_Init+0x124>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f000 fe25 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001848:	4821      	ldr	r0, [pc, #132]	@ (80018d0 <MX_GPIO_Init+0x128>)
 800184a:	f000 fe1f 	bl	800248c <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f000 fe18 	bl	800248c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800185c:	2340      	movs	r3, #64	@ 0x40
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001860:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <MX_GPIO_Init+0x12c>)
 8001872:	f000 fc49 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8001876:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001892:	f000 fc39 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8001896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a4:	2303      	movs	r3, #3
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4808      	ldr	r0, [pc, #32]	@ (80018d0 <MX_GPIO_Init+0x128>)
 80018b0:	f000 fc2a 	bl	8002108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2017      	movs	r0, #23
 80018ba:	f000 fbee 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018be:	2017      	movs	r0, #23
 80018c0:	f000 fc07 	bl	80020d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	@ 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	48000c00 	.word	0x48000c00
 80018d4:	48001000 	.word	0x48001000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <Error_Handler+0x8>

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <HAL_MspInit+0x44>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <HAL_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <HAL_MspInit+0x44>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_MspInit+0x44>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	@ 0x58
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_SPI_MspInit+0x7c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d128      	bne.n	80019a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001952:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 8001954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001958:	6593      	str	r3, [r2, #88]	@ 0x58
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	4a10      	ldr	r2, [pc, #64]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_SPI_MspInit+0x80>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800197e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001990:	2306      	movs	r3, #6
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <HAL_SPI_MspInit+0x84>)
 800199c:	f000 fbb4 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	@ 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40003c00 	.word	0x40003c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000800 	.word	0x48000800

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0a:	f000 fa07 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <EXTI9_5_IRQHandler+0x14>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 8001a1e:	2040      	movs	r0, #64	@ 0x40
 8001a20:	f000 fd4c 	bl	80024bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200002e8 	.word	0x200002e8

08001a2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
	}

return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <_sbrk+0x50>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x16>
		heap_end = &end;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <_sbrk+0x50>)
 8001a7a:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <_sbrk+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <_sbrk+0x50>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <_sbrk+0x50>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	466a      	mov	r2, sp
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d907      	bls.n	8001aa2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001a92:	f002 fbf1 	bl	8004278 <__errno>
 8001a96:	4603      	mov	r3, r0
 8001a98:	220c      	movs	r2, #12
 8001a9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa0:	e006      	b.n	8001ab0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <_sbrk+0x50>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a03      	ldr	r2, [pc, #12]	@ (8001ab8 <_sbrk+0x50>)
 8001aac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000036c 	.word	0x2000036c
 8001abc:	200004c0 	.word	0x200004c0

08001ac0 <_close>:

int _close(int file)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae8:	605a      	str	r2, [r3, #4]
	return 0;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_isatty>:

int _isatty(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	return 1;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
	return 0;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <SystemInit+0x64>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a16      	ldr	r2, [pc, #88]	@ (8001b8c <SystemInit+0x64>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <SystemInit+0x68>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <SystemInit+0x68>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <SystemInit+0x68>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	@ (8001b90 <SystemInit+0x68>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <SystemInit+0x68>)
 8001b54:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b58:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <SystemInit+0x68>)
 8001b60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b64:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <SystemInit+0x68>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <SystemInit+0x68>)
 8001b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <SystemInit+0x68>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b78:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SystemInit+0x64>)
 8001b7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00
 8001b90:	40021000 	.word	0x40021000

08001b94 <__NVIC_EnableIRQ>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <timer_init>:

#include "timer.h"


void timer_init(TIM_TypeDef* timer)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	// Give power to the timer
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <timer_init+0x90>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c30:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <timer_init+0x90>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <timer_init+0x90>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <timer_init+0x90>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58

	// Enable interrupts
	NVIC_EnableIRQ(TIM2_IRQn);
 8001c44:	201c      	movs	r0, #28
 8001c46:	f7ff ffa5 	bl	8001b94 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f7ff ffbf 	bl	8001bd0 <__NVIC_SetPriority>

	NVIC_EnableIRQ(TIM3_IRQn);
 8001c52:	201d      	movs	r0, #29
 8001c54:	f7ff ff9e 	bl	8001b94 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	201d      	movs	r0, #29
 8001c5c:	f7ff ffb8 	bl	8001bd0 <__NVIC_SetPriority>

	// Reset the timer
	timer->CNT &= 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24

	// Stop the timer
	timer->CR1 &= (~TIM_CR1_CEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0201 	bic.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]

	// Reset the timer
	timer->CNT &= 0;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

	// Set the prescalar to 3999 since 1/(3999+1) = 4000 for 1 ms
//	timer->PSC = 3999; // adjust for 4mhz clock
	timer->PSC = 7999; // adjust it for an 8mhz clock
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001c86:	629a      	str	r2, [r3, #40]	@ 0x28
//	timer->PSC = 999; // adjust for 1mhz clock
//	timer->PSC = 1999; // adjust for 2mhz clock
//	timer->PSC = 19999; //

	// reset the status of the timer
	timer->SR &= ~TIM_SR_UIF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f023 0201 	bic.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]


	// Enable interrupts on timer
	timer->DIER |= TIM_DIER_UIE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]

	// Turn on the timer again
	timer->CR1 |= TIM_CR1_CEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	601a      	str	r2, [r3, #0]

}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <timer_reset>:

void timer_reset(TIM_TypeDef* timer)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	// Set the counter in the timer back to 0
	timer->CNT &= 0;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <timer_set_ms>:

void timer_set_ms(TIM_TypeDef* timer, uint16_t period_ms)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	807b      	strh	r3, [r7, #2]
	timer->CNT &= 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24
  	// Set the reload time of the timer
	timer->ARR = period_ms - 1;
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <timer_set_presc>:

void timer_set_presc(TIM_TypeDef* timer, uint16_t presc) {
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
	timer->PSC = presc;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d24:	f7ff ff00 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	@ (8001d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <LoopForever+0xe>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	@ (8001d6c <LoopForever+0x16>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f002 fa99 	bl	8004284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d52:	f7ff fa75 	bl	8001240 <main>

08001d56 <LoopForever>:

LoopForever:
    b LoopForever
 8001d56:	e7fe      	b.n	8001d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8001d64:	08005084 	.word	0x08005084
  ldr r2, =_sbss
 8001d68:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8001d6c:	200004c0 	.word	0x200004c0

08001d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_2_IRQHandler>

08001d72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 f981 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f80e 	bl	8001da4 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e001      	b.n	8001d98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d94:	f7ff fda6 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db8:	4b16      	ldr	r3, [pc, #88]	@ (8001e14 <HAL_InitTick+0x70>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_InitTick+0x6c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f98d 	bl	80020ee <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d809      	bhi.n	8001df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295
 8001de8:	f000 f957 	bl	800209a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_InitTick+0x74>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e004      	b.n	8001e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e001      	b.n	8001e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000150 	.word	0x20000150
 8001e14:	20000148 	.word	0x20000148
 8001e18:	2000014c 	.word	0x2000014c

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000150 	.word	0x20000150
 8001e40:	20000370 	.word	0x20000370

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000370 	.word	0x20000370

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000150 	.word	0x20000150

08001ea4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_SuspendTick+0x1c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_SuspendTick+0x1c>)
 8001eae:	f023 0302 	bic.w	r3, r3, #2
 8001eb2:	6013      	str	r3, [r2, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_ResumeTick+0x1c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_ResumeTick+0x1c>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <__NVIC_SetPriorityGrouping>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	@ (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	@ (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	@ 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff3e 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff31 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b087      	sub	sp, #28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002116:	e17f      	b.n	8002418 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8171 	beq.w	8002412 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d005      	beq.n	8002148 <HAL_GPIO_Init+0x40>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d130      	bne.n	80021aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217e:	2201      	movs	r2, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 0201 	and.w	r2, r3, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d118      	bne.n	80021e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	6939      	ldr	r1, [r7, #16]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80ac 	beq.w	8002412 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002438 <HAL_GPIO_Init+0x330>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	4a5e      	ldr	r2, [pc, #376]	@ (8002438 <HAL_GPIO_Init+0x330>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80022c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <HAL_GPIO_Init+0x330>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022d2:	4a5a      	ldr	r2, [pc, #360]	@ (800243c <HAL_GPIO_Init+0x334>)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022fc:	d025      	beq.n	800234a <HAL_GPIO_Init+0x242>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	@ (8002440 <HAL_GPIO_Init+0x338>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01f      	beq.n	8002346 <HAL_GPIO_Init+0x23e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4e      	ldr	r2, [pc, #312]	@ (8002444 <HAL_GPIO_Init+0x33c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x23a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4d      	ldr	r2, [pc, #308]	@ (8002448 <HAL_GPIO_Init+0x340>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x236>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4c      	ldr	r2, [pc, #304]	@ (800244c <HAL_GPIO_Init+0x344>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x232>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4b      	ldr	r2, [pc, #300]	@ (8002450 <HAL_GPIO_Init+0x348>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x22e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4a      	ldr	r2, [pc, #296]	@ (8002454 <HAL_GPIO_Init+0x34c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x22a>
 800232e:	2306      	movs	r3, #6
 8002330:	e00c      	b.n	800234c <HAL_GPIO_Init+0x244>
 8002332:	2307      	movs	r3, #7
 8002334:	e00a      	b.n	800234c <HAL_GPIO_Init+0x244>
 8002336:	2305      	movs	r3, #5
 8002338:	e008      	b.n	800234c <HAL_GPIO_Init+0x244>
 800233a:	2304      	movs	r3, #4
 800233c:	e006      	b.n	800234c <HAL_GPIO_Init+0x244>
 800233e:	2303      	movs	r3, #3
 8002340:	e004      	b.n	800234c <HAL_GPIO_Init+0x244>
 8002342:	2302      	movs	r3, #2
 8002344:	e002      	b.n	800234c <HAL_GPIO_Init+0x244>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <HAL_GPIO_Init+0x244>
 800234a:	2300      	movs	r3, #0
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	f002 0203 	and.w	r2, r2, #3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4093      	lsls	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800235c:	4937      	ldr	r1, [pc, #220]	@ (800243c <HAL_GPIO_Init+0x334>)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	089b      	lsrs	r3, r3, #2
 8002362:	3302      	adds	r3, #2
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800236a:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_GPIO_Init+0x350>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800238e:	4a32      	ldr	r2, [pc, #200]	@ (8002458 <HAL_GPIO_Init+0x350>)
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002394:	4b30      	ldr	r3, [pc, #192]	@ (8002458 <HAL_GPIO_Init+0x350>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023b8:	4a27      	ldr	r2, [pc, #156]	@ (8002458 <HAL_GPIO_Init+0x350>)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023be:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_GPIO_Init+0x350>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <HAL_GPIO_Init+0x350>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_GPIO_Init+0x350>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800240c:	4a12      	ldr	r2, [pc, #72]	@ (8002458 <HAL_GPIO_Init+0x350>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f ae78 	bne.w	8002118 <HAL_GPIO_Init+0x10>
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	40010000 	.word	0x40010000
 8002440:	48000400 	.word	0x48000400
 8002444:	48000800 	.word	0x48000800
 8002448:	48000c00 	.word	0x48000c00
 800244c:	48001000 	.word	0x48001000
 8002450:	48001400 	.word	0x48001400
 8002454:	48001800 	.word	0x48001800
 8002458:	40010400 	.word	0x40010400

0800245c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d002      	beq.n	800247a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e001      	b.n	800247e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
 8002498:	4613      	mov	r3, r2
 800249a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800249c:	787b      	ldrb	r3, [r7, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024a2:	887a      	ldrh	r2, [r7, #2]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024a8:	e002      	b.n	80024b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff f8cc 	bl	8001678 <HAL_GPIO_EXTI_Callback>
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <HAL_PWREx_GetVoltageRange+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002516:	d130      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002524:	d038      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800252e:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002530:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2232      	movs	r2, #50	@ 0x32
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800254c:	e002      	b.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b01      	subs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002560:	d102      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002574:	d110      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e00f      	b.n	800259a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d007      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002590:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002596:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40007000 	.word	0x40007000
 80025ac:	20000148 	.word	0x20000148
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e3ca      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c6:	4b97      	ldr	r3, [pc, #604]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d0:	4b94      	ldr	r3, [pc, #592]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80e4 	beq.w	80027b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_RCC_OscConfig+0x4a>
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	f040 808b 	bne.w	800270c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f040 8087 	bne.w	800270c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025fe:	4b89      	ldr	r3, [pc, #548]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e3a2      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1a      	ldr	r2, [r3, #32]
 800261a:	4b82      	ldr	r3, [pc, #520]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d004      	beq.n	8002630 <HAL_RCC_OscConfig+0x7c>
 8002626:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800262e:	e005      	b.n	800263c <HAL_RCC_OscConfig+0x88>
 8002630:	4b7c      	ldr	r3, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800263c:	4293      	cmp	r3, r2
 800263e:	d223      	bcs.n	8002688 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 fd1d 	bl	8003084 <RCC_SetFlashLatencyFromMSIRange>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e383      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002654:	4b73      	ldr	r3, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a72      	ldr	r2, [pc, #456]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b70      	ldr	r3, [pc, #448]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	496d      	ldr	r1, [pc, #436]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002672:	4b6c      	ldr	r3, [pc, #432]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	4968      	ldr	r1, [pc, #416]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e025      	b.n	80026d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002688:	4b66      	ldr	r3, [pc, #408]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a65      	ldr	r2, [pc, #404]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b63      	ldr	r3, [pc, #396]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4960      	ldr	r1, [pc, #384]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	495b      	ldr	r1, [pc, #364]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fcdd 	bl	8003084 <RCC_SetFlashLatencyFromMSIRange>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e343      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d4:	f000 fc4a 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b52      	ldr	r3, [pc, #328]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	4950      	ldr	r1, [pc, #320]	@ (8002828 <HAL_RCC_OscConfig+0x274>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
 80026f0:	4a4e      	ldr	r2, [pc, #312]	@ (800282c <HAL_RCC_OscConfig+0x278>)
 80026f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <HAL_RCC_OscConfig+0x27c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fb53 	bl	8001da4 <HAL_InitTick>
 80026fe:	4603      	mov	r3, r0
 8002700:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d052      	beq.n	80027ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	e327      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d032      	beq.n	800277a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002714:	4b43      	ldr	r3, [pc, #268]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a42      	ldr	r2, [pc, #264]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002720:	f7ff fb90 	bl	8001e44 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002728:	f7ff fb8c 	bl	8001e44 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e310      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800273a:	4b3a      	ldr	r3, [pc, #232]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002746:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a36      	ldr	r2, [pc, #216]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b34      	ldr	r3, [pc, #208]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4931      	ldr	r1, [pc, #196]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	492c      	ldr	r1, [pc, #176]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e01a      	b.n	80027b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a29      	ldr	r2, [pc, #164]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002786:	f7ff fb5d 	bl	8001e44 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800278e:	f7ff fb59 	bl	8001e44 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e2dd      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x1da>
 80027ac:	e000      	b.n	80027b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d074      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x21a>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d10e      	bne.n	80027e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d10b      	bne.n	80027e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d064      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d160      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e2ba      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x24a>
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e026      	b.n	800284c <HAL_RCC_OscConfig+0x298>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002806:	d115      	bne.n	8002834 <HAL_RCC_OscConfig+0x280>
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800280e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a02      	ldr	r2, [pc, #8]	@ (8002824 <HAL_RCC_OscConfig+0x270>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x298>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	08005000 	.word	0x08005000
 800282c:	20000148 	.word	0x20000148
 8002830:	2000014c 	.word	0x2000014c
 8002834:	4ba0      	ldr	r3, [pc, #640]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a9f      	ldr	r2, [pc, #636]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b9d      	ldr	r3, [pc, #628]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a9c      	ldr	r2, [pc, #624]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7ff faf6 	bl	8001e44 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff faf2 	bl	8001e44 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	@ 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e276      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800286e:	4b92      	ldr	r3, [pc, #584]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x2a8>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7ff fae2 	bl	8001e44 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff fade 	bl	8001e44 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e262      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002896:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x2d0>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d060      	beq.n	8002974 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_OscConfig+0x310>
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d119      	bne.n	80028f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d116      	bne.n	80028f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028c4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_OscConfig+0x328>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e23f      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4973      	ldr	r1, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f0:	e040      	b.n	8002974 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d023      	beq.n	8002942 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fa:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002906:	f7ff fa9d 	bl	8001e44 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290e:	f7ff fa99 	bl	8001e44 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e21d      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f0      	beq.n	800290e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292c:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	495f      	ldr	r1, [pc, #380]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b5d      	ldr	r3, [pc, #372]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5c      	ldr	r2, [pc, #368]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff fa79 	bl	8001e44 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff fa75 	bl	8001e44 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1f9      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002968:	4b53      	ldr	r3, [pc, #332]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d03c      	beq.n	80029fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002988:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7ff fa54 	bl	8001e44 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7ff fa50 	bl	8001e44 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e1d4      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ef      	beq.n	80029a0 <HAL_RCC_OscConfig+0x3ec>
 80029c0:	e01b      	b.n	80029fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d2:	f7ff fa37 	bl	8001e44 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029da:	f7ff fa33 	bl	8001e44 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e1b7      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ec:	4b32      	ldr	r3, [pc, #200]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1ef      	bne.n	80029da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80a6 	beq.w	8002b54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10d      	bne.n	8002a34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a18:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	4a26      	ldr	r2, [pc, #152]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a24:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a34:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <HAL_RCC_OscConfig+0x508>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d118      	bne.n	8002a72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a40:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCC_OscConfig+0x508>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_RCC_OscConfig+0x508>)
 8002a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4c:	f7ff f9fa 	bl	8001e44 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7ff f9f6 	bl	8001e44 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e17a      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <HAL_RCC_OscConfig+0x508>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x4d8>
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a8a:	e029      	b.n	8002ae0 <HAL_RCC_OscConfig+0x52c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b05      	cmp	r3, #5
 8002a92:	d115      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x50c>
 8002a94:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	4a03      	ldr	r2, [pc, #12]	@ (8002ab8 <HAL_RCC_OscConfig+0x504>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCC_OscConfig+0x52c>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	4a9b      	ldr	r2, [pc, #620]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ad0:	4b98      	ldr	r3, [pc, #608]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a97      	ldr	r2, [pc, #604]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d016      	beq.n	8002b16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7ff f9ac 	bl	8001e44 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7ff f9a8 	bl	8001e44 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e12a      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b06:	4b8b      	ldr	r3, [pc, #556]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ed      	beq.n	8002af0 <HAL_RCC_OscConfig+0x53c>
 8002b14:	e015      	b.n	8002b42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b16:	f7ff f995 	bl	8001e44 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7ff f991 	bl	8001e44 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e113      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b34:	4b7f      	ldr	r3, [pc, #508]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ed      	bne.n	8002b1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b48:	4b7a      	ldr	r3, [pc, #488]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	4a79      	ldr	r2, [pc, #484]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80fe 	beq.w	8002d5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	f040 80d0 	bne.w	8002d08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b68:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d130      	bne.n	8002bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	3b01      	subs	r3, #1
 8002b88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d127      	bne.n	8002bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d11f      	bne.n	8002bde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ba8:	2a07      	cmp	r2, #7
 8002baa:	bf14      	ite	ne
 8002bac:	2201      	movne	r2, #1
 8002bae:	2200      	moveq	r2, #0
 8002bb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d113      	bne.n	8002bde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	085b      	lsrs	r3, r3, #1
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d06e      	beq.n	8002cbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d069      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002be4:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bf0:	4b50      	ldr	r3, [pc, #320]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0ad      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c00:	4b4c      	ldr	r3, [pc, #304]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a4b      	ldr	r2, [pc, #300]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c0c:	f7ff f91a 	bl	8001e44 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c14:	f7ff f916 	bl	8001e44 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e09a      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c26:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c32:	4b40      	ldr	r3, [pc, #256]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	4b40      	ldr	r3, [pc, #256]	@ (8002d38 <HAL_RCC_OscConfig+0x784>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c42:	3a01      	subs	r2, #1
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c4c:	0212      	lsls	r2, r2, #8
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c54:	0852      	lsrs	r2, r2, #1
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0552      	lsls	r2, r2, #21
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c60:	0852      	lsrs	r2, r2, #1
 8002c62:	3a01      	subs	r2, #1
 8002c64:	0652      	lsls	r2, r2, #25
 8002c66:	4311      	orrs	r1, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c6c:	0912      	lsrs	r2, r2, #4
 8002c6e:	0452      	lsls	r2, r2, #17
 8002c70:	430a      	orrs	r2, r1
 8002c72:	4930      	ldr	r1, [pc, #192]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c78:	4b2e      	ldr	r3, [pc, #184]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c84:	4b2b      	ldr	r3, [pc, #172]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c90:	f7ff f8d8 	bl	8001e44 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7ff f8d4 	bl	8001e44 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e058      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb6:	e050      	b.n	8002d5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04f      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d148      	bne.n	8002d5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cd4:	4b17      	ldr	r3, [pc, #92]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ce0:	f7ff f8b0 	bl	8001e44 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7ff f8ac 	bl	8001e44 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e030      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x734>
 8002d06:	e028      	b.n	8002d5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b0c      	cmp	r3, #12
 8002d0c:	d023      	beq.n	8002d56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <HAL_RCC_OscConfig+0x780>)
 8002d14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff f893 	bl	8001e44 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d20:	e00c      	b.n	8002d3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d22:	f7ff f88f 	bl	8001e44 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d905      	bls.n	8002d3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e013      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
 8002d34:	40021000 	.word	0x40021000
 8002d38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <HAL_RCC_OscConfig+0x7b0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1ec      	bne.n	8002d22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCC_OscConfig+0x7b0>)
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	4905      	ldr	r1, [pc, #20]	@ (8002d64 <HAL_RCC_OscConfig+0x7b0>)
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCC_OscConfig+0x7b4>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
 8002d54:	e001      	b.n	8002d5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000
 8002d68:	feeefffc 	.word	0xfeeefffc

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0e7      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b75      	ldr	r3, [pc, #468]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d910      	bls.n	8002db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b72      	ldr	r3, [pc, #456]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 0207 	bic.w	r2, r3, #7
 8002d96:	4970      	ldr	r1, [pc, #448]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0cf      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b66      	ldr	r3, [pc, #408]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b63      	ldr	r3, [pc, #396]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4960      	ldr	r1, [pc, #384]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d04c      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d121      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0a6      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e0a:	4b54      	ldr	r3, [pc, #336]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d115      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e09a      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e22:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e08e      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e32:	4b4a      	ldr	r3, [pc, #296]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e086      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b46      	ldr	r3, [pc, #280]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4943      	ldr	r1, [pc, #268]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e54:	f7fe fff6 	bl	8001e44 <HAL_GetTick>
 8002e58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fe fff2 	bl	8001e44 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e06e      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b3a      	ldr	r3, [pc, #232]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	4b31      	ldr	r3, [pc, #196]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d208      	bcs.n	8002eb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	492b      	ldr	r1, [pc, #172]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb2:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d210      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 0207 	bic.w	r2, r3, #7
 8002ec8:	4923      	ldr	r1, [pc, #140]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <HAL_RCC_ClockConfig+0x1ec>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e036      	b.n	8002f50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eee:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4918      	ldr	r1, [pc, #96]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4910      	ldr	r1, [pc, #64]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f20:	f000 f824 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b0d      	ldr	r3, [pc, #52]	@ (8002f5c <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	490b      	ldr	r1, [pc, #44]	@ (8002f60 <HAL_RCC_ClockConfig+0x1f4>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	4a09      	ldr	r2, [pc, #36]	@ (8002f64 <HAL_RCC_ClockConfig+0x1f8>)
 8002f3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_ClockConfig+0x1fc>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe ff2d 	bl	8001da4 <HAL_InitTick>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40022000 	.word	0x40022000
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08005000 	.word	0x08005000
 8002f64:	20000148 	.word	0x20000148
 8002f68:	2000014c 	.word	0x2000014c

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f84:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d121      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d11e      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fa0:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fac:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d102      	bne.n	8002fea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ff0:	4b23      	ldr	r3, [pc, #140]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ff2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d134      	bne.n	8003064 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0xa6>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d003      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0xac>
 8003010:	e005      	b.n	800301e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003012:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <HAL_RCC_GetSysClockFreq+0x110>)
 8003014:	617b      	str	r3, [r7, #20]
      break;
 8003016:	e005      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003018:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x114>)
 800301a:	617b      	str	r3, [r7, #20]
      break;
 800301c:	e002      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	617b      	str	r3, [r7, #20]
      break;
 8003022:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003024:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	3301      	adds	r3, #1
 8003030:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	0a1b      	lsrs	r3, r3, #8
 8003038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800304a:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x108>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0e5b      	lsrs	r3, r3, #25
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	3301      	adds	r3, #1
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003064:	69bb      	ldr	r3, [r7, #24]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	@ 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	08005010 	.word	0x08005010
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003090:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800309c:	f7ff fa26 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 80030a0:	6178      	str	r0, [r7, #20]
 80030a2:	e014      	b.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b25      	ldr	r3, [pc, #148]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a8:	4a24      	ldr	r2, [pc, #144]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80030b0:	4b22      	ldr	r3, [pc, #136]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030bc:	f7ff fa16 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 80030c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d4:	d10b      	bne.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b80      	cmp	r3, #128	@ 0x80
 80030da:	d919      	bls.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2ba0      	cmp	r3, #160	@ 0xa0
 80030e0:	d902      	bls.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e2:	2302      	movs	r3, #2
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	e013      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e8:	2301      	movs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	e010      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d902      	bls.n	80030fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030f4:	2303      	movs	r3, #3
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	e00a      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b80      	cmp	r3, #128	@ 0x80
 80030fe:	d102      	bne.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003100:	2302      	movs	r3, #2
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e004      	b.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b70      	cmp	r3, #112	@ 0x70
 800310a:	d101      	bne.n	8003110 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800310c:	2301      	movs	r3, #1
 800310e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f023 0207 	bic.w	r2, r3, #7
 8003118:	4909      	ldr	r1, [pc, #36]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003120:	4b07      	ldr	r3, [pc, #28]	@ (8003140 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	429a      	cmp	r2, r3
 800312c:	d001      	beq.n	8003132 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40021000 	.word	0x40021000
 8003140:	40022000 	.word	0x40022000

08003144 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e095      	b.n	8003282 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	2b00      	cmp	r3, #0
 800315c:	d108      	bne.n	8003170 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003166:	d009      	beq.n	800317c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
 800316e:	e005      	b.n	800317c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fbc8 	bl	800192c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031bc:	d902      	bls.n	80031c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e002      	b.n	80031ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031d2:	d007      	beq.n	80031e4 <HAL_SPI_Init+0xa0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 0204 	and.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003260:	ea42 0103 	orr.w	r1, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b088      	sub	sp, #32
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_SPI_Transmit+0x22>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e15f      	b.n	800356c <HAL_SPI_Transmit+0x2e2>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b4:	f7fe fdc6 	bl	8001e44 <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d002      	beq.n	80032d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ce:	e148      	b.n	8003562 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_SPI_Transmit+0x52>
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032e0:	e13f      	b.n	8003562 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	88fa      	ldrh	r2, [r7, #6]
 80032fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332c:	d10f      	bne.n	800334e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800334c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d007      	beq.n	800336c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800336a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003374:	d94f      	bls.n	8003416 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Transmit+0xfa>
 800337e:	8afb      	ldrh	r3, [r7, #22]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d142      	bne.n	800340a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033a8:	e02f      	b.n	800340a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d112      	bne.n	80033de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	1c9a      	adds	r2, r3, #2
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033dc:	e015      	b.n	800340a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033de:	f7fe fd31 	bl	8001e44 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d803      	bhi.n	80033f6 <HAL_SPI_Transmit+0x16c>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d102      	bne.n	80033fc <HAL_SPI_Transmit+0x172>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003408:	e0ab      	b.n	8003562 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ca      	bne.n	80033aa <HAL_SPI_Transmit+0x120>
 8003414:	e080      	b.n	8003518 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Transmit+0x19a>
 800341e:	8afb      	ldrh	r3, [r7, #22]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d174      	bne.n	800350e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d912      	bls.n	8003454 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	1c9a      	adds	r2, r3, #2
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b02      	subs	r3, #2
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003452:	e05c      	b.n	800350e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800347a:	e048      	b.n	800350e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b02      	cmp	r3, #2
 8003488:	d12b      	bne.n	80034e2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d912      	bls.n	80034ba <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	1c9a      	adds	r2, r3, #2
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b02      	subs	r3, #2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034b8:	e029      	b.n	800350e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034e0:	e015      	b.n	800350e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034e2:	f7fe fcaf 	bl	8001e44 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d803      	bhi.n	80034fa <HAL_SPI_Transmit+0x270>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d102      	bne.n	8003500 <HAL_SPI_Transmit+0x276>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800350c:	e029      	b.n	8003562 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1b1      	bne.n	800347c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	6839      	ldr	r1, [r7, #0]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fb69 	bl	8003bf4 <SPI_EndRxTxTransaction>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	77fb      	strb	r3, [r7, #31]
 8003558:	e003      	b.n	8003562 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800356a:	7ffb      	ldrb	r3, [r7, #31]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003582:	2301      	movs	r3, #1
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_SPI_TransmitReceive+0x26>
 8003596:	2302      	movs	r3, #2
 8003598:	e20a      	b.n	80039b0 <HAL_SPI_TransmitReceive+0x43c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a2:	f7fe fc4f 	bl	8001e44 <HAL_GetTick>
 80035a6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ae:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035be:	7efb      	ldrb	r3, [r7, #27]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d00e      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x6e>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ca:	d106      	bne.n	80035da <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <HAL_SPI_TransmitReceive+0x66>
 80035d4:	7efb      	ldrb	r3, [r7, #27]
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d003      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80035e0:	e1e0      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x80>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0x80>
 80035ee:	887b      	ldrh	r3, [r7, #2]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80035fa:	e1d3      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b04      	cmp	r3, #4
 8003606:	d003      	beq.n	8003610 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2205      	movs	r2, #5
 800360c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	887a      	ldrh	r2, [r7, #2]
 8003636:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	887a      	ldrh	r2, [r7, #2]
 800363c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003652:	d802      	bhi.n	800365a <HAL_SPI_TransmitReceive+0xe6>
 8003654:	8a3b      	ldrh	r3, [r7, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d908      	bls.n	800366c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	e007      	b.n	800367c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003686:	2b40      	cmp	r3, #64	@ 0x40
 8003688:	d007      	beq.n	800369a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036a2:	f240 8081 	bls.w	80037a8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x140>
 80036ae:	8a7b      	ldrh	r3, [r7, #18]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d16d      	bne.n	8003790 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	1c9a      	adds	r2, r3, #2
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d8:	e05a      	b.n	8003790 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d11b      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x1ac>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x1ac>
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d113      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d11c      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x1f4>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003744:	b292      	uxth	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	1c9a      	adds	r2, r3, #2
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003768:	f7fe fb6c 	bl	8001e44 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003774:	429a      	cmp	r2, r3
 8003776:	d80b      	bhi.n	8003790 <HAL_SPI_TransmitReceive+0x21c>
 8003778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377e:	d007      	beq.n	8003790 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800378e:	e109      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d19f      	bne.n	80036da <HAL_SPI_TransmitReceive+0x166>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d199      	bne.n	80036da <HAL_SPI_TransmitReceive+0x166>
 80037a6:	e0e3      	b.n	8003970 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_SPI_TransmitReceive+0x244>
 80037b0:	8a7b      	ldrh	r3, [r7, #18]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f040 80cf 	bne.w	8003956 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d912      	bls.n	80037e8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	1c9a      	adds	r2, r3, #2
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b02      	subs	r3, #2
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e6:	e0b6      	b.n	8003956 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	330c      	adds	r3, #12
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800380e:	e0a2      	b.n	8003956 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d134      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x314>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02f      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x314>
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	2b01      	cmp	r3, #1
 800382c:	d12c      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b01      	cmp	r3, #1
 8003836:	d912      	bls.n	800385e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	881a      	ldrh	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b02      	subs	r3, #2
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800385c:	e012      	b.n	8003884 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	7812      	ldrb	r2, [r2, #0]
 800386a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d148      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x3b4>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d042      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d923      	bls.n	80038f6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	b292      	uxth	r2, r2
 80038ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	1c9a      	adds	r2, r3, #2
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b02      	subs	r3, #2
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d81f      	bhi.n	8003924 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038f2:	605a      	str	r2, [r3, #4]
 80038f4:	e016      	b.n	8003924 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f103 020c 	add.w	r2, r3, #12
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	7812      	ldrb	r2, [r2, #0]
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003924:	2301      	movs	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003928:	f7fe fa8c 	bl	8001e44 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003934:	429a      	cmp	r2, r3
 8003936:	d803      	bhi.n	8003940 <HAL_SPI_TransmitReceive+0x3cc>
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d102      	bne.n	8003946 <HAL_SPI_TransmitReceive+0x3d2>
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003954:	e026      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f af57 	bne.w	8003810 <HAL_SPI_TransmitReceive+0x29c>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	f47f af50 	bne.w	8003810 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f93d 	bl	8003bf4 <SPI_EndRxTxTransaction>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399a:	e003      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039c8:	f7fe fa3c 	bl	8001e44 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039d8:	f7fe fa34 	bl	8001e44 <HAL_GetTick>
 80039dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039de:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	015b      	lsls	r3, r3, #5
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	e054      	b.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d050      	beq.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f8:	f7fe fa24 	bl	8001e44 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d902      	bls.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13d      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a26:	d111      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a30:	d004      	beq.n	8003a3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3a:	d107      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a54:	d10f      	bne.n	8003a76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e017      	b.n	8003aba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d19b      	bne.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3720      	adds	r7, #32
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000148 	.word	0x20000148

08003ac8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	@ 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ada:	f7fe f9b3 	bl	8001e44 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003aea:	f7fe f9ab 	bl	8001e44 <HAL_GetTick>
 8003aee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003af8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00da      	lsls	r2, r3, #3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0d1b      	lsrs	r3, r3, #20
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b10:	e060      	b.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b18:	d107      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d050      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b32:	f7fe f987 	bl	8001e44 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13d      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b60:	d111      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b6a:	d004      	beq.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b74:	d107      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8e:	d10f      	bne.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d196      	bne.n	8003b12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3728      	adds	r7, #40	@ 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000148 	.word	0x20000148

08003bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff5b 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d007      	beq.n	8003c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e027      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2180      	movs	r1, #128	@ 0x80
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff fec0 	bl	80039b8 <SPI_WaitFlagStateUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e014      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff ff34 	bl	8003ac8 <SPI_WaitFifoStateUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e000      	b.n	8003c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <malloc>:
 8003c80:	4b02      	ldr	r3, [pc, #8]	@ (8003c8c <malloc+0xc>)
 8003c82:	4601      	mov	r1, r0
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	f000 b82d 	b.w	8003ce4 <_malloc_r>
 8003c8a:	bf00      	nop
 8003c8c:	20000160 	.word	0x20000160

08003c90 <free>:
 8003c90:	4b02      	ldr	r3, [pc, #8]	@ (8003c9c <free+0xc>)
 8003c92:	4601      	mov	r1, r0
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	f000 bb2b 	b.w	80042f0 <_free_r>
 8003c9a:	bf00      	nop
 8003c9c:	20000160 	.word	0x20000160

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce0 <sbrk_aligned+0x40>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 fac2 	bl	8004234 <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 fabd 	bl	8004234 <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d103      	bne.n	8003cc6 <sbrk_aligned+0x26>
 8003cbe:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	1cc4      	adds	r4, r0, #3
 8003cc8:	f024 0403 	bic.w	r4, r4, #3
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d0f8      	beq.n	8003cc2 <sbrk_aligned+0x22>
 8003cd0:	1a21      	subs	r1, r4, r0
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 faae 	bl	8004234 <_sbrk_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d1f2      	bne.n	8003cc2 <sbrk_aligned+0x22>
 8003cdc:	e7ef      	b.n	8003cbe <sbrk_aligned+0x1e>
 8003cde:	bf00      	nop
 8003ce0:	20000374 	.word	0x20000374

08003ce4 <_malloc_r>:
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	1ccd      	adds	r5, r1, #3
 8003cea:	f025 0503 	bic.w	r5, r5, #3
 8003cee:	3508      	adds	r5, #8
 8003cf0:	2d0c      	cmp	r5, #12
 8003cf2:	bf38      	it	cc
 8003cf4:	250c      	movcc	r5, #12
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	db01      	blt.n	8003d00 <_malloc_r+0x1c>
 8003cfc:	42a9      	cmp	r1, r5
 8003cfe:	d904      	bls.n	8003d0a <_malloc_r+0x26>
 8003d00:	230c      	movs	r3, #12
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	2000      	movs	r0, #0
 8003d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de0 <_malloc_r+0xfc>
 8003d0e:	f000 f869 	bl	8003de4 <__malloc_lock>
 8003d12:	f8d8 3000 	ldr.w	r3, [r8]
 8003d16:	461c      	mov	r4, r3
 8003d18:	bb44      	cbnz	r4, 8003d6c <_malloc_r+0x88>
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff ffbf 	bl	8003ca0 <sbrk_aligned>
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	4604      	mov	r4, r0
 8003d26:	d158      	bne.n	8003dda <_malloc_r+0xf6>
 8003d28:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2c:	4627      	mov	r7, r4
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	d143      	bne.n	8003dba <_malloc_r+0xd6>
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	d04b      	beq.n	8003dce <_malloc_r+0xea>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	4639      	mov	r1, r7
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	eb04 0903 	add.w	r9, r4, r3
 8003d40:	f000 fa78 	bl	8004234 <_sbrk_r>
 8003d44:	4581      	cmp	r9, r0
 8003d46:	d142      	bne.n	8003dce <_malloc_r+0xea>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	1a6d      	subs	r5, r5, r1
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f7ff ffa6 	bl	8003ca0 <sbrk_aligned>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d03a      	beq.n	8003dce <_malloc_r+0xea>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	442b      	add	r3, r5
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	bb62      	cbnz	r2, 8003dc0 <_malloc_r+0xdc>
 8003d66:	f8c8 7000 	str.w	r7, [r8]
 8003d6a:	e00f      	b.n	8003d8c <_malloc_r+0xa8>
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	1b52      	subs	r2, r2, r5
 8003d70:	d420      	bmi.n	8003db4 <_malloc_r+0xd0>
 8003d72:	2a0b      	cmp	r2, #11
 8003d74:	d917      	bls.n	8003da6 <_malloc_r+0xc2>
 8003d76:	1961      	adds	r1, r4, r5
 8003d78:	42a3      	cmp	r3, r4
 8003d7a:	6025      	str	r5, [r4, #0]
 8003d7c:	bf18      	it	ne
 8003d7e:	6059      	strne	r1, [r3, #4]
 8003d80:	6863      	ldr	r3, [r4, #4]
 8003d82:	bf08      	it	eq
 8003d84:	f8c8 1000 	streq.w	r1, [r8]
 8003d88:	5162      	str	r2, [r4, r5]
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f000 f82f 	bl	8003df0 <__malloc_unlock>
 8003d92:	f104 000b 	add.w	r0, r4, #11
 8003d96:	1d23      	adds	r3, r4, #4
 8003d98:	f020 0007 	bic.w	r0, r0, #7
 8003d9c:	1ac2      	subs	r2, r0, r3
 8003d9e:	bf1c      	itt	ne
 8003da0:	1a1b      	subne	r3, r3, r0
 8003da2:	50a3      	strne	r3, [r4, r2]
 8003da4:	e7af      	b.n	8003d06 <_malloc_r+0x22>
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	bf0c      	ite	eq
 8003dac:	f8c8 2000 	streq.w	r2, [r8]
 8003db0:	605a      	strne	r2, [r3, #4]
 8003db2:	e7eb      	b.n	8003d8c <_malloc_r+0xa8>
 8003db4:	4623      	mov	r3, r4
 8003db6:	6864      	ldr	r4, [r4, #4]
 8003db8:	e7ae      	b.n	8003d18 <_malloc_r+0x34>
 8003dba:	463c      	mov	r4, r7
 8003dbc:	687f      	ldr	r7, [r7, #4]
 8003dbe:	e7b6      	b.n	8003d2e <_malloc_r+0x4a>
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	42a3      	cmp	r3, r4
 8003dc6:	d1fb      	bne.n	8003dc0 <_malloc_r+0xdc>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6053      	str	r3, [r2, #4]
 8003dcc:	e7de      	b.n	8003d8c <_malloc_r+0xa8>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f000 f80c 	bl	8003df0 <__malloc_unlock>
 8003dd8:	e794      	b.n	8003d04 <_malloc_r+0x20>
 8003dda:	6005      	str	r5, [r0, #0]
 8003ddc:	e7d6      	b.n	8003d8c <_malloc_r+0xa8>
 8003dde:	bf00      	nop
 8003de0:	20000378 	.word	0x20000378

08003de4 <__malloc_lock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	@ (8003dec <__malloc_lock+0x8>)
 8003de6:	f000 ba72 	b.w	80042ce <__retarget_lock_acquire_recursive>
 8003dea:	bf00      	nop
 8003dec:	200004bc 	.word	0x200004bc

08003df0 <__malloc_unlock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	@ (8003df8 <__malloc_unlock+0x8>)
 8003df2:	f000 ba6d 	b.w	80042d0 <__retarget_lock_release_recursive>
 8003df6:	bf00      	nop
 8003df8:	200004bc 	.word	0x200004bc

08003dfc <std>:
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	4604      	mov	r4, r0
 8003e02:	e9c0 3300 	strd	r3, r3, [r0]
 8003e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0a:	6083      	str	r3, [r0, #8]
 8003e0c:	8181      	strh	r1, [r0, #12]
 8003e0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e10:	81c2      	strh	r2, [r0, #14]
 8003e12:	6183      	str	r3, [r0, #24]
 8003e14:	4619      	mov	r1, r3
 8003e16:	2208      	movs	r2, #8
 8003e18:	305c      	adds	r0, #92	@ 0x5c
 8003e1a:	f000 f9cf 	bl	80041bc <memset>
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <std+0x58>)
 8003e20:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <std+0x5c>)
 8003e24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <std+0x60>)
 8003e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <std+0x64>)
 8003e2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <std+0x68>)
 8003e30:	6224      	str	r4, [r4, #32]
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d006      	beq.n	8003e44 <std+0x48>
 8003e36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e3a:	4294      	cmp	r4, r2
 8003e3c:	d002      	beq.n	8003e44 <std+0x48>
 8003e3e:	33d0      	adds	r3, #208	@ 0xd0
 8003e40:	429c      	cmp	r4, r3
 8003e42:	d105      	bne.n	8003e50 <std+0x54>
 8003e44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e4c:	f000 ba3e 	b.w	80042cc <__retarget_lock_init_recursive>
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	0800400d 	.word	0x0800400d
 8003e58:	0800402f 	.word	0x0800402f
 8003e5c:	08004067 	.word	0x08004067
 8003e60:	0800408b 	.word	0x0800408b
 8003e64:	2000037c 	.word	0x2000037c

08003e68 <stdio_exit_handler>:
 8003e68:	4a02      	ldr	r2, [pc, #8]	@ (8003e74 <stdio_exit_handler+0xc>)
 8003e6a:	4903      	ldr	r1, [pc, #12]	@ (8003e78 <stdio_exit_handler+0x10>)
 8003e6c:	4803      	ldr	r0, [pc, #12]	@ (8003e7c <stdio_exit_handler+0x14>)
 8003e6e:	f000 b869 	b.w	8003f44 <_fwalk_sglue>
 8003e72:	bf00      	nop
 8003e74:	20000154 	.word	0x20000154
 8003e78:	08004cdd 	.word	0x08004cdd
 8003e7c:	20000164 	.word	0x20000164

08003e80 <cleanup_stdio>:
 8003e80:	6841      	ldr	r1, [r0, #4]
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <cleanup_stdio+0x34>)
 8003e84:	4299      	cmp	r1, r3
 8003e86:	b510      	push	{r4, lr}
 8003e88:	4604      	mov	r4, r0
 8003e8a:	d001      	beq.n	8003e90 <cleanup_stdio+0x10>
 8003e8c:	f000 ff26 	bl	8004cdc <_fflush_r>
 8003e90:	68a1      	ldr	r1, [r4, #8]
 8003e92:	4b09      	ldr	r3, [pc, #36]	@ (8003eb8 <cleanup_stdio+0x38>)
 8003e94:	4299      	cmp	r1, r3
 8003e96:	d002      	beq.n	8003e9e <cleanup_stdio+0x1e>
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f000 ff1f 	bl	8004cdc <_fflush_r>
 8003e9e:	68e1      	ldr	r1, [r4, #12]
 8003ea0:	4b06      	ldr	r3, [pc, #24]	@ (8003ebc <cleanup_stdio+0x3c>)
 8003ea2:	4299      	cmp	r1, r3
 8003ea4:	d004      	beq.n	8003eb0 <cleanup_stdio+0x30>
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eac:	f000 bf16 	b.w	8004cdc <_fflush_r>
 8003eb0:	bd10      	pop	{r4, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000037c 	.word	0x2000037c
 8003eb8:	200003e4 	.word	0x200003e4
 8003ebc:	2000044c 	.word	0x2000044c

08003ec0 <global_stdio_init.part.0>:
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <global_stdio_init.part.0+0x30>)
 8003ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8003ef4 <global_stdio_init.part.0+0x34>)
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef8 <global_stdio_init.part.0+0x38>)
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4620      	mov	r0, r4
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2104      	movs	r1, #4
 8003ed0:	f7ff ff94 	bl	8003dfc <std>
 8003ed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2109      	movs	r1, #9
 8003edc:	f7ff ff8e 	bl	8003dfc <std>
 8003ee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eea:	2112      	movs	r1, #18
 8003eec:	f7ff bf86 	b.w	8003dfc <std>
 8003ef0:	200004b4 	.word	0x200004b4
 8003ef4:	2000037c 	.word	0x2000037c
 8003ef8:	08003e69 	.word	0x08003e69

08003efc <__sfp_lock_acquire>:
 8003efc:	4801      	ldr	r0, [pc, #4]	@ (8003f04 <__sfp_lock_acquire+0x8>)
 8003efe:	f000 b9e6 	b.w	80042ce <__retarget_lock_acquire_recursive>
 8003f02:	bf00      	nop
 8003f04:	200004bd 	.word	0x200004bd

08003f08 <__sfp_lock_release>:
 8003f08:	4801      	ldr	r0, [pc, #4]	@ (8003f10 <__sfp_lock_release+0x8>)
 8003f0a:	f000 b9e1 	b.w	80042d0 <__retarget_lock_release_recursive>
 8003f0e:	bf00      	nop
 8003f10:	200004bd 	.word	0x200004bd

08003f14 <__sinit>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	4604      	mov	r4, r0
 8003f18:	f7ff fff0 	bl	8003efc <__sfp_lock_acquire>
 8003f1c:	6a23      	ldr	r3, [r4, #32]
 8003f1e:	b11b      	cbz	r3, 8003f28 <__sinit+0x14>
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f24:	f7ff bff0 	b.w	8003f08 <__sfp_lock_release>
 8003f28:	4b04      	ldr	r3, [pc, #16]	@ (8003f3c <__sinit+0x28>)
 8003f2a:	6223      	str	r3, [r4, #32]
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <__sinit+0x2c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f5      	bne.n	8003f20 <__sinit+0xc>
 8003f34:	f7ff ffc4 	bl	8003ec0 <global_stdio_init.part.0>
 8003f38:	e7f2      	b.n	8003f20 <__sinit+0xc>
 8003f3a:	bf00      	nop
 8003f3c:	08003e81 	.word	0x08003e81
 8003f40:	200004b4 	.word	0x200004b4

08003f44 <_fwalk_sglue>:
 8003f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f48:	4607      	mov	r7, r0
 8003f4a:	4688      	mov	r8, r1
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	2600      	movs	r6, #0
 8003f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f54:	f1b9 0901 	subs.w	r9, r9, #1
 8003f58:	d505      	bpl.n	8003f66 <_fwalk_sglue+0x22>
 8003f5a:	6824      	ldr	r4, [r4, #0]
 8003f5c:	2c00      	cmp	r4, #0
 8003f5e:	d1f7      	bne.n	8003f50 <_fwalk_sglue+0xc>
 8003f60:	4630      	mov	r0, r6
 8003f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f66:	89ab      	ldrh	r3, [r5, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d907      	bls.n	8003f7c <_fwalk_sglue+0x38>
 8003f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f70:	3301      	adds	r3, #1
 8003f72:	d003      	beq.n	8003f7c <_fwalk_sglue+0x38>
 8003f74:	4629      	mov	r1, r5
 8003f76:	4638      	mov	r0, r7
 8003f78:	47c0      	blx	r8
 8003f7a:	4306      	orrs	r6, r0
 8003f7c:	3568      	adds	r5, #104	@ 0x68
 8003f7e:	e7e9      	b.n	8003f54 <_fwalk_sglue+0x10>

08003f80 <iprintf>:
 8003f80:	b40f      	push	{r0, r1, r2, r3}
 8003f82:	b507      	push	{r0, r1, r2, lr}
 8003f84:	4906      	ldr	r1, [pc, #24]	@ (8003fa0 <iprintf+0x20>)
 8003f86:	ab04      	add	r3, sp, #16
 8003f88:	6808      	ldr	r0, [r1, #0]
 8003f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f8e:	6881      	ldr	r1, [r0, #8]
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	f000 fb79 	bl	8004688 <_vfiprintf_r>
 8003f96:	b003      	add	sp, #12
 8003f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f9c:	b004      	add	sp, #16
 8003f9e:	4770      	bx	lr
 8003fa0:	20000160 	.word	0x20000160

08003fa4 <sniprintf>:
 8003fa4:	b40c      	push	{r2, r3}
 8003fa6:	b530      	push	{r4, r5, lr}
 8003fa8:	4b17      	ldr	r3, [pc, #92]	@ (8004008 <sniprintf+0x64>)
 8003faa:	1e0c      	subs	r4, r1, #0
 8003fac:	681d      	ldr	r5, [r3, #0]
 8003fae:	b09d      	sub	sp, #116	@ 0x74
 8003fb0:	da08      	bge.n	8003fc4 <sniprintf+0x20>
 8003fb2:	238b      	movs	r3, #139	@ 0x8b
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fba:	b01d      	add	sp, #116	@ 0x74
 8003fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fc0:	b002      	add	sp, #8
 8003fc2:	4770      	bx	lr
 8003fc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003fc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003fcc:	bf14      	ite	ne
 8003fce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003fd2:	4623      	moveq	r3, r4
 8003fd4:	9304      	str	r3, [sp, #16]
 8003fd6:	9307      	str	r3, [sp, #28]
 8003fd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fdc:	9002      	str	r0, [sp, #8]
 8003fde:	9006      	str	r0, [sp, #24]
 8003fe0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003fe4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003fe6:	ab21      	add	r3, sp, #132	@ 0x84
 8003fe8:	a902      	add	r1, sp, #8
 8003fea:	4628      	mov	r0, r5
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	f000 fa25 	bl	800443c <_svfiprintf_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	bfbc      	itt	lt
 8003ff6:	238b      	movlt	r3, #139	@ 0x8b
 8003ff8:	602b      	strlt	r3, [r5, #0]
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d0dd      	beq.n	8003fba <sniprintf+0x16>
 8003ffe:	9b02      	ldr	r3, [sp, #8]
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e7d9      	b.n	8003fba <sniprintf+0x16>
 8004006:	bf00      	nop
 8004008:	20000160 	.word	0x20000160

0800400c <__sread>:
 800400c:	b510      	push	{r4, lr}
 800400e:	460c      	mov	r4, r1
 8004010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004014:	f000 f8fc 	bl	8004210 <_read_r>
 8004018:	2800      	cmp	r0, #0
 800401a:	bfab      	itete	ge
 800401c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800401e:	89a3      	ldrhlt	r3, [r4, #12]
 8004020:	181b      	addge	r3, r3, r0
 8004022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004026:	bfac      	ite	ge
 8004028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800402a:	81a3      	strhlt	r3, [r4, #12]
 800402c:	bd10      	pop	{r4, pc}

0800402e <__swrite>:
 800402e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004032:	461f      	mov	r7, r3
 8004034:	898b      	ldrh	r3, [r1, #12]
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	4605      	mov	r5, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4616      	mov	r6, r2
 800403e:	d505      	bpl.n	800404c <__swrite+0x1e>
 8004040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004044:	2302      	movs	r3, #2
 8004046:	2200      	movs	r2, #0
 8004048:	f000 f8d0 	bl	80041ec <_lseek_r>
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	4632      	mov	r2, r6
 800405a:	463b      	mov	r3, r7
 800405c:	4628      	mov	r0, r5
 800405e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004062:	f000 b8f7 	b.w	8004254 <_write_r>

08004066 <__sseek>:
 8004066:	b510      	push	{r4, lr}
 8004068:	460c      	mov	r4, r1
 800406a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800406e:	f000 f8bd 	bl	80041ec <_lseek_r>
 8004072:	1c43      	adds	r3, r0, #1
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	bf15      	itete	ne
 8004078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800407a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800407e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004082:	81a3      	strheq	r3, [r4, #12]
 8004084:	bf18      	it	ne
 8004086:	81a3      	strhne	r3, [r4, #12]
 8004088:	bd10      	pop	{r4, pc}

0800408a <__sclose>:
 800408a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408e:	f000 b89d 	b.w	80041cc <_close_r>

08004092 <__swbuf_r>:
 8004092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004094:	460e      	mov	r6, r1
 8004096:	4614      	mov	r4, r2
 8004098:	4605      	mov	r5, r0
 800409a:	b118      	cbz	r0, 80040a4 <__swbuf_r+0x12>
 800409c:	6a03      	ldr	r3, [r0, #32]
 800409e:	b90b      	cbnz	r3, 80040a4 <__swbuf_r+0x12>
 80040a0:	f7ff ff38 	bl	8003f14 <__sinit>
 80040a4:	69a3      	ldr	r3, [r4, #24]
 80040a6:	60a3      	str	r3, [r4, #8]
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	071a      	lsls	r2, r3, #28
 80040ac:	d501      	bpl.n	80040b2 <__swbuf_r+0x20>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	b943      	cbnz	r3, 80040c4 <__swbuf_r+0x32>
 80040b2:	4621      	mov	r1, r4
 80040b4:	4628      	mov	r0, r5
 80040b6:	f000 f82b 	bl	8004110 <__swsetup_r>
 80040ba:	b118      	cbz	r0, 80040c4 <__swbuf_r+0x32>
 80040bc:	f04f 37ff 	mov.w	r7, #4294967295
 80040c0:	4638      	mov	r0, r7
 80040c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	6922      	ldr	r2, [r4, #16]
 80040c8:	1a98      	subs	r0, r3, r2
 80040ca:	6963      	ldr	r3, [r4, #20]
 80040cc:	b2f6      	uxtb	r6, r6
 80040ce:	4283      	cmp	r3, r0
 80040d0:	4637      	mov	r7, r6
 80040d2:	dc05      	bgt.n	80040e0 <__swbuf_r+0x4e>
 80040d4:	4621      	mov	r1, r4
 80040d6:	4628      	mov	r0, r5
 80040d8:	f000 fe00 	bl	8004cdc <_fflush_r>
 80040dc:	2800      	cmp	r0, #0
 80040de:	d1ed      	bne.n	80040bc <__swbuf_r+0x2a>
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	60a3      	str	r3, [r4, #8]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	701e      	strb	r6, [r3, #0]
 80040ee:	6962      	ldr	r2, [r4, #20]
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d004      	beq.n	8004100 <__swbuf_r+0x6e>
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	07db      	lsls	r3, r3, #31
 80040fa:	d5e1      	bpl.n	80040c0 <__swbuf_r+0x2e>
 80040fc:	2e0a      	cmp	r6, #10
 80040fe:	d1df      	bne.n	80040c0 <__swbuf_r+0x2e>
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 fdea 	bl	8004cdc <_fflush_r>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0d9      	beq.n	80040c0 <__swbuf_r+0x2e>
 800410c:	e7d6      	b.n	80040bc <__swbuf_r+0x2a>
	...

08004110 <__swsetup_r>:
 8004110:	b538      	push	{r3, r4, r5, lr}
 8004112:	4b29      	ldr	r3, [pc, #164]	@ (80041b8 <__swsetup_r+0xa8>)
 8004114:	4605      	mov	r5, r0
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	460c      	mov	r4, r1
 800411a:	b118      	cbz	r0, 8004124 <__swsetup_r+0x14>
 800411c:	6a03      	ldr	r3, [r0, #32]
 800411e:	b90b      	cbnz	r3, 8004124 <__swsetup_r+0x14>
 8004120:	f7ff fef8 	bl	8003f14 <__sinit>
 8004124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004128:	0719      	lsls	r1, r3, #28
 800412a:	d422      	bmi.n	8004172 <__swsetup_r+0x62>
 800412c:	06da      	lsls	r2, r3, #27
 800412e:	d407      	bmi.n	8004140 <__swsetup_r+0x30>
 8004130:	2209      	movs	r2, #9
 8004132:	602a      	str	r2, [r5, #0]
 8004134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004138:	81a3      	strh	r3, [r4, #12]
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	e033      	b.n	80041a8 <__swsetup_r+0x98>
 8004140:	0758      	lsls	r0, r3, #29
 8004142:	d512      	bpl.n	800416a <__swsetup_r+0x5a>
 8004144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004146:	b141      	cbz	r1, 800415a <__swsetup_r+0x4a>
 8004148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800414c:	4299      	cmp	r1, r3
 800414e:	d002      	beq.n	8004156 <__swsetup_r+0x46>
 8004150:	4628      	mov	r0, r5
 8004152:	f000 f8cd 	bl	80042f0 <_free_r>
 8004156:	2300      	movs	r3, #0
 8004158:	6363      	str	r3, [r4, #52]	@ 0x34
 800415a:	89a3      	ldrh	r3, [r4, #12]
 800415c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004160:	81a3      	strh	r3, [r4, #12]
 8004162:	2300      	movs	r3, #0
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	6923      	ldr	r3, [r4, #16]
 8004168:	6023      	str	r3, [r4, #0]
 800416a:	89a3      	ldrh	r3, [r4, #12]
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	81a3      	strh	r3, [r4, #12]
 8004172:	6923      	ldr	r3, [r4, #16]
 8004174:	b94b      	cbnz	r3, 800418a <__swsetup_r+0x7a>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800417c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004180:	d003      	beq.n	800418a <__swsetup_r+0x7a>
 8004182:	4621      	mov	r1, r4
 8004184:	4628      	mov	r0, r5
 8004186:	f000 fdf7 	bl	8004d78 <__smakebuf_r>
 800418a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800418e:	f013 0201 	ands.w	r2, r3, #1
 8004192:	d00a      	beq.n	80041aa <__swsetup_r+0x9a>
 8004194:	2200      	movs	r2, #0
 8004196:	60a2      	str	r2, [r4, #8]
 8004198:	6962      	ldr	r2, [r4, #20]
 800419a:	4252      	negs	r2, r2
 800419c:	61a2      	str	r2, [r4, #24]
 800419e:	6922      	ldr	r2, [r4, #16]
 80041a0:	b942      	cbnz	r2, 80041b4 <__swsetup_r+0xa4>
 80041a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80041a6:	d1c5      	bne.n	8004134 <__swsetup_r+0x24>
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
 80041aa:	0799      	lsls	r1, r3, #30
 80041ac:	bf58      	it	pl
 80041ae:	6962      	ldrpl	r2, [r4, #20]
 80041b0:	60a2      	str	r2, [r4, #8]
 80041b2:	e7f4      	b.n	800419e <__swsetup_r+0x8e>
 80041b4:	2000      	movs	r0, #0
 80041b6:	e7f7      	b.n	80041a8 <__swsetup_r+0x98>
 80041b8:	20000160 	.word	0x20000160

080041bc <memset>:
 80041bc:	4402      	add	r2, r0
 80041be:	4603      	mov	r3, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <_close_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4d06      	ldr	r5, [pc, #24]	@ (80041e8 <_close_r+0x1c>)
 80041d0:	2300      	movs	r3, #0
 80041d2:	4604      	mov	r4, r0
 80041d4:	4608      	mov	r0, r1
 80041d6:	602b      	str	r3, [r5, #0]
 80041d8:	f7fd fc72 	bl	8001ac0 <_close>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_close_r+0x1a>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_close_r+0x1a>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200004b8 	.word	0x200004b8

080041ec <_lseek_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d07      	ldr	r5, [pc, #28]	@ (800420c <_lseek_r+0x20>)
 80041f0:	4604      	mov	r4, r0
 80041f2:	4608      	mov	r0, r1
 80041f4:	4611      	mov	r1, r2
 80041f6:	2200      	movs	r2, #0
 80041f8:	602a      	str	r2, [r5, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	f7fd fc87 	bl	8001b0e <_lseek>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <_lseek_r+0x1e>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	b103      	cbz	r3, 800420a <_lseek_r+0x1e>
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	bd38      	pop	{r3, r4, r5, pc}
 800420c:	200004b8 	.word	0x200004b8

08004210 <_read_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4d07      	ldr	r5, [pc, #28]	@ (8004230 <_read_r+0x20>)
 8004214:	4604      	mov	r4, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fd fc04 	bl	8001a2c <_read>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_read_r+0x1e>
 8004228:	682b      	ldr	r3, [r5, #0]
 800422a:	b103      	cbz	r3, 800422e <_read_r+0x1e>
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	200004b8 	.word	0x200004b8

08004234 <_sbrk_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4d06      	ldr	r5, [pc, #24]	@ (8004250 <_sbrk_r+0x1c>)
 8004238:	2300      	movs	r3, #0
 800423a:	4604      	mov	r4, r0
 800423c:	4608      	mov	r0, r1
 800423e:	602b      	str	r3, [r5, #0]
 8004240:	f7fd fc12 	bl	8001a68 <_sbrk>
 8004244:	1c43      	adds	r3, r0, #1
 8004246:	d102      	bne.n	800424e <_sbrk_r+0x1a>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	b103      	cbz	r3, 800424e <_sbrk_r+0x1a>
 800424c:	6023      	str	r3, [r4, #0]
 800424e:	bd38      	pop	{r3, r4, r5, pc}
 8004250:	200004b8 	.word	0x200004b8

08004254 <_write_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	4d07      	ldr	r5, [pc, #28]	@ (8004274 <_write_r+0x20>)
 8004258:	4604      	mov	r4, r0
 800425a:	4608      	mov	r0, r1
 800425c:	4611      	mov	r1, r2
 800425e:	2200      	movs	r2, #0
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	f7fc ffcd 	bl	8001202 <_write>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_write_r+0x1e>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_write_r+0x1e>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200004b8 	.word	0x200004b8

08004278 <__errno>:
 8004278:	4b01      	ldr	r3, [pc, #4]	@ (8004280 <__errno+0x8>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000160 	.word	0x20000160

08004284 <__libc_init_array>:
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	4d0d      	ldr	r5, [pc, #52]	@ (80042bc <__libc_init_array+0x38>)
 8004288:	4c0d      	ldr	r4, [pc, #52]	@ (80042c0 <__libc_init_array+0x3c>)
 800428a:	1b64      	subs	r4, r4, r5
 800428c:	10a4      	asrs	r4, r4, #2
 800428e:	2600      	movs	r6, #0
 8004290:	42a6      	cmp	r6, r4
 8004292:	d109      	bne.n	80042a8 <__libc_init_array+0x24>
 8004294:	4d0b      	ldr	r5, [pc, #44]	@ (80042c4 <__libc_init_array+0x40>)
 8004296:	4c0c      	ldr	r4, [pc, #48]	@ (80042c8 <__libc_init_array+0x44>)
 8004298:	f000 fe1c 	bl	8004ed4 <_init>
 800429c:	1b64      	subs	r4, r4, r5
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	2600      	movs	r6, #0
 80042a2:	42a6      	cmp	r6, r4
 80042a4:	d105      	bne.n	80042b2 <__libc_init_array+0x2e>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ac:	4798      	blx	r3
 80042ae:	3601      	adds	r6, #1
 80042b0:	e7ee      	b.n	8004290 <__libc_init_array+0xc>
 80042b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b6:	4798      	blx	r3
 80042b8:	3601      	adds	r6, #1
 80042ba:	e7f2      	b.n	80042a2 <__libc_init_array+0x1e>
 80042bc:	0800507c 	.word	0x0800507c
 80042c0:	0800507c 	.word	0x0800507c
 80042c4:	0800507c 	.word	0x0800507c
 80042c8:	08005080 	.word	0x08005080

080042cc <__retarget_lock_init_recursive>:
 80042cc:	4770      	bx	lr

080042ce <__retarget_lock_acquire_recursive>:
 80042ce:	4770      	bx	lr

080042d0 <__retarget_lock_release_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <memcpy>:
 80042d2:	440a      	add	r2, r1
 80042d4:	4291      	cmp	r1, r2
 80042d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80042da:	d100      	bne.n	80042de <memcpy+0xc>
 80042dc:	4770      	bx	lr
 80042de:	b510      	push	{r4, lr}
 80042e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e8:	4291      	cmp	r1, r2
 80042ea:	d1f9      	bne.n	80042e0 <memcpy+0xe>
 80042ec:	bd10      	pop	{r4, pc}
	...

080042f0 <_free_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4605      	mov	r5, r0
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d041      	beq.n	800437c <_free_r+0x8c>
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f0c      	subs	r4, r1, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfb8      	it	lt
 8004302:	18e4      	addlt	r4, r4, r3
 8004304:	f7ff fd6e 	bl	8003de4 <__malloc_lock>
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <_free_r+0x90>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b933      	cbnz	r3, 800431c <_free_r+0x2c>
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6014      	str	r4, [r2, #0]
 8004312:	4628      	mov	r0, r5
 8004314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004318:	f7ff bd6a 	b.w	8003df0 <__malloc_unlock>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d908      	bls.n	8004332 <_free_r+0x42>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	1821      	adds	r1, r4, r0
 8004324:	428b      	cmp	r3, r1
 8004326:	bf01      	itttt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	1809      	addeq	r1, r1, r0
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	e7ed      	b.n	800430e <_free_r+0x1e>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x4c>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x42>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1850      	adds	r0, r2, r1
 8004340:	42a0      	cmp	r0, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x6c>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	4401      	add	r1, r0
 8004348:	1850      	adds	r0, r2, r1
 800434a:	4283      	cmp	r3, r0
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1e0      	bne.n	8004312 <_free_r+0x22>
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6053      	str	r3, [r2, #4]
 8004356:	4408      	add	r0, r1
 8004358:	6010      	str	r0, [r2, #0]
 800435a:	e7da      	b.n	8004312 <_free_r+0x22>
 800435c:	d902      	bls.n	8004364 <_free_r+0x74>
 800435e:	230c      	movs	r3, #12
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	e7d6      	b.n	8004312 <_free_r+0x22>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	1821      	adds	r1, r4, r0
 8004368:	428b      	cmp	r3, r1
 800436a:	bf04      	itt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	6063      	str	r3, [r4, #4]
 8004372:	bf04      	itt	eq
 8004374:	1809      	addeq	r1, r1, r0
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6054      	str	r4, [r2, #4]
 800437a:	e7ca      	b.n	8004312 <_free_r+0x22>
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20000378 	.word	0x20000378

08004384 <__ssputs_r>:
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	688e      	ldr	r6, [r1, #8]
 800438a:	461f      	mov	r7, r3
 800438c:	42be      	cmp	r6, r7
 800438e:	680b      	ldr	r3, [r1, #0]
 8004390:	4682      	mov	sl, r0
 8004392:	460c      	mov	r4, r1
 8004394:	4690      	mov	r8, r2
 8004396:	d82d      	bhi.n	80043f4 <__ssputs_r+0x70>
 8004398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800439c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043a0:	d026      	beq.n	80043f0 <__ssputs_r+0x6c>
 80043a2:	6965      	ldr	r5, [r4, #20]
 80043a4:	6909      	ldr	r1, [r1, #16]
 80043a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043aa:	eba3 0901 	sub.w	r9, r3, r1
 80043ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043b2:	1c7b      	adds	r3, r7, #1
 80043b4:	444b      	add	r3, r9
 80043b6:	106d      	asrs	r5, r5, #1
 80043b8:	429d      	cmp	r5, r3
 80043ba:	bf38      	it	cc
 80043bc:	461d      	movcc	r5, r3
 80043be:	0553      	lsls	r3, r2, #21
 80043c0:	d527      	bpl.n	8004412 <__ssputs_r+0x8e>
 80043c2:	4629      	mov	r1, r5
 80043c4:	f7ff fc8e 	bl	8003ce4 <_malloc_r>
 80043c8:	4606      	mov	r6, r0
 80043ca:	b360      	cbz	r0, 8004426 <__ssputs_r+0xa2>
 80043cc:	6921      	ldr	r1, [r4, #16]
 80043ce:	464a      	mov	r2, r9
 80043d0:	f7ff ff7f 	bl	80042d2 <memcpy>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	6126      	str	r6, [r4, #16]
 80043e2:	6165      	str	r5, [r4, #20]
 80043e4:	444e      	add	r6, r9
 80043e6:	eba5 0509 	sub.w	r5, r5, r9
 80043ea:	6026      	str	r6, [r4, #0]
 80043ec:	60a5      	str	r5, [r4, #8]
 80043ee:	463e      	mov	r6, r7
 80043f0:	42be      	cmp	r6, r7
 80043f2:	d900      	bls.n	80043f6 <__ssputs_r+0x72>
 80043f4:	463e      	mov	r6, r7
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	4632      	mov	r2, r6
 80043fa:	4641      	mov	r1, r8
 80043fc:	f000 fcf8 	bl	8004df0 <memmove>
 8004400:	68a3      	ldr	r3, [r4, #8]
 8004402:	1b9b      	subs	r3, r3, r6
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	4433      	add	r3, r6
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	2000      	movs	r0, #0
 800440e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004412:	462a      	mov	r2, r5
 8004414:	f000 fd28 	bl	8004e68 <_realloc_r>
 8004418:	4606      	mov	r6, r0
 800441a:	2800      	cmp	r0, #0
 800441c:	d1e0      	bne.n	80043e0 <__ssputs_r+0x5c>
 800441e:	6921      	ldr	r1, [r4, #16]
 8004420:	4650      	mov	r0, sl
 8004422:	f7ff ff65 	bl	80042f0 <_free_r>
 8004426:	230c      	movs	r3, #12
 8004428:	f8ca 3000 	str.w	r3, [sl]
 800442c:	89a3      	ldrh	r3, [r4, #12]
 800442e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004432:	81a3      	strh	r3, [r4, #12]
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	e7e9      	b.n	800440e <__ssputs_r+0x8a>
	...

0800443c <_svfiprintf_r>:
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004440:	4698      	mov	r8, r3
 8004442:	898b      	ldrh	r3, [r1, #12]
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	b09d      	sub	sp, #116	@ 0x74
 8004448:	4607      	mov	r7, r0
 800444a:	460d      	mov	r5, r1
 800444c:	4614      	mov	r4, r2
 800444e:	d510      	bpl.n	8004472 <_svfiprintf_r+0x36>
 8004450:	690b      	ldr	r3, [r1, #16]
 8004452:	b973      	cbnz	r3, 8004472 <_svfiprintf_r+0x36>
 8004454:	2140      	movs	r1, #64	@ 0x40
 8004456:	f7ff fc45 	bl	8003ce4 <_malloc_r>
 800445a:	6028      	str	r0, [r5, #0]
 800445c:	6128      	str	r0, [r5, #16]
 800445e:	b930      	cbnz	r0, 800446e <_svfiprintf_r+0x32>
 8004460:	230c      	movs	r3, #12
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b01d      	add	sp, #116	@ 0x74
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	2340      	movs	r3, #64	@ 0x40
 8004470:	616b      	str	r3, [r5, #20]
 8004472:	2300      	movs	r3, #0
 8004474:	9309      	str	r3, [sp, #36]	@ 0x24
 8004476:	2320      	movs	r3, #32
 8004478:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800447c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004480:	2330      	movs	r3, #48	@ 0x30
 8004482:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004620 <_svfiprintf_r+0x1e4>
 8004486:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800448a:	f04f 0901 	mov.w	r9, #1
 800448e:	4623      	mov	r3, r4
 8004490:	469a      	mov	sl, r3
 8004492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004496:	b10a      	cbz	r2, 800449c <_svfiprintf_r+0x60>
 8004498:	2a25      	cmp	r2, #37	@ 0x25
 800449a:	d1f9      	bne.n	8004490 <_svfiprintf_r+0x54>
 800449c:	ebba 0b04 	subs.w	fp, sl, r4
 80044a0:	d00b      	beq.n	80044ba <_svfiprintf_r+0x7e>
 80044a2:	465b      	mov	r3, fp
 80044a4:	4622      	mov	r2, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff ff6b 	bl	8004384 <__ssputs_r>
 80044ae:	3001      	adds	r0, #1
 80044b0:	f000 80a7 	beq.w	8004602 <_svfiprintf_r+0x1c6>
 80044b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044b6:	445a      	add	r2, fp
 80044b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044ba:	f89a 3000 	ldrb.w	r3, [sl]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 809f 	beq.w	8004602 <_svfiprintf_r+0x1c6>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ce:	f10a 0a01 	add.w	sl, sl, #1
 80044d2:	9304      	str	r3, [sp, #16]
 80044d4:	9307      	str	r3, [sp, #28]
 80044d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044da:	931a      	str	r3, [sp, #104]	@ 0x68
 80044dc:	4654      	mov	r4, sl
 80044de:	2205      	movs	r2, #5
 80044e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e4:	484e      	ldr	r0, [pc, #312]	@ (8004620 <_svfiprintf_r+0x1e4>)
 80044e6:	f7fb fe73 	bl	80001d0 <memchr>
 80044ea:	9a04      	ldr	r2, [sp, #16]
 80044ec:	b9d8      	cbnz	r0, 8004526 <_svfiprintf_r+0xea>
 80044ee:	06d0      	lsls	r0, r2, #27
 80044f0:	bf44      	itt	mi
 80044f2:	2320      	movmi	r3, #32
 80044f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044f8:	0711      	lsls	r1, r2, #28
 80044fa:	bf44      	itt	mi
 80044fc:	232b      	movmi	r3, #43	@ 0x2b
 80044fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004502:	f89a 3000 	ldrb.w	r3, [sl]
 8004506:	2b2a      	cmp	r3, #42	@ 0x2a
 8004508:	d015      	beq.n	8004536 <_svfiprintf_r+0xfa>
 800450a:	9a07      	ldr	r2, [sp, #28]
 800450c:	4654      	mov	r4, sl
 800450e:	2000      	movs	r0, #0
 8004510:	f04f 0c0a 	mov.w	ip, #10
 8004514:	4621      	mov	r1, r4
 8004516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800451a:	3b30      	subs	r3, #48	@ 0x30
 800451c:	2b09      	cmp	r3, #9
 800451e:	d94b      	bls.n	80045b8 <_svfiprintf_r+0x17c>
 8004520:	b1b0      	cbz	r0, 8004550 <_svfiprintf_r+0x114>
 8004522:	9207      	str	r2, [sp, #28]
 8004524:	e014      	b.n	8004550 <_svfiprintf_r+0x114>
 8004526:	eba0 0308 	sub.w	r3, r0, r8
 800452a:	fa09 f303 	lsl.w	r3, r9, r3
 800452e:	4313      	orrs	r3, r2
 8004530:	9304      	str	r3, [sp, #16]
 8004532:	46a2      	mov	sl, r4
 8004534:	e7d2      	b.n	80044dc <_svfiprintf_r+0xa0>
 8004536:	9b03      	ldr	r3, [sp, #12]
 8004538:	1d19      	adds	r1, r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9103      	str	r1, [sp, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	bfbb      	ittet	lt
 8004542:	425b      	neglt	r3, r3
 8004544:	f042 0202 	orrlt.w	r2, r2, #2
 8004548:	9307      	strge	r3, [sp, #28]
 800454a:	9307      	strlt	r3, [sp, #28]
 800454c:	bfb8      	it	lt
 800454e:	9204      	strlt	r2, [sp, #16]
 8004550:	7823      	ldrb	r3, [r4, #0]
 8004552:	2b2e      	cmp	r3, #46	@ 0x2e
 8004554:	d10a      	bne.n	800456c <_svfiprintf_r+0x130>
 8004556:	7863      	ldrb	r3, [r4, #1]
 8004558:	2b2a      	cmp	r3, #42	@ 0x2a
 800455a:	d132      	bne.n	80045c2 <_svfiprintf_r+0x186>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	9203      	str	r2, [sp, #12]
 8004564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004568:	3402      	adds	r4, #2
 800456a:	9305      	str	r3, [sp, #20]
 800456c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004630 <_svfiprintf_r+0x1f4>
 8004570:	7821      	ldrb	r1, [r4, #0]
 8004572:	2203      	movs	r2, #3
 8004574:	4650      	mov	r0, sl
 8004576:	f7fb fe2b 	bl	80001d0 <memchr>
 800457a:	b138      	cbz	r0, 800458c <_svfiprintf_r+0x150>
 800457c:	9b04      	ldr	r3, [sp, #16]
 800457e:	eba0 000a 	sub.w	r0, r0, sl
 8004582:	2240      	movs	r2, #64	@ 0x40
 8004584:	4082      	lsls	r2, r0
 8004586:	4313      	orrs	r3, r2
 8004588:	3401      	adds	r4, #1
 800458a:	9304      	str	r3, [sp, #16]
 800458c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004590:	4824      	ldr	r0, [pc, #144]	@ (8004624 <_svfiprintf_r+0x1e8>)
 8004592:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004596:	2206      	movs	r2, #6
 8004598:	f7fb fe1a 	bl	80001d0 <memchr>
 800459c:	2800      	cmp	r0, #0
 800459e:	d036      	beq.n	800460e <_svfiprintf_r+0x1d2>
 80045a0:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <_svfiprintf_r+0x1ec>)
 80045a2:	bb1b      	cbnz	r3, 80045ec <_svfiprintf_r+0x1b0>
 80045a4:	9b03      	ldr	r3, [sp, #12]
 80045a6:	3307      	adds	r3, #7
 80045a8:	f023 0307 	bic.w	r3, r3, #7
 80045ac:	3308      	adds	r3, #8
 80045ae:	9303      	str	r3, [sp, #12]
 80045b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045b2:	4433      	add	r3, r6
 80045b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045b6:	e76a      	b.n	800448e <_svfiprintf_r+0x52>
 80045b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045bc:	460c      	mov	r4, r1
 80045be:	2001      	movs	r0, #1
 80045c0:	e7a8      	b.n	8004514 <_svfiprintf_r+0xd8>
 80045c2:	2300      	movs	r3, #0
 80045c4:	3401      	adds	r4, #1
 80045c6:	9305      	str	r3, [sp, #20]
 80045c8:	4619      	mov	r1, r3
 80045ca:	f04f 0c0a 	mov.w	ip, #10
 80045ce:	4620      	mov	r0, r4
 80045d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045d4:	3a30      	subs	r2, #48	@ 0x30
 80045d6:	2a09      	cmp	r2, #9
 80045d8:	d903      	bls.n	80045e2 <_svfiprintf_r+0x1a6>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0c6      	beq.n	800456c <_svfiprintf_r+0x130>
 80045de:	9105      	str	r1, [sp, #20]
 80045e0:	e7c4      	b.n	800456c <_svfiprintf_r+0x130>
 80045e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045e6:	4604      	mov	r4, r0
 80045e8:	2301      	movs	r3, #1
 80045ea:	e7f0      	b.n	80045ce <_svfiprintf_r+0x192>
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	462a      	mov	r2, r5
 80045f2:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <_svfiprintf_r+0x1f0>)
 80045f4:	a904      	add	r1, sp, #16
 80045f6:	4638      	mov	r0, r7
 80045f8:	f3af 8000 	nop.w
 80045fc:	1c42      	adds	r2, r0, #1
 80045fe:	4606      	mov	r6, r0
 8004600:	d1d6      	bne.n	80045b0 <_svfiprintf_r+0x174>
 8004602:	89ab      	ldrh	r3, [r5, #12]
 8004604:	065b      	lsls	r3, r3, #25
 8004606:	f53f af2d 	bmi.w	8004464 <_svfiprintf_r+0x28>
 800460a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800460c:	e72c      	b.n	8004468 <_svfiprintf_r+0x2c>
 800460e:	ab03      	add	r3, sp, #12
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	462a      	mov	r2, r5
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <_svfiprintf_r+0x1f0>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	4638      	mov	r0, r7
 800461a:	f000 f9bb 	bl	8004994 <_printf_i>
 800461e:	e7ed      	b.n	80045fc <_svfiprintf_r+0x1c0>
 8004620:	08005040 	.word	0x08005040
 8004624:	0800504a 	.word	0x0800504a
 8004628:	00000000 	.word	0x00000000
 800462c:	08004385 	.word	0x08004385
 8004630:	08005046 	.word	0x08005046

08004634 <__sfputc_r>:
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	3b01      	subs	r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	b410      	push	{r4}
 800463c:	6093      	str	r3, [r2, #8]
 800463e:	da08      	bge.n	8004652 <__sfputc_r+0x1e>
 8004640:	6994      	ldr	r4, [r2, #24]
 8004642:	42a3      	cmp	r3, r4
 8004644:	db01      	blt.n	800464a <__sfputc_r+0x16>
 8004646:	290a      	cmp	r1, #10
 8004648:	d103      	bne.n	8004652 <__sfputc_r+0x1e>
 800464a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464e:	f7ff bd20 	b.w	8004092 <__swbuf_r>
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	1c58      	adds	r0, r3, #1
 8004656:	6010      	str	r0, [r2, #0]
 8004658:	7019      	strb	r1, [r3, #0]
 800465a:	4608      	mov	r0, r1
 800465c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004660:	4770      	bx	lr

08004662 <__sfputs_r>:
 8004662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	4614      	mov	r4, r2
 800466a:	18d5      	adds	r5, r2, r3
 800466c:	42ac      	cmp	r4, r5
 800466e:	d101      	bne.n	8004674 <__sfputs_r+0x12>
 8004670:	2000      	movs	r0, #0
 8004672:	e007      	b.n	8004684 <__sfputs_r+0x22>
 8004674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004678:	463a      	mov	r2, r7
 800467a:	4630      	mov	r0, r6
 800467c:	f7ff ffda 	bl	8004634 <__sfputc_r>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d1f3      	bne.n	800466c <__sfputs_r+0xa>
 8004684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004688 <_vfiprintf_r>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	b09d      	sub	sp, #116	@ 0x74
 8004690:	4614      	mov	r4, r2
 8004692:	4698      	mov	r8, r3
 8004694:	4606      	mov	r6, r0
 8004696:	b118      	cbz	r0, 80046a0 <_vfiprintf_r+0x18>
 8004698:	6a03      	ldr	r3, [r0, #32]
 800469a:	b90b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x18>
 800469c:	f7ff fc3a 	bl	8003f14 <__sinit>
 80046a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046a2:	07d9      	lsls	r1, r3, #31
 80046a4:	d405      	bmi.n	80046b2 <_vfiprintf_r+0x2a>
 80046a6:	89ab      	ldrh	r3, [r5, #12]
 80046a8:	059a      	lsls	r2, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_vfiprintf_r+0x2a>
 80046ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ae:	f7ff fe0e 	bl	80042ce <__retarget_lock_acquire_recursive>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	071b      	lsls	r3, r3, #28
 80046b6:	d501      	bpl.n	80046bc <_vfiprintf_r+0x34>
 80046b8:	692b      	ldr	r3, [r5, #16]
 80046ba:	b99b      	cbnz	r3, 80046e4 <_vfiprintf_r+0x5c>
 80046bc:	4629      	mov	r1, r5
 80046be:	4630      	mov	r0, r6
 80046c0:	f7ff fd26 	bl	8004110 <__swsetup_r>
 80046c4:	b170      	cbz	r0, 80046e4 <_vfiprintf_r+0x5c>
 80046c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046c8:	07dc      	lsls	r4, r3, #31
 80046ca:	d504      	bpl.n	80046d6 <_vfiprintf_r+0x4e>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	b01d      	add	sp, #116	@ 0x74
 80046d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046d6:	89ab      	ldrh	r3, [r5, #12]
 80046d8:	0598      	lsls	r0, r3, #22
 80046da:	d4f7      	bmi.n	80046cc <_vfiprintf_r+0x44>
 80046dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046de:	f7ff fdf7 	bl	80042d0 <__retarget_lock_release_recursive>
 80046e2:	e7f3      	b.n	80046cc <_vfiprintf_r+0x44>
 80046e4:	2300      	movs	r3, #0
 80046e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046e8:	2320      	movs	r3, #32
 80046ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80046f2:	2330      	movs	r3, #48	@ 0x30
 80046f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048a4 <_vfiprintf_r+0x21c>
 80046f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046fc:	f04f 0901 	mov.w	r9, #1
 8004700:	4623      	mov	r3, r4
 8004702:	469a      	mov	sl, r3
 8004704:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004708:	b10a      	cbz	r2, 800470e <_vfiprintf_r+0x86>
 800470a:	2a25      	cmp	r2, #37	@ 0x25
 800470c:	d1f9      	bne.n	8004702 <_vfiprintf_r+0x7a>
 800470e:	ebba 0b04 	subs.w	fp, sl, r4
 8004712:	d00b      	beq.n	800472c <_vfiprintf_r+0xa4>
 8004714:	465b      	mov	r3, fp
 8004716:	4622      	mov	r2, r4
 8004718:	4629      	mov	r1, r5
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff ffa1 	bl	8004662 <__sfputs_r>
 8004720:	3001      	adds	r0, #1
 8004722:	f000 80a7 	beq.w	8004874 <_vfiprintf_r+0x1ec>
 8004726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004728:	445a      	add	r2, fp
 800472a:	9209      	str	r2, [sp, #36]	@ 0x24
 800472c:	f89a 3000 	ldrb.w	r3, [sl]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 809f 	beq.w	8004874 <_vfiprintf_r+0x1ec>
 8004736:	2300      	movs	r3, #0
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004740:	f10a 0a01 	add.w	sl, sl, #1
 8004744:	9304      	str	r3, [sp, #16]
 8004746:	9307      	str	r3, [sp, #28]
 8004748:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800474c:	931a      	str	r3, [sp, #104]	@ 0x68
 800474e:	4654      	mov	r4, sl
 8004750:	2205      	movs	r2, #5
 8004752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004756:	4853      	ldr	r0, [pc, #332]	@ (80048a4 <_vfiprintf_r+0x21c>)
 8004758:	f7fb fd3a 	bl	80001d0 <memchr>
 800475c:	9a04      	ldr	r2, [sp, #16]
 800475e:	b9d8      	cbnz	r0, 8004798 <_vfiprintf_r+0x110>
 8004760:	06d1      	lsls	r1, r2, #27
 8004762:	bf44      	itt	mi
 8004764:	2320      	movmi	r3, #32
 8004766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800476a:	0713      	lsls	r3, r2, #28
 800476c:	bf44      	itt	mi
 800476e:	232b      	movmi	r3, #43	@ 0x2b
 8004770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004774:	f89a 3000 	ldrb.w	r3, [sl]
 8004778:	2b2a      	cmp	r3, #42	@ 0x2a
 800477a:	d015      	beq.n	80047a8 <_vfiprintf_r+0x120>
 800477c:	9a07      	ldr	r2, [sp, #28]
 800477e:	4654      	mov	r4, sl
 8004780:	2000      	movs	r0, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	4621      	mov	r1, r4
 8004788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478c:	3b30      	subs	r3, #48	@ 0x30
 800478e:	2b09      	cmp	r3, #9
 8004790:	d94b      	bls.n	800482a <_vfiprintf_r+0x1a2>
 8004792:	b1b0      	cbz	r0, 80047c2 <_vfiprintf_r+0x13a>
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	e014      	b.n	80047c2 <_vfiprintf_r+0x13a>
 8004798:	eba0 0308 	sub.w	r3, r0, r8
 800479c:	fa09 f303 	lsl.w	r3, r9, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	46a2      	mov	sl, r4
 80047a6:	e7d2      	b.n	800474e <_vfiprintf_r+0xc6>
 80047a8:	9b03      	ldr	r3, [sp, #12]
 80047aa:	1d19      	adds	r1, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	9103      	str	r1, [sp, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfbb      	ittet	lt
 80047b4:	425b      	neglt	r3, r3
 80047b6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ba:	9307      	strge	r3, [sp, #28]
 80047bc:	9307      	strlt	r3, [sp, #28]
 80047be:	bfb8      	it	lt
 80047c0:	9204      	strlt	r2, [sp, #16]
 80047c2:	7823      	ldrb	r3, [r4, #0]
 80047c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80047c6:	d10a      	bne.n	80047de <_vfiprintf_r+0x156>
 80047c8:	7863      	ldrb	r3, [r4, #1]
 80047ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80047cc:	d132      	bne.n	8004834 <_vfiprintf_r+0x1ac>
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	1d1a      	adds	r2, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047da:	3402      	adds	r4, #2
 80047dc:	9305      	str	r3, [sp, #20]
 80047de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048b4 <_vfiprintf_r+0x22c>
 80047e2:	7821      	ldrb	r1, [r4, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4650      	mov	r0, sl
 80047e8:	f7fb fcf2 	bl	80001d0 <memchr>
 80047ec:	b138      	cbz	r0, 80047fe <_vfiprintf_r+0x176>
 80047ee:	9b04      	ldr	r3, [sp, #16]
 80047f0:	eba0 000a 	sub.w	r0, r0, sl
 80047f4:	2240      	movs	r2, #64	@ 0x40
 80047f6:	4082      	lsls	r2, r0
 80047f8:	4313      	orrs	r3, r2
 80047fa:	3401      	adds	r4, #1
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004802:	4829      	ldr	r0, [pc, #164]	@ (80048a8 <_vfiprintf_r+0x220>)
 8004804:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004808:	2206      	movs	r2, #6
 800480a:	f7fb fce1 	bl	80001d0 <memchr>
 800480e:	2800      	cmp	r0, #0
 8004810:	d03f      	beq.n	8004892 <_vfiprintf_r+0x20a>
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <_vfiprintf_r+0x224>)
 8004814:	bb1b      	cbnz	r3, 800485e <_vfiprintf_r+0x1d6>
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	3307      	adds	r3, #7
 800481a:	f023 0307 	bic.w	r3, r3, #7
 800481e:	3308      	adds	r3, #8
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004824:	443b      	add	r3, r7
 8004826:	9309      	str	r3, [sp, #36]	@ 0x24
 8004828:	e76a      	b.n	8004700 <_vfiprintf_r+0x78>
 800482a:	fb0c 3202 	mla	r2, ip, r2, r3
 800482e:	460c      	mov	r4, r1
 8004830:	2001      	movs	r0, #1
 8004832:	e7a8      	b.n	8004786 <_vfiprintf_r+0xfe>
 8004834:	2300      	movs	r3, #0
 8004836:	3401      	adds	r4, #1
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	4619      	mov	r1, r3
 800483c:	f04f 0c0a 	mov.w	ip, #10
 8004840:	4620      	mov	r0, r4
 8004842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004846:	3a30      	subs	r2, #48	@ 0x30
 8004848:	2a09      	cmp	r2, #9
 800484a:	d903      	bls.n	8004854 <_vfiprintf_r+0x1cc>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0c6      	beq.n	80047de <_vfiprintf_r+0x156>
 8004850:	9105      	str	r1, [sp, #20]
 8004852:	e7c4      	b.n	80047de <_vfiprintf_r+0x156>
 8004854:	fb0c 2101 	mla	r1, ip, r1, r2
 8004858:	4604      	mov	r4, r0
 800485a:	2301      	movs	r3, #1
 800485c:	e7f0      	b.n	8004840 <_vfiprintf_r+0x1b8>
 800485e:	ab03      	add	r3, sp, #12
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	462a      	mov	r2, r5
 8004864:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <_vfiprintf_r+0x228>)
 8004866:	a904      	add	r1, sp, #16
 8004868:	4630      	mov	r0, r6
 800486a:	f3af 8000 	nop.w
 800486e:	4607      	mov	r7, r0
 8004870:	1c78      	adds	r0, r7, #1
 8004872:	d1d6      	bne.n	8004822 <_vfiprintf_r+0x19a>
 8004874:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004876:	07d9      	lsls	r1, r3, #31
 8004878:	d405      	bmi.n	8004886 <_vfiprintf_r+0x1fe>
 800487a:	89ab      	ldrh	r3, [r5, #12]
 800487c:	059a      	lsls	r2, r3, #22
 800487e:	d402      	bmi.n	8004886 <_vfiprintf_r+0x1fe>
 8004880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004882:	f7ff fd25 	bl	80042d0 <__retarget_lock_release_recursive>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	065b      	lsls	r3, r3, #25
 800488a:	f53f af1f 	bmi.w	80046cc <_vfiprintf_r+0x44>
 800488e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004890:	e71e      	b.n	80046d0 <_vfiprintf_r+0x48>
 8004892:	ab03      	add	r3, sp, #12
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	462a      	mov	r2, r5
 8004898:	4b05      	ldr	r3, [pc, #20]	@ (80048b0 <_vfiprintf_r+0x228>)
 800489a:	a904      	add	r1, sp, #16
 800489c:	4630      	mov	r0, r6
 800489e:	f000 f879 	bl	8004994 <_printf_i>
 80048a2:	e7e4      	b.n	800486e <_vfiprintf_r+0x1e6>
 80048a4:	08005040 	.word	0x08005040
 80048a8:	0800504a 	.word	0x0800504a
 80048ac:	00000000 	.word	0x00000000
 80048b0:	08004663 	.word	0x08004663
 80048b4:	08005046 	.word	0x08005046

080048b8 <_printf_common>:
 80048b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	4616      	mov	r6, r2
 80048be:	4698      	mov	r8, r3
 80048c0:	688a      	ldr	r2, [r1, #8]
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bfb8      	it	lt
 80048cc:	4613      	movlt	r3, r2
 80048ce:	6033      	str	r3, [r6, #0]
 80048d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048d4:	4607      	mov	r7, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	b10a      	cbz	r2, 80048de <_printf_common+0x26>
 80048da:	3301      	adds	r3, #1
 80048dc:	6033      	str	r3, [r6, #0]
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	bf42      	ittt	mi
 80048e4:	6833      	ldrmi	r3, [r6, #0]
 80048e6:	3302      	addmi	r3, #2
 80048e8:	6033      	strmi	r3, [r6, #0]
 80048ea:	6825      	ldr	r5, [r4, #0]
 80048ec:	f015 0506 	ands.w	r5, r5, #6
 80048f0:	d106      	bne.n	8004900 <_printf_common+0x48>
 80048f2:	f104 0a19 	add.w	sl, r4, #25
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	6832      	ldr	r2, [r6, #0]
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dc26      	bgt.n	800494e <_printf_common+0x96>
 8004900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	3b00      	subs	r3, #0
 8004908:	bf18      	it	ne
 800490a:	2301      	movne	r3, #1
 800490c:	0692      	lsls	r2, r2, #26
 800490e:	d42b      	bmi.n	8004968 <_printf_common+0xb0>
 8004910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004914:	4641      	mov	r1, r8
 8004916:	4638      	mov	r0, r7
 8004918:	47c8      	blx	r9
 800491a:	3001      	adds	r0, #1
 800491c:	d01e      	beq.n	800495c <_printf_common+0xa4>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	2b04      	cmp	r3, #4
 8004928:	bf02      	ittt	eq
 800492a:	68e5      	ldreq	r5, [r4, #12]
 800492c:	6833      	ldreq	r3, [r6, #0]
 800492e:	1aed      	subeq	r5, r5, r3
 8004930:	68a3      	ldr	r3, [r4, #8]
 8004932:	bf0c      	ite	eq
 8004934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004938:	2500      	movne	r5, #0
 800493a:	4293      	cmp	r3, r2
 800493c:	bfc4      	itt	gt
 800493e:	1a9b      	subgt	r3, r3, r2
 8004940:	18ed      	addgt	r5, r5, r3
 8004942:	2600      	movs	r6, #0
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xc8>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xa8>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4641      	mov	r1, r8
 8004954:	4638      	mov	r0, r7
 8004956:	47c8      	blx	r9
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xac>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c6      	b.n	80048f6 <_printf_common+0x3e>
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	2030      	movs	r0, #48	@ 0x30
 800496e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004972:	4422      	add	r2, r4
 8004974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800497c:	3302      	adds	r3, #2
 800497e:	e7c7      	b.n	8004910 <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4641      	mov	r1, r8
 8004986:	4638      	mov	r0, r7
 8004988:	47c8      	blx	r9
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa4>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x8e>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	7e0f      	ldrb	r7, [r1, #24]
 800499a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800499c:	2f78      	cmp	r7, #120	@ 0x78
 800499e:	4691      	mov	r9, r2
 80049a0:	4680      	mov	r8, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	469a      	mov	sl, r3
 80049a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	@ 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d2 	beq.w	8004b5a <_printf_i+0x1c6>
 80049b6:	2f58      	cmp	r7, #88	@ 0x58
 80049b8:	f000 80b9 	beq.w	8004b2e <_printf_i+0x19a>
 80049bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a101      	add	r1, pc, #4	@ (adr r1, 80049d4 <_printf_i+0x40>)
 80049d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b41 	.word	0x08004b41
 8004a04:	08004a6b 	.word	0x08004a6b
 8004a08:	08004afb 	.word	0x08004afb
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b63 	.word	0x08004b63
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a6b 	.word	0x08004a6b
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b03 	.word	0x08004b03
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6032      	str	r2, [r6, #0]
 8004a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e09d      	b.n	8004b7c <_printf_i+0x1e8>
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	1d19      	adds	r1, r3, #4
 8004a46:	6031      	str	r1, [r6, #0]
 8004a48:	0606      	lsls	r6, r0, #24
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0xbc>
 8004a4c:	681d      	ldr	r5, [r3, #0]
 8004a4e:	e003      	b.n	8004a58 <_printf_i+0xc4>
 8004a50:	0645      	lsls	r5, r0, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0xb8>
 8004a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	da03      	bge.n	8004a64 <_printf_i+0xd0>
 8004a5c:	232d      	movs	r3, #45	@ 0x2d
 8004a5e:	426d      	negs	r5, r5
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a64:	4859      	ldr	r0, [pc, #356]	@ (8004bcc <_printf_i+0x238>)
 8004a66:	230a      	movs	r3, #10
 8004a68:	e011      	b.n	8004a8e <_printf_i+0xfa>
 8004a6a:	6821      	ldr	r1, [r4, #0]
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	0608      	lsls	r0, r1, #24
 8004a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a74:	d402      	bmi.n	8004a7c <_printf_i+0xe8>
 8004a76:	0649      	lsls	r1, r1, #25
 8004a78:	bf48      	it	mi
 8004a7a:	b2ad      	uxthmi	r5, r5
 8004a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7e:	4853      	ldr	r0, [pc, #332]	@ (8004bcc <_printf_i+0x238>)
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	bf14      	ite	ne
 8004a84:	230a      	movne	r3, #10
 8004a86:	2308      	moveq	r3, #8
 8004a88:	2100      	movs	r1, #0
 8004a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8e:	6866      	ldr	r6, [r4, #4]
 8004a90:	60a6      	str	r6, [r4, #8]
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	bfa2      	ittt	ge
 8004a96:	6821      	ldrge	r1, [r4, #0]
 8004a98:	f021 0104 	bicge.w	r1, r1, #4
 8004a9c:	6021      	strge	r1, [r4, #0]
 8004a9e:	b90d      	cbnz	r5, 8004aa4 <_printf_i+0x110>
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	d04b      	beq.n	8004b3c <_printf_i+0x1a8>
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aaa:	fb03 5711 	mls	r7, r3, r1, r5
 8004aae:	5dc7      	ldrb	r7, [r0, r7]
 8004ab0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab4:	462f      	mov	r7, r5
 8004ab6:	42bb      	cmp	r3, r7
 8004ab8:	460d      	mov	r5, r1
 8004aba:	d9f4      	bls.n	8004aa6 <_printf_i+0x112>
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d10b      	bne.n	8004ad8 <_printf_i+0x144>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	07df      	lsls	r7, r3, #31
 8004ac4:	d508      	bpl.n	8004ad8 <_printf_i+0x144>
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	6861      	ldr	r1, [r4, #4]
 8004aca:	4299      	cmp	r1, r3
 8004acc:	bfde      	ittt	le
 8004ace:	2330      	movle	r3, #48	@ 0x30
 8004ad0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad8:	1b92      	subs	r2, r2, r6
 8004ada:	6122      	str	r2, [r4, #16]
 8004adc:	f8cd a000 	str.w	sl, [sp]
 8004ae0:	464b      	mov	r3, r9
 8004ae2:	aa03      	add	r2, sp, #12
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4640      	mov	r0, r8
 8004ae8:	f7ff fee6 	bl	80048b8 <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	d14a      	bne.n	8004b86 <_printf_i+0x1f2>
 8004af0:	f04f 30ff 	mov.w	r0, #4294967295
 8004af4:	b004      	add	sp, #16
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f043 0320 	orr.w	r3, r3, #32
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	4833      	ldr	r0, [pc, #204]	@ (8004bd0 <_printf_i+0x23c>)
 8004b04:	2778      	movs	r7, #120	@ 0x78
 8004b06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	6831      	ldr	r1, [r6, #0]
 8004b0e:	061f      	lsls	r7, r3, #24
 8004b10:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b14:	d402      	bmi.n	8004b1c <_printf_i+0x188>
 8004b16:	065f      	lsls	r7, r3, #25
 8004b18:	bf48      	it	mi
 8004b1a:	b2ad      	uxthmi	r5, r5
 8004b1c:	6031      	str	r1, [r6, #0]
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	bf44      	itt	mi
 8004b22:	f043 0320 	orrmi.w	r3, r3, #32
 8004b26:	6023      	strmi	r3, [r4, #0]
 8004b28:	b11d      	cbz	r5, 8004b32 <_printf_i+0x19e>
 8004b2a:	2310      	movs	r3, #16
 8004b2c:	e7ac      	b.n	8004a88 <_printf_i+0xf4>
 8004b2e:	4827      	ldr	r0, [pc, #156]	@ (8004bcc <_printf_i+0x238>)
 8004b30:	e7e9      	b.n	8004b06 <_printf_i+0x172>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	f023 0320 	bic.w	r3, r3, #32
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	e7f6      	b.n	8004b2a <_printf_i+0x196>
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	e7bd      	b.n	8004abc <_printf_i+0x128>
 8004b40:	6833      	ldr	r3, [r6, #0]
 8004b42:	6825      	ldr	r5, [r4, #0]
 8004b44:	6961      	ldr	r1, [r4, #20]
 8004b46:	1d18      	adds	r0, r3, #4
 8004b48:	6030      	str	r0, [r6, #0]
 8004b4a:	062e      	lsls	r6, r5, #24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	d501      	bpl.n	8004b54 <_printf_i+0x1c0>
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <_printf_i+0x1c6>
 8004b54:	0668      	lsls	r0, r5, #25
 8004b56:	d5fb      	bpl.n	8004b50 <_printf_i+0x1bc>
 8004b58:	8019      	strh	r1, [r3, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	4616      	mov	r6, r2
 8004b60:	e7bc      	b.n	8004adc <_printf_i+0x148>
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	6032      	str	r2, [r6, #0]
 8004b68:	681e      	ldr	r6, [r3, #0]
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f7fb fb2e 	bl	80001d0 <memchr>
 8004b74:	b108      	cbz	r0, 8004b7a <_printf_i+0x1e6>
 8004b76:	1b80      	subs	r0, r0, r6
 8004b78:	6060      	str	r0, [r4, #4]
 8004b7a:	6863      	ldr	r3, [r4, #4]
 8004b7c:	6123      	str	r3, [r4, #16]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b84:	e7aa      	b.n	8004adc <_printf_i+0x148>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	47d0      	blx	sl
 8004b90:	3001      	adds	r0, #1
 8004b92:	d0ad      	beq.n	8004af0 <_printf_i+0x15c>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	079b      	lsls	r3, r3, #30
 8004b98:	d413      	bmi.n	8004bc2 <_printf_i+0x22e>
 8004b9a:	68e0      	ldr	r0, [r4, #12]
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	4298      	cmp	r0, r3
 8004ba0:	bfb8      	it	lt
 8004ba2:	4618      	movlt	r0, r3
 8004ba4:	e7a6      	b.n	8004af4 <_printf_i+0x160>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4649      	mov	r1, r9
 8004bac:	4640      	mov	r0, r8
 8004bae:	47d0      	blx	sl
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d09d      	beq.n	8004af0 <_printf_i+0x15c>
 8004bb4:	3501      	adds	r5, #1
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	9903      	ldr	r1, [sp, #12]
 8004bba:	1a5b      	subs	r3, r3, r1
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dcf2      	bgt.n	8004ba6 <_printf_i+0x212>
 8004bc0:	e7eb      	b.n	8004b9a <_printf_i+0x206>
 8004bc2:	2500      	movs	r5, #0
 8004bc4:	f104 0619 	add.w	r6, r4, #25
 8004bc8:	e7f5      	b.n	8004bb6 <_printf_i+0x222>
 8004bca:	bf00      	nop
 8004bcc:	08005051 	.word	0x08005051
 8004bd0:	08005062 	.word	0x08005062

08004bd4 <__sflush_r>:
 8004bd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bdc:	0716      	lsls	r6, r2, #28
 8004bde:	4605      	mov	r5, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	d454      	bmi.n	8004c8e <__sflush_r+0xba>
 8004be4:	684b      	ldr	r3, [r1, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	dc02      	bgt.n	8004bf0 <__sflush_r+0x1c>
 8004bea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dd48      	ble.n	8004c82 <__sflush_r+0xae>
 8004bf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	d045      	beq.n	8004c82 <__sflush_r+0xae>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bfc:	682f      	ldr	r7, [r5, #0]
 8004bfe:	6a21      	ldr	r1, [r4, #32]
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	d030      	beq.n	8004c66 <__sflush_r+0x92>
 8004c04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c06:	89a3      	ldrh	r3, [r4, #12]
 8004c08:	0759      	lsls	r1, r3, #29
 8004c0a:	d505      	bpl.n	8004c18 <__sflush_r+0x44>
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	1ad2      	subs	r2, r2, r3
 8004c10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c12:	b10b      	cbz	r3, 8004c18 <__sflush_r+0x44>
 8004c14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c1c:	6a21      	ldr	r1, [r4, #32]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b0      	blx	r6
 8004c22:	1c43      	adds	r3, r0, #1
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	d106      	bne.n	8004c36 <__sflush_r+0x62>
 8004c28:	6829      	ldr	r1, [r5, #0]
 8004c2a:	291d      	cmp	r1, #29
 8004c2c:	d82b      	bhi.n	8004c86 <__sflush_r+0xb2>
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd8 <__sflush_r+0x104>)
 8004c30:	410a      	asrs	r2, r1
 8004c32:	07d6      	lsls	r6, r2, #31
 8004c34:	d427      	bmi.n	8004c86 <__sflush_r+0xb2>
 8004c36:	2200      	movs	r2, #0
 8004c38:	6062      	str	r2, [r4, #4]
 8004c3a:	04d9      	lsls	r1, r3, #19
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	6022      	str	r2, [r4, #0]
 8004c40:	d504      	bpl.n	8004c4c <__sflush_r+0x78>
 8004c42:	1c42      	adds	r2, r0, #1
 8004c44:	d101      	bne.n	8004c4a <__sflush_r+0x76>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b903      	cbnz	r3, 8004c4c <__sflush_r+0x78>
 8004c4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c4e:	602f      	str	r7, [r5, #0]
 8004c50:	b1b9      	cbz	r1, 8004c82 <__sflush_r+0xae>
 8004c52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c56:	4299      	cmp	r1, r3
 8004c58:	d002      	beq.n	8004c60 <__sflush_r+0x8c>
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7ff fb48 	bl	80042f0 <_free_r>
 8004c60:	2300      	movs	r3, #0
 8004c62:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c64:	e00d      	b.n	8004c82 <__sflush_r+0xae>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4628      	mov	r0, r5
 8004c6a:	47b0      	blx	r6
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	1c50      	adds	r0, r2, #1
 8004c70:	d1c9      	bne.n	8004c06 <__sflush_r+0x32>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0c6      	beq.n	8004c06 <__sflush_r+0x32>
 8004c78:	2b1d      	cmp	r3, #29
 8004c7a:	d001      	beq.n	8004c80 <__sflush_r+0xac>
 8004c7c:	2b16      	cmp	r3, #22
 8004c7e:	d11e      	bne.n	8004cbe <__sflush_r+0xea>
 8004c80:	602f      	str	r7, [r5, #0]
 8004c82:	2000      	movs	r0, #0
 8004c84:	e022      	b.n	8004ccc <__sflush_r+0xf8>
 8004c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c8a:	b21b      	sxth	r3, r3
 8004c8c:	e01b      	b.n	8004cc6 <__sflush_r+0xf2>
 8004c8e:	690f      	ldr	r7, [r1, #16]
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	d0f6      	beq.n	8004c82 <__sflush_r+0xae>
 8004c94:	0793      	lsls	r3, r2, #30
 8004c96:	680e      	ldr	r6, [r1, #0]
 8004c98:	bf08      	it	eq
 8004c9a:	694b      	ldreq	r3, [r1, #20]
 8004c9c:	600f      	str	r7, [r1, #0]
 8004c9e:	bf18      	it	ne
 8004ca0:	2300      	movne	r3, #0
 8004ca2:	eba6 0807 	sub.w	r8, r6, r7
 8004ca6:	608b      	str	r3, [r1, #8]
 8004ca8:	f1b8 0f00 	cmp.w	r8, #0
 8004cac:	dde9      	ble.n	8004c82 <__sflush_r+0xae>
 8004cae:	6a21      	ldr	r1, [r4, #32]
 8004cb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cb2:	4643      	mov	r3, r8
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b0      	blx	r6
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	dc08      	bgt.n	8004cd0 <__sflush_r+0xfc>
 8004cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd0:	4407      	add	r7, r0
 8004cd2:	eba8 0800 	sub.w	r8, r8, r0
 8004cd6:	e7e7      	b.n	8004ca8 <__sflush_r+0xd4>
 8004cd8:	dfbffffe 	.word	0xdfbffffe

08004cdc <_fflush_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	690b      	ldr	r3, [r1, #16]
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	b913      	cbnz	r3, 8004cec <_fflush_r+0x10>
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	4628      	mov	r0, r5
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	b118      	cbz	r0, 8004cf6 <_fflush_r+0x1a>
 8004cee:	6a03      	ldr	r3, [r0, #32]
 8004cf0:	b90b      	cbnz	r3, 8004cf6 <_fflush_r+0x1a>
 8004cf2:	f7ff f90f 	bl	8003f14 <__sinit>
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f3      	beq.n	8004ce6 <_fflush_r+0xa>
 8004cfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d00:	07d0      	lsls	r0, r2, #31
 8004d02:	d404      	bmi.n	8004d0e <_fflush_r+0x32>
 8004d04:	0599      	lsls	r1, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_fflush_r+0x32>
 8004d08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d0a:	f7ff fae0 	bl	80042ce <__retarget_lock_acquire_recursive>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	4621      	mov	r1, r4
 8004d12:	f7ff ff5f 	bl	8004bd4 <__sflush_r>
 8004d16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d18:	07da      	lsls	r2, r3, #31
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	d4e4      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	d4e1      	bmi.n	8004ce8 <_fflush_r+0xc>
 8004d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d26:	f7ff fad3 	bl	80042d0 <__retarget_lock_release_recursive>
 8004d2a:	e7dd      	b.n	8004ce8 <_fflush_r+0xc>

08004d2c <__swhatbuf_r>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	b096      	sub	sp, #88	@ 0x58
 8004d38:	4615      	mov	r5, r2
 8004d3a:	461e      	mov	r6, r3
 8004d3c:	da0d      	bge.n	8004d5a <__swhatbuf_r+0x2e>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d44:	f04f 0100 	mov.w	r1, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2340      	movne	r3, #64	@ 0x40
 8004d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d50:	2000      	movs	r0, #0
 8004d52:	6031      	str	r1, [r6, #0]
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	b016      	add	sp, #88	@ 0x58
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
 8004d5a:	466a      	mov	r2, sp
 8004d5c:	f000 f862 	bl	8004e24 <_fstat_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	dbec      	blt.n	8004d3e <__swhatbuf_r+0x12>
 8004d64:	9901      	ldr	r1, [sp, #4]
 8004d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d6e:	4259      	negs	r1, r3
 8004d70:	4159      	adcs	r1, r3
 8004d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d76:	e7eb      	b.n	8004d50 <__swhatbuf_r+0x24>

08004d78 <__smakebuf_r>:
 8004d78:	898b      	ldrh	r3, [r1, #12]
 8004d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d7c:	079d      	lsls	r5, r3, #30
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	d507      	bpl.n	8004d94 <__smakebuf_r+0x1c>
 8004d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	6123      	str	r3, [r4, #16]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	6163      	str	r3, [r4, #20]
 8004d90:	b003      	add	sp, #12
 8004d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d94:	ab01      	add	r3, sp, #4
 8004d96:	466a      	mov	r2, sp
 8004d98:	f7ff ffc8 	bl	8004d2c <__swhatbuf_r>
 8004d9c:	9f00      	ldr	r7, [sp, #0]
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7fe ff9e 	bl	8003ce4 <_malloc_r>
 8004da8:	b948      	cbnz	r0, 8004dbe <__smakebuf_r+0x46>
 8004daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dae:	059a      	lsls	r2, r3, #22
 8004db0:	d4ee      	bmi.n	8004d90 <__smakebuf_r+0x18>
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	81a3      	strh	r3, [r4, #12]
 8004dbc:	e7e2      	b.n	8004d84 <__smakebuf_r+0xc>
 8004dbe:	89a3      	ldrh	r3, [r4, #12]
 8004dc0:	6020      	str	r0, [r4, #0]
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	9b01      	ldr	r3, [sp, #4]
 8004dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dce:	b15b      	cbz	r3, 8004de8 <__smakebuf_r+0x70>
 8004dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	f000 f837 	bl	8004e48 <_isatty_r>
 8004dda:	b128      	cbz	r0, 8004de8 <__smakebuf_r+0x70>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	431d      	orrs	r5, r3
 8004dec:	81a5      	strh	r5, [r4, #12]
 8004dee:	e7cf      	b.n	8004d90 <__smakebuf_r+0x18>

08004df0 <memmove>:
 8004df0:	4288      	cmp	r0, r1
 8004df2:	b510      	push	{r4, lr}
 8004df4:	eb01 0402 	add.w	r4, r1, r2
 8004df8:	d902      	bls.n	8004e00 <memmove+0x10>
 8004dfa:	4284      	cmp	r4, r0
 8004dfc:	4623      	mov	r3, r4
 8004dfe:	d807      	bhi.n	8004e10 <memmove+0x20>
 8004e00:	1e43      	subs	r3, r0, #1
 8004e02:	42a1      	cmp	r1, r4
 8004e04:	d008      	beq.n	8004e18 <memmove+0x28>
 8004e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e0e:	e7f8      	b.n	8004e02 <memmove+0x12>
 8004e10:	4402      	add	r2, r0
 8004e12:	4601      	mov	r1, r0
 8004e14:	428a      	cmp	r2, r1
 8004e16:	d100      	bne.n	8004e1a <memmove+0x2a>
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e22:	e7f7      	b.n	8004e14 <memmove+0x24>

08004e24 <_fstat_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d07      	ldr	r5, [pc, #28]	@ (8004e44 <_fstat_r+0x20>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f7fc fe51 	bl	8001ad8 <_fstat>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d102      	bne.n	8004e40 <_fstat_r+0x1c>
 8004e3a:	682b      	ldr	r3, [r5, #0]
 8004e3c:	b103      	cbz	r3, 8004e40 <_fstat_r+0x1c>
 8004e3e:	6023      	str	r3, [r4, #0]
 8004e40:	bd38      	pop	{r3, r4, r5, pc}
 8004e42:	bf00      	nop
 8004e44:	200004b8 	.word	0x200004b8

08004e48 <_isatty_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d06      	ldr	r5, [pc, #24]	@ (8004e64 <_isatty_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc fe50 	bl	8001af8 <_isatty>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_isatty_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_isatty_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200004b8 	.word	0x200004b8

08004e68 <_realloc_r>:
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	4680      	mov	r8, r0
 8004e6e:	4615      	mov	r5, r2
 8004e70:	460c      	mov	r4, r1
 8004e72:	b921      	cbnz	r1, 8004e7e <_realloc_r+0x16>
 8004e74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	4611      	mov	r1, r2
 8004e7a:	f7fe bf33 	b.w	8003ce4 <_malloc_r>
 8004e7e:	b92a      	cbnz	r2, 8004e8c <_realloc_r+0x24>
 8004e80:	f7ff fa36 	bl	80042f0 <_free_r>
 8004e84:	2400      	movs	r4, #0
 8004e86:	4620      	mov	r0, r4
 8004e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e8c:	f000 f81a 	bl	8004ec4 <_malloc_usable_size_r>
 8004e90:	4285      	cmp	r5, r0
 8004e92:	4606      	mov	r6, r0
 8004e94:	d802      	bhi.n	8004e9c <_realloc_r+0x34>
 8004e96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e9a:	d8f4      	bhi.n	8004e86 <_realloc_r+0x1e>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f7fe ff20 	bl	8003ce4 <_malloc_r>
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d0ec      	beq.n	8004e84 <_realloc_r+0x1c>
 8004eaa:	42b5      	cmp	r5, r6
 8004eac:	462a      	mov	r2, r5
 8004eae:	4621      	mov	r1, r4
 8004eb0:	bf28      	it	cs
 8004eb2:	4632      	movcs	r2, r6
 8004eb4:	f7ff fa0d 	bl	80042d2 <memcpy>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fa18 	bl	80042f0 <_free_r>
 8004ec0:	463c      	mov	r4, r7
 8004ec2:	e7e0      	b.n	8004e86 <_realloc_r+0x1e>

08004ec4 <_malloc_usable_size_r>:
 8004ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec8:	1f18      	subs	r0, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfbc      	itt	lt
 8004ece:	580b      	ldrlt	r3, [r1, r0]
 8004ed0:	18c0      	addlt	r0, r0, r3
 8004ed2:	4770      	bx	lr

08004ed4 <_init>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr

08004ee0 <_fini>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr
